%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Wed Nov  9 21:55:57 2016
%%Pages: 8
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMBX12 CMBX10 CMTI10 CMTT10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter main.dvi -o main.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.11.09:2155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 58 /colon put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF3171135278BED55
DA1CF0E696B12935EB59B606AA3C0CC50C7A259AF32F4C81D9B39470D9993CBC
8644403D2833B34AF40511654F96BCE0064860F39849DC65622EDFA8E6EDE9A4
7DA62658B43CBCBC5E8F53D4FAE6BD0253C0C81E6C53CF5C3A9E3FCCD9AE773C
FFEB7E81904730359D72FB1F64E3B041A69B2440F63606F42819D52B47DCCCE8
D129A4C05778EA6E4945DA28411430C42A3D1366F57F0124EE7C8370B7AE6C36
2D739A53C137AF4C79060AFDAFA10DAAB8ED7D0BA6781213329980CFCFB18CF7
CBE6C7FA3C27329935F378698BB17CB6118EFDFA622B219121677E28A7F1D775
51B8EFD72B485F950B8B4C0F5E25DA3D226FEC96545945C5EBA0E4FD6B949B54
6AD49D1BB161EDE033C4CB22B633B70F38D563819330DD52912F3D10E9E2D516
B08001738F1EC4FC0B848E039F7297787377D75C8A0D05AD493E6BAB4100D265
D42EBDD432F204616D034B3F80AD2AD5D4E1DAE678029CC028DB4D2D9EC04E63
E90381E3A52638877B18EC6582059C02BE39FD0EFD694DC5204A247B081D9AF5
108E518512572179FE6218E090422F74FD548341A957DDD557CFE2A3E9479F0C
48140B475573873B2FA48758B7E84B69D33EEE87547541F53976C86DC1EF079B
38B2870748DD8BBD767AD3EFBE479ECA5B7529BAE86B985D6E793E013429A238
307E3A46BFD486834A752E5C0D52423EA2457F56703B271F766E4E8E3E36F9D8
4B8B5C77884128E64FE8F3F50A50BA8D036F18CFF8D23E9C0213658AE1922920
9F815677C752A689E9F3205F3B2C633A4FF49133F1A1C995703393F96AB10B55
F7D007E4E7EA49AABA75AEEE4BC60222661084C5F8CE09B039B6BB66D32E2A77
0432D63B1C903E50A6A59A561CAB98B1E55CD8D8FDCB3C3605186F1A186F6F9F
E4B4D5D5593233B551BBE0072CCCFF230370D27DDCBCAF0CCF5D22E6F9E86D21
3B1DF20BC115243EDC116502AE6D67EAB06663D976949A4DA6D62A02DFDA236D
8D4E7B48939C96E9D871BF424989E7C79400B16D8D58BBD4C800AE26AA137B3E
695349171B23918EF93CE8C19A332E241859F5063D9DB99186DB266279168578
ED733E90EF3EE623D915F5164C58E6471FC04A20CE220919A521EA3D67700F09
AC9ECBA5A7E842611426728E9408B6EF09FEBC37824CC08A536062BE24AD6767
E2C752794C1287D4A7B67A1CEFD1D5E0478F9A3FA13F95991B7BEEC1FF9ABB1E
11FDA9750E1F4E694E85A0FD56A56DAC25572C31E5C475D5787EAD329F20D617
EC0C8936560032862BC7FC1D4D5B9518D42860F931703DB69B94FB6EA2C70C52
61EEFF8C2E94EF8554C1031E253AB322365F29E6321DA20C3D092BE8CEC412D7
448B318C42108301B15F64E9D8CBBC9C0FDC4E1CF1B461902FD93DBC092DFF0F
BAAA7523628FE96FFFA1920009024E8E4A19E5A9F65FC28D829A36D8A5FD22D5
F72B985BD8DB595D6312A00545B4AFAF537BE8E2E7E0CC9B1B60338B480408BB
B7FAF529DC47BCCEC2FBD91B52A270ADAA461BAE73B44B9CBD72C466B9A537DA
017A1C56CE3374DD552E9B167778EBD225CFB859969032970306ECC1BB5518E5
AE47F3797180E72691B729D02E13778D502324C03A3669202557823519C6D20F
9CCA16453D74BD14FAE9B0CD5B668AE5C24FEE43CC06FF89A82CD9A431B1CC5F
12ECA7099BAF35DEF9C44F9125DE23D1A7EF99C4E6483AFDA995118969616EE7
776B516D901C8C7AE63EE63D34A665686D8F467D4AC38038B5BD1E3E560827A4
EBCFD903DF37C1AB094A95EB31C4E7E46A23CA39AC35958AA9E26F496DF9932F
6AABC70F77340CB950D0E919E92786EE8FE4D056969AB8C0CA08308A1EF8BDAA
A6506B9319427BE2EC862783E843F967F178E9E9850BCF12BF60093F79E01502
D49B4E0C3F494DD4692903E52C7FF1BC6121E3439E59D35E7595851B12A3C1E1
7BC531E70AE6D97A09FD611B548342F3453F7ADA6FDFD1CE99EA96C3BF3630C9
01B119FDA445231019A9E3486AB256FD99F4DCED65003BD0C4D6608D8A360DB6
6DCB054E84BD3442D366CC01BEDD930B207005C3D8EE63F77FF6700DB4C80D3E
6B8FAE2765FC91AC3C71D8D1ECA5A32CDF254F4FE50DCDBDBBC72F0E5EAF65D0
89027F3AF09D163237CCED2612E1B01DBF20BD02C97904DE9A4F6B520CBFD6FB
0214CFB07AB5F8AE9B8953F1D3A3DAC3AD9B6B6E66E353A3FC9CE1560E8F5F56
520B8387A4E0B6AC984E144F943D761073DAABABAA1CD08127A538F25833156C
4B9AEC2DA6D2B22E1B141B304E3316ED190F2B723659BE98EE64343BBBB0B662
F44D186BDDCD1540EAC6CB9F5B9A26DC03428A54C675A449D82C12C3AA195187
C744E289BF8C0735FD0D34DB0B9574A830F9EF5106BCB15E118DE26D1A1F383A
95A46345492C1C22F4D6A6E916F01AFF90ADFC883C1A59DD669050885F1BFF8C
43B32C48C75F677ACB7471CCEFACA2B0C813EE9E349201D32E9D229605917BD6
8354FB4F548D00EA92B9441423E62A55A5187666E9D93DCA21F97B425EAE7257
5E59F8263A766AD5F56090D631EF06BC9BAA41EDBBFF2C5AFFFCD547595AA779
C1F4A46275CFE43EB2334A6A9469F86265312069496F57C21467F21EC67697C9
CDA8CA45167A06F8C33E8B9CBA58C942AD43A13865FF52365919A1A4B60DAD05
C25B31CDB10592371C0B77EBAD069697663BB7485FBBAFFC36F98827746728A8
0090232E655A9343BE30ABE148B33B00C7C392ADC34A0EFA7F135DEE566AEF32
FBDDF7F956C1BAF5E91F660E7244A7EA9D63D9A9F8C81F1A4ECFE14FA31DE678
9A4AC5A0F3BE3EDBA285B021A559A59FC60A16332CFADD4B9AB7992A789384E2
D7195BAC9B5AB2D3192D8D1C3FA3F71244C9246CA780AB6BA4AECFB60C9DCF9C
12C8CB4B6BAF124A39687CC726356304D76978B921AAF12C7E041E9B3C906B2E
4BE245D8B22F30AEEBEE07B8A388FA03C35BD1B0039BB447ECC698807D2BA742
D2CB97EC90EE077953A446B58A910DCFC096A5BAF094BBCBCDD9B691CE2F89AA
ACE8EA4B68D8EB3AF0C10B9747113F55D3443BE6C1EE4F8F9CB945F8D3D51304
7111709084D6D8C9901160E7F8305FE191AA3BB0C5B89AFC213EE50B22E63A11
4D360F36066498FC5D3E680B023A96541BDDBE618CC7DD6629912B4622779C66
701DAE810C35D389A2D064CA8A31889C02FF0FA5CBAB673EF527C33D6C60B9CF
843533E26E2E6CABAA100E39379191D872B96AB6A78837F0DBC1EDFDAA44B450
4228DE975296B4D77ABC13B18CF06E28B48EF8A9ADD09B59ED951BC9F72642D1
3A09E56899FF72F5DAB2BF8586F7213F6D2790D9F62317E512C19A97A062C2F6
7CD296C64C02E13F3EC6285AF448A88B9663B50BC99C99123DB16D1093B8AAEB
04B8A98CFAAC4661C347B9B3920F560C835C90DC98444180FCC67DC9C3AA05FC
026BA8EF0ACD23505CBBB119BD864076421524418C266E6091384A3094D7AEC0
E9A9A692EB09DFB0B9561082B8707C18DC36118506B29D51B08D12C7FA58E0D6
AF0FE1A46FD225B35F58BCEAA0C81C7981C72E66ABE81220B3F629EF02CBFF1E
7B4CDAA1DD69E5CA09548A68890DA4AA9FDFD7135CC1FE20516344801193B24C
AA5A989F8DEC43A739964E9782B4E6C2FA4F81332F72C9E3699654F6C8DB8889
9E657E5186A40B3E46468572F84A6C7D34A582631CBB86B9F32D6C7607CA99AD
7CBCB12A3030A28B42ED87D6DFA85F00FF8DEA6A7550C92CB688E82FF25CD70A
2943109B44A0076923ECB1190AD2B0C548386AB4DA391A7753401F3CC1768E52
25D9440D0716F9947E8CDEBC39759B08659470072F34462B90306A1E58FC30F9
37853DD5276C6CD7F3B16D80CA3A28FF4DBC40AA72D318450B35431A4B60A1C9
CA816E40FB2B23C9D6A6E291CD6EC8E418F255477C51461D792DE5AA3B5699F5
654EDB5DD5E3E913E0ACD6E142F4D852D468B6264F91A647D2762E450AA26B30
44C9E6B8E28E1B9277C4D2C645750C6D0AE2DC941F75F45CDD4F0EC1A04A11B4
28489A843EA0A05B22206132172AD7A527D7C92A277452D76C381F2860D90559
CF4EC405F4466B45E05CA348051D8C6750A60DCDC9E457B362AAAC829D0AF283
34CA3AB39163D906AB962E5185B37CAE689E9A4260A34A32CFC3F6DB5C24D963
E98F924A4DB7A61A0ECBA4A94002BD39652DD3F48760DE738F9AA02A1A4EAA83
0394D2C8ABBD2B32922B75A3F7B8C72F06DEAB2CEF31D112D6B58CF6F61EDF79
9F4630F768B394A324EB8817402B7AD7F432EFB8125A717968615D4373C7325B
BCE067850D43B1007834F2DD2EC87F8E80C2FDAE54F5AABDAFB1BE0E14058152
82A3978CF23B818EE2AEA9570E1FC739C8DD26BFE8E97FD4678FAC580A00992C
5DD046B7A3E777C83CD7F6A8EACBD2D5E9001579A10BC31E762F40A32EC6A313
6DACE43EB3C4C168F1DCBC890BBAB484F06FD2B6B89B4D20B0BE8BBE3CB17282
00C0AB3B481AB900C0EEF32DF00A7FDBCDDCA77A2AB91A10BCC0EDA918988703
3D9F754C09D92EC5D869C3B8A58BC576BE59D2ED6E46849F3AA0CC83EEE6F457
91601D64D9C75C0A0B80DE09701CA545A4E2E4FCE3FB4A16E726A9D6352EA5DA
CC4E9D2113D5C00D88284F337ECA6EB4BF8D0CB46EF6551CD8B87689E8735A39
B64A4F67ED218CB5B45E009ABE76A522251B035E38918C3A1EE348AC1D2C3E28
B6F4DA309B0A2322C9075AB343716BF7D00C248A2DA8C16113021E490B461369
99FC20A9BAAA8A2BDCB5797621872E22135A6A9D6B643D53126F90708280BB1C
022E1354B7F9413807D7168388A11F3C0D1B0765ED8DB949E55FE0FC7F464A0B
A1A91ABFD993F0F45AC1A5092B4C8A7ECB9F3E6E675987046A85F68B08E8B796
99A1008A69B5F5B16571B8AF2C2F9CD7A4E086FFCA2CAB0E62E61D8339FCE0EA
CB50462B605C8913C4396A7B2235C2F6DBB1517EECAFD482563C6F92C786DE47
C0F55C0AF3B60905A0C88AEF636A922F51EDA3C9B9AD5CB9925AEC2A53C38B0D
B49045769ADC851AF3B74C9F53744867DE2169F4B7FD6512C4BC3A639EBFCFC9
5FBA0B1F167FD28A06DE44DB6D606E8DA30868674D6A4D485945A5450653321B
1A86539F9E2C61F0B5508370669E3DD9D1308897363F2256A0A7B5E6753D0AA7
2D28347DEC7F9755E40C7775EDF1B27573BD64E327C2EC2F6105D42718C93834
2E60D1FF04FFE43871A22EACBA03A6E7F086A196CF5623FB479BF98E92AD83AC
1062F358A0CE29AE7E4322C55010355AEA8473DC07BC8C4138BC64A1EE5BAD64
8FB839555DD0522F8F0459465D50E6E034C023B3F3A74316D85D37F44D53F0C0
5AAD1AD1CDE9EDD9B3B4DE391D7DCF7E655FDC0B2112BB6D5065ADCEB6D446E7
5A15D4D9D3240552CFB0DF5CDB00706DF911AE701453B8DA8077B4A92B9D3846
DAC1963107EBB7C59A47E264164C870D96FEA4A0F6F607B3451BA0064632700A
32FDBC7221AC7543D753214BDDFB22D080B0D6878B0FD0D5054BAD082D2B4470
65B36FB9256BDB17540EDA3FE5DACFE8D25EBE0F4F44B1AF74A5C7C907ADF772
D3223F3B1869BCF51A6B479A7B11E9CC54D4DBFD53139F7A9CF778382AB448A7
7580DD4C61034CC691B74E5969C26EF6419C4C1247E472612E4FC06E66E83909
363ABF3198D24A282AB1E1321E6ADBE7FC1C6FE9284B36ABF5DD5912CC1386C6
5A5096719857CC596555CD9EFA0B7512BDCE388A946010C3C08D8CE66534482D
CAAC2D1AA4B0B3D2355505C3D3188288EF28E34DA5BE1A10F8D4C5E5444E66EE
DEB314D597D45C6E71A31894646173F81D1A3475C9152492AC9C33C1B0996667
BDCBCF5A1C591F80EA548A7F2B3923D183A2D58BD5440F125C6C34A8BC6D32ED
808339BF9EF5E07B2EE40734B78AA36035D840977589CFFA6560947FAFDE7F14
02442C9E2B2EDE527C6B890ED69EFC5168DFC43BA4A6B9FCB65A88C0C3B2EE19
0EF493BECCF4D659B5CFA887453127604303F5C937670809AE501B2C8CCC9AF0
4ACF0B25DA48B5FF274A5949BEFBCDE271B73948F568CE739D1D110F8BC51471
CBA76B3B38F05CFA1DB1FED1EBBE84AAF161438C1BF38D9A305266E93D9CB4D4
A22351C221B09D1CC967A535B64B297DD32A4F2AE44890AA3F8A29F664F20A36
C2B4F0EF0F209C2ABB897B74D6B86F26EDFD6C515C63449B5D7AF325A1A157AD
E4CF606AB16B4B7D6BC9ED16B0C6B4B72A15D1535769B782BEC91156A1A801A1
DA342EA72A94D9D770960774D66B229F83D4CD1E5B340C23CEB3CEED229B1017
6D7F545313FFF580C3CBFD814A254B68222B1D4A225834C1488AA2C8EF9A7EA2
6467FE02E98AE7E2EDB788A55F2475D0E423CADA91F6938F3FBA053516AC9039
F488F24E05AF3466046795E6020C30BA669118CE82AB4F8E7D800BFDB23634FC
8944D9F246DB9FE2412FB35420F7D8BAF68612EB668B40487590181528F3A69F
ADC403C1F6B133C713BA519E856CC9C957133E062AC95D47F81E88717B48B3EC
2B360E6C84768A6611A5545D1D8FE8C652B1750B817C75F10C2EFDA3DCD2763E
A5E5AF7B41F7B837F4C5229D5591B940ED9E0CA51739502FBF5EBCF345A563B0
CDDD90AF6A0D07FB50D1331C7E30E487A865E32EED85383CE23DFCCDD961EAC1
F839302B1344D878171411D121430D11E87AA66CD4BE1491399DE6831ACC55F1
8C2ABBFC2749D40F8B686E30F7671BA6CB8F4FB419822F06C85A123EF1C9EEE9
2C85F5CA2167970115E90782C85F470FE429D512D36E3007AF37ABE482F03DFA
F196C68D9A77D674A18E8681C01ADAA6F3843ED44CE11B1AA55DF76622D156D4
127BD08A6911863355E2A1C557766C222407B05CAE3B5CFE187C6B6EB6186B10
9786D03DC403887848B262A198EF61C8D883AC900DAF14C53745D712ED5214B3
CF0BC804AA07BCF2BC4A6650DBE76CD2585F9AC4D9A2785E4CBD6579A9E8DCC6
8323AC5CA23C7DF6ECABC2BBDEE7438CFCBA7BAFB05BBC626D72ECC57E7BCC8B
D7E6B74325342E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.0: CMTI10 003.002
%%Title: CMTI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI10 known{/CMTI10 findfont dup/UniqueID known{dup
/UniqueID get 5000828 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI10 def
/FontBBox {-35 -250 1124 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI10.) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 76 /L put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 107 /k put
dup 110 /n put
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5FD29DA32D34C95E
2AB2ADB3F60EEB0600C8ADE15A2380DE10AC5AAD585FBD13097B1A7E8E210D4A
EE96785449E07F0C8EBC2EC5EFBFD0897DFDC15E5BFAC9584D8DE95C5AB288CD
8AD8B9BEF0B8E5F887B3B0B331542FC8184DCCB753DB6ACEEF98B85756B988DF
CAF1AE0DBE7D37D5F44A2E760AAE3A5197C27B15E32275A64946C3E4D0476FD2
7FDE148C788DD2106F7C825E270588AC05B57E625AB17BDD02306F9E5FC851DC
32A5A6EDC43C770A71419B2C0C8074EF3F222C8A2097CD81A91F333A521B3A09
482A4FE1CB231CE344AD126AA284C3280AAC3AD162CF0EE241BFB4C8F20502FF
118507F5D1B5FD898571015E73E5CF2281085072E00D401F6F59761EEC3E8381
1F26F75DB66C504AB6BABA87D121B1E7040A07AA2FE01F80DBC246CC03C4B2DC
C2A715980C52B7F96BC1A78FCC7F4F52EEED5F705E08FC1E5BBFCAD121FA88AA
8EBE58172C162AF409DBB0728F14923ED02A65EA24E5D52B6AD07777455A70A4
61833D3789C719BA92E901232599767E423D5AD9C807670BE0E7B5CFF8256A20
C7BF7214FFE0342809570F5966A2C43E784F35015D9040BA34FEAB6A6F089504
3A40A9E9D711A2721D3F4998371430FB3C94BFC619559B97D49627BB630F4B70
9D0A8FE4E916235335C3962F3CFDB04C4A3CF714DB5E260F4E66FFF2F27CEF2A
D4AA26BBCAED23B8BDC98F8F453BA27AD7758537561E766B82DC3032E92A9EB0
125D98A22C5466AF069BF72A9BFA052A8628FEC6A6AD0B711DFFEDE3AA2D7CE8
34EA487038EF50F953B8B4471CBA6FC3C53877EC1BC94582B1123EDF44B4056A
30F49394BDE22CDAD7F01951C7013D26979277D18EFA594E8F4F2B5E615187D9
39E842EC28461B9ABA52020A127D2CB9002A673A435B13C10602EEFDBBA6BD49
9DDEAB9E68D655443A5C2492BA061C1391A51592BA8C353A6F6A0708E8860184
2B5D031D2CAB87D618E9F6F7A0BF3F66B3FD5A25BB91F7F1F5F99CFF56EFF4FF
0A35C55658001ED2E97B26C869292F6274D433A5443179DBB8EE987196306348
3F9E87C6422AFFDD30080C9AC4EE7FE5E2DCBFEE4974331F4AAE479FD8806D4D
9C2B85FC69EB0453AD827A1E767E5C484BDFBF5C8D6E2B3C96298B390F22D757
802643A79D5E29CF3AEDF0E12CFBECA4663444FC87F2027571DBA9ECF688BF28
FF0DDB3AEDBA0FB28447CB4B5D5205F40C1E7A525FD7373392EEFFD910AC82D0
98E71660A1B3227C4A2592F3E853CA4CDF64DF19A52582E167234F4036FAAAB9
5446BE102DE2BF43E82F0112C2A20F15A3F92C6571AC761665A905362C4F8BDF
AC8705519C99862CD9C0D75113C4AB5FBB83C880E46B82715B5628890D9103AD
A2329638B95D93C4DECDC5E6C588C9D5183EE6FC28FAF9825F02DCA567306D93
5440987A81B51EE7291107A08F201C609FEF91A8F0587E8B13D4BAF74A5A6815
DE9E4441F46AF8E1DDDFA2D611C889614040B144A5EC064DEE4638C04EAB2E37
4CA8F50FB8C4D65BB296DCCCD39F1F554CFBED96670A91F515CA10EF896874BC
8EF48C6447752C70FF5A06F928DB55586354076773BFF7E94C4C3A7A1C1F421B
A9B4E3936EC26E0C19BBBFC90F021E877F54B62108F6DD1C7F6D5B8E64FC9362
E173F01BF2904B7E5A08B3543611562C2714099DE7D4FA330DB148B560A9601F
42A84452811CE213DCE782A0D7809CFD954D6BC1EBF2BA4D1B18F50FA8174C96
3E0120E266AD5DDB40B3F6798AC28CDC5C3C4BC34583528F5B5DC8A222B80B59
A3A93DC715D061EC6915E6E6E21A25425C25E8747C60F170D61047108826F96F
7830E220C108B441B6EA3198E33C49BAD8D43086E49F5A2BC7958A1A8CD011C4
49045193394696EC3DDD0BE084E8F2E9F0B9496F035C0DEC1CE11409DF566428
D50043CFF5CDD1092F6E0807E660B68163BCA738E8D98FC6EE3F713164CD204C
0BA84FFF4F33F47BC31750B448603D7ADB9AE92FA91AEBBBEC0DCD66980E6955
CEB425ED07115B24E40F53B29B9D840842EAC691B4F591F866DF27556474B485
1C6F53DD72499847109B16C7093984A6B8487D4F3870DD517945CD90E648C1BB
8A6861E540FCF9D75B984B5009B5CC760CBE297042C240DD624111670B703388
6FE6FC0E89C6B4C88F51DFF3913D0CC1FB4770C8CBEADD4B86393605C0B6C468
83CA5594754411B6FC331EF56D7CD6D247FAE42E966583C29239A8F862348D29
60B177984B6B957E733DB4D275015691D91443BBB13C2DA96097A29733CDB284
42F89C85A7A743338C9DD3BBC4EE53F695E5163E6E1ABE5791ABF100B198B9B2
1C21E2FA2FB4AFE7F9BB2D381260CDD3A2CC05BF513AA1E80ED69FA27BC5ED5A
21445BF00BC2F997B356D94AF13736C6D3B0613EB6F4CD96A685FEB672661DCA
206105EDC3CA07900676EB2FAB37F48D2E8207BDE1463894DA3C5B1488AC1EE9
D39DAF691648048F5D7A384B8927F8DA2BE3602669F71D80686E427F395134E7
7ADCC611BA91AD4B7A0237213C60CF2C905359C90795230344FC3C50A22BD44B
55B2044792509F50F5C21F53D9F9E9F063ADBED3AB99E2613B23334FE8DF70B4
6120F2EDF69F50BE793EE145B9FF9C73179DE640FC2ACEB5C6617F918CEEB762
4CD81E665B2E544864D13230B058717B207D3CC5D6647D5343DB4D0356082392
871EFFA896631A7E0D6477942B632074A9A4EF7B09D4701B1639BAAB4E03A40E
9B54A7A4F845CD63F88831EBFA4FB847847CB98F3455CB5957F2E0A0F5623645
DBB5C5564C7F8B117D6E27E65C0F3EA81AE67B4AE4B201E7C4FB0A8364FE53F5
41A7CE8F834C2C4B322809B353A5E63BBA7BF3B7DC1A85EA700BD287C2BD3FC8
2832B0BB4695FC937FF5EF06FCD87DCE6DE793C2B1EE10E6450352C17726155F
220D550B1759E15AB2C1D5968E52C8080CD280E99D3CCC0E80C2EF8BBFD96001
A226FEED7311EFB4B67F424B557A877379A15BCA54780F0CD2CCA00400B9B39D
981C6B552AFD2506D1B23618FA9AE6D8143CD7198A8482CB416CCE62B992347F
337D505A4078713BBD91E5535BD58EF0351EBDCD749CC24D4AD39F8CECD7D6C8
139756680A4C03A58B3374CEC658D30160AE4863A3938A891BB59CBE02BB451B
1BA4B2B6E68AB61DEB85F95E3C909B8B66E220B9F18280161C279F10F7093CDC
100A53D542F071CC0A5AF834DC1D18738F5DD62A5573E884E1FFD22BD810828A
1EA47F8218C15A2E97CBC609927DA3CC2B802EA4A0D7EB57627C135E3B065905
F97597D818A2C5CC6F328AD25AD11FA50F1E4FE637980B7474D6F85A521892FB
72989AABEBE02A2D0EFE88A6F67AC29F5D8DDFEDAAF465C439983C6B84389FF7
A6434462BEB7B07DBE4BBA61ACD4A60C55B5C0AAE527DE381DFECA2E6BAFDC8D
310364ECB42CAFF72BA93C067B2F02D1CA7C34AE7CDC46787A0E234C8BE8A928
7A6F3DDE0338FAD532A9886E8E3525B85DD39364AB03EC4C0DD25DC179CC1989
1BE232E387E857C78332D834679195E10F1E7B87B7966DA3B2238F53D1E13FE2
8F55ED6A92A750C7250C9B91E29796621E7E9520373214D7DA81B2875A986D33
80382AFF6DE1F829F048E57664D9C4ACE91E4684A51023943A4964AB5657D610
3A5405EFD4CFD1EBA684243E15093C9667797BB47617B66054EE02C41FFEC45C
C1BAE8AD56B00D323FCB1D2744F061FA16E161988741A319B1564E04BA210996
4F9F02A3268CABE450D166A763F5284954564A1C86B76544C5F5ACDFE0D758DB
865A1CFCF9FE8CD5F9C3B2998C56468FD52DF8EE60C6935A3D221EAEC7714E3B
301371C7DDA0B03A2416238F2B47BAD3A2C5021C886DF51C695AF9C87A864B48
3BB3FE0B355EED5454B59B25A0D8A1B8CBD356C24F64D9B55E16C30C011365C9
1E0380753BA3EDC0868788D5F50B9353D0227BCEE1BE36998B2622C0759BD66B
E4444250589F9CEDE766D8B940770CB6B89503E925B35C00CBEC2873D2DC4A29
0823FB7A3717B69A7DEDBAAECC067949932728E89BEECAA91DE3AF9BF070B9C0
30EEFA8C0A55C8388CAA2F0515915C98E67FA095BB98967D14B0DCAFA9622E4E
2E0EBFC768D80585ACDF28D8A5C2B6EE2FE7AAF62FFB90F569F84A0903996DF0
C1D5723366C436E4088F3E2BB9B47F9789052A71CF5C49908CDC1DDA194BFB89
14D7E3D7D4D72A150FD6FFD8303E9DE5A97A71B808B8BDF2AE466F31BF5D7A4A
44F81230BBE2B456A221E2F72A8B59F8FEA8D31F8A005A5BD93B9F49CFDC3DCC
CE2B67090460F632271C7157BDC2F05BC2749FD562FC28682A616A52D1B67654
DF78B7843A9EC26A7DE2EB168F874904C2915B97534B2D4D9F74A9573A771D34
9F7BC855E8F794621BF6AD471BCC347E2DF5F620F5C209E33A4CBF1EA85AEA87
4492A77342DD33EF615FF34037D660B713C908786D9022051B825226545827A3
2AD1B05D654DB6E6D261B4E8AF0933AD1F0FCFC7201E1A7C1B4199F160C38676
21ABA2DDF1CEB655B3EC3226E0B122976EEA998F7A5241F062E54AD1DFD6ED26
47C99A439E0AE95415059179867CDD3F0FF751F3141309F40E00A6C7C28433E4
F649BCD5DAA64177580E05C495EE7BCBCC5FBF104DAF360CC2711386655B26F9
D349D887EEB32ADE595241560FD5924A1745A22E6A01DB9C285EF14596EBFF0F
03F36EB2E0A7C3864F819EF7B0855121292D49482F046A55CD7271FE03F02EA5
886864D9D8EC22A68C23089EAEFFF03DED6484D8C341861EF8B6FD3C5BDF5AC8
352DA4E13A1E30D0CB71E090E9CFB9AB2CAFD0CA7C34AE7D8E3B2EB4666834BD
9CCD1AC2108348AFEF6071796F4BB2FFA4A67ED917E76A109FA2DC2A30D744A0
9AE653A748C1D18FB52595D84E87F1C1FB6B2F32667FE203262C66627AEFFED3
92B23861E5EB238BB4EDCE09DAE1C65BAFC198CDD1B45D42CDF93E16BB82D35F
821E9E49067E966AFAB2AB52928F8DD6359984071FC37AA652FB834A09E5BD93
3AFAE161140E74C6531E413E8FBBFC42BFE8A464B71EB1D8CAA93B33D7BCC3B0
47C7EEFCD3E9FCF26FF9441DD9BDE68D77AD7251C06BBB9A2103049E8827CAF0
F26BEF33F656A690235DEEC623CC519AFA82DE2AE16FB99F780FD7D8290DA40B
9B604AEF36B529FD184239E7D50561A07428D28E51B55546590A1AEAD4B7F2B1
AB8C5B9022C1FA03E33F8F409B24911AB8BFCF6EF4A8E415263C789F89063E71
C0910DC20347469380B7FC1EEB87D4CED7F4A361E58B61C91AFCABA35C03F978
B9FB5257C31657EE48504C355CE893FE3C553274C641DBC4004F5D5B879CC5ED
D3F21F867F6DF054127067DE86189F0B59A1B90FDABCDFEE61423609D888EEFD
F4A1367129962110C651D9481CEDDB8C5C2576A59AED64E95F7ED042AEAE2F7E
81AC0C408E593DC30DCAC334EDE9EE27D932B98F040DDCD195D6155607DD2038
970EB78221A94C52BD4F0EAC65F1FC10E5DAA93C17266F351669CAE56F42B68C
6D01E1EA03AE554D63CE76D800FDD9CFD89F80A241EAEFF7EDFA41794EA25CE7
97BD5028464D2CD45B53834B4AEF8BF0B9E7C6ECDEACEC887E8790A47A93F668
A9095E5FA1116A122C0E5B74E2226C654D3187C6CFD8807917820423DA3EC1DE
AA020EEEF2280C44A15209EE2F3FC1776875308CEAD38571E7BF889F287E4594
971A83605E0B4169D4A23EE790515223DF8724054EDAD905F57918FC0BC64F96
514B4BF7DC9BA79E763C22C977FB6146B10D26FEA1BAA7BAF21312F78D1625A7
8E242D743471DB5821408AB786E4A7EA9D35E30E85533C617689F95758FB2C7C
392E759C299DCCE36689686DE0C4DCE32649493650BA194A6208C5EAB670B170
3F2C70BF0EF0E3BE2FB0A79224FF4ECECD6BB3388C6D06867A0E5E3DB93C1B2F
464C23E44D3132E7D4086E3B59B1D13F49EB4772DEDF8EDC4F603217233FB7BE
C13C28648E9AA51D53F11FB896839F97AEDD8834BCA53CB0021AE91FD8E95E2E
F8A094093AF556B9639F508A401542B06821FF9DE1A745FE9AC5CACD5E8E1053
911442FC15CA5333751ABFE2C617D38FA1DC332BFEF44AE569DC631C93EC54D6
261583A695F5A392867A57F59B741EFCD2DCFECBC55D1EA5F2317601C9DFE9ED
D1EA466210FFA905A8F85BD58B98991BEA58DFD1CDED5C9B086D42CCE632DADA
147941917B879139E016B0DDEB8446BA017FC8EE5A354533D667B0835F5D027D
C2D580C16B80B3D05CC92C0465CAE077729F0A15B2DAFC89DCD349B3F81D0516
C65526EB5C10E45A8A85D716EE35FB9AB201FD7C89ADE5AD925A174169DA20FB
61E96C73A143DF964C20589EF24A0FCFE6195317F2FA0D2249C0D8E649C3D9AD
FF13332EA2E4C9CD36D8443EC8F027B61CEF92C6A6B72DD4ACBACC16E429A9A3
F5F29C1631360E32F8C1C93ACB22F810B86D2969A7480F486F62F8488BEEC74C
2C1AF13BB92BC578E8CD30BEA6BC8CB68ED730F54CED0167605FA76AD7B7E88C
7AE7688E598F91C471BD65A542E96D64B1EAF19FB4F1234308C48C2DC86E2193
11ABDB4C6189C6F201627C693691A86DD07FF55C30FDB3F72381E09C6080FD7C
9182762E5001E30F52A216E0B71E4D2D4E2F3B20F95DF3A11FDB2D2B5B5FAA66
C46226D5E0C77066349770514E5675550FAC9394FB27CD2C2F974F1FD58C04A3
1EF53A8AB3B2202CCA1CEFA66228E1480A0709436C44BD3319C40CF888AE4692
5DBBB52B15CF3A518F627F672135A24D5DB9B2EBEF04C860AECF231EBB5A3BF5
6DCCD5E72FE4B6DD29E896691868A7DE4120AD06AC573F5608B8449B38E71CA0
EB5CDA3F942482EA7973661170F81DC88D54DD5B92323F46F833DFA757107E9E
F62A47CC50FAA1B68ED535C3E0E1073532A05ED339C8D70B3B9864808ABACD23
AA95E9FDA43D54C66A675FA074E0A5B8777D3C07850A09087F36852B5351F35D
8BC4DDFCA35CF29CD5E3DE118A741FAC4DED36847F2E2C6CFE08669301722D94
376F540982958074E7F1383C409652F6C99DA39FE90B38221E75BC1ECB93ABF6
B00F410A0C5651DB418566AB350FDA1789AFD88286AF3BCB42B98386F7BC144B
02DEB8940D20A6B3062F0C4244EABC50923390064F1D027A8BACC3DE45156E56
4A942D1B87F1C4A76B0D4D6801AE792CCAE3009BF25368B31B6AD5476FBD3BFF
9759EF463EF5E78E10B7BF64005B2ABE0E8813950A08A1808587A98E0021D0DD
751AD515E8278F1A0759E85D8A084490BBB0F8206484AA36388B1013643D3198
3509078847BDAE08E76FA5BF3E3A73C323CE093DCC148E3C02C2DE1E26C94D5A
40EC8308ECB02FF7DD04EC1005A2A0DC74D4E587F10A3EF349E828F69FD38962
2F0C74D5DAB3ED6CC9F97008ACCE74C086A503948DEF1AAF58FC8BEC703CD360
D32098A56AC776B1BD08442052A2A4EF6C8798F7CDC102AF1A2009657254762A
0793F79A39DCD6ADBAA5EC84A7ED6018BBE727E5D477893D84F157074B24C13E
8D4881C7DF8ADC13EBA0D89745EF93B7616EC5355600BB0D2B630AABA3CF2946
AFFD0B2B724EF0F28393F3C662D4E0B1EE4C53AB462448524181B89747B6BFA7
EA057DDD99CD8A1FE617DDA315C04293F66525C35B1752CBD4CB928BA33D61D0
F1FCC9BDC1EA1778FCDD2A17B7A94197377465E896A0EF8E6BBAEABD93130D33
B63DFA6C31BFB3A1A6ABC96302B04163FCE3091F2FF0E1AF77CCD0321F4F5982
631047678177F41164550EE5A65442F260009449B6284FFF99AC5E8ECAE12389
B1A302E16B7DB5970B85A34EF4DA60248130F81F4EDC871BBF6CCBEF41837230
2FFB9CE1AAC9DFC79FD1C78CB30A2F939E917C5DF836C1C62F7C09A0AB81C8E8
D447D5FF7EA0C31BF599FA98E9FC6346773531445FA23A4A39E988907FB45D69
8F452B7BBF72046547BF4519D1FF13F9CDDFF2DAB3612678BF24A2450F6E99DE
896F7F3E47C6B0D78AD8AACAB446B96DC3801FA8715FC91FFA1B868566A3E5DF
65F790B7D627679909F5CE6D50AFEA724A08F51077748D1F0A951BF74B76495A
A9C0A318B2CF6804B66C3760BB3AD124FF837C7D4C084DF2935BBA8965CF383F
4F4AE6DA98D1611D05E59ED9BE051043428217F4AF4C6D56F6CBFE383E29ACFF
6841A631D8FCD712D9FDCCC6E94970DA681DA58AA558BE6DF35066E1BC3F1D7B
12B234F60899F20EFFA823A8EE2EED26E5A2583C8C7A4D020A8EEC2D80FC67A3
06D160EC32CCB65FE9498216960A09A3876B6D3EDB65BDE529C5E0366E567ABC
A15654BF03B38F6419499B6BCD3BFC8CE815CF8DC0CF6D4C15FC110A14C6B17D
81F07FDDAC9BB599A95E1F1CFD654ADAF5DE725EBF142B5BD63E3099EA179748
26426D2C533DC004D6F4C4C92D6BB43FEDB7C81DC72B42DD991040DF4E03CF60
408BEDA3DF529A995E2CE2872E1D93AE15DCE2969BAAAE092A7FDB9B3BA6BB7A
3CDDCD4ED2E3DFD19A3F417DAFA256E293BE57A429980A9B0776D19074653708
141522AEFA4CFC0784FB2B61772130B9931E01AC46B800028616D61609F020AE
4DF125A5812FC563F60F783A660F7B2B4A9D803BD635C05FC6C422AC0FE9D642
CDD430B4B5245B9E879DAF2515BA6949E952C74E657D0E44FCA5F79BC9084A7D
159BDAFA098838737BF264CC73DA9A15401761353CB6695C4BE1E0F6F82FDAAC
5F5F221014E1759E95FDED195C678410003516193BCB1E8158CE2927B40F8E85
3E0077D489BC0C6BA1BC382D228B065B0F11E2A8D7197B0F7D20C67D3F5E0CE5
FA8335AF4E0188C799C7DAC08D3A78235AD9AA6D138F430E8470A2D7137E9A69
AAB13B8C5C0B2D097230FC6DECADB54BDAD2FD90E92171E48432BBAB94C9AAC7
EF64FEB4F057940AE33CA443D599C07882F20B38D0E173DA613908C205F5A3D2
58C77C98ED17D4D297EC8C302420214AF5A20DF60AA690D5D4A4573B5CA38B52
7FF8D8EE2BE0E4646AF313E90021B03E99A7277B31B054200C90A4B15CCEB790
85BE0B5CB4694BCC210E27B701F16FFAC44FADC4C65E5530CDE1FFD4C3D9FD5E
D23FD9BFBC40A691609F4FAEE4F3238CE29113C5199886C0D3CDCA181FACA969
CA0506C8BE22EA5CFB78E78BA979AFDFF8C1D2CBE1089EEA94467CD8782FF965
5AC22C9588D5B06EE1379724315604F5D70F170AEF39E5A983531AFDCD6A68B4
CEDEE3E08EEB0F4E6436B4D6BBD796A019ACB4B2F537DB6411A896C47BA95E71
2196098D9FD965FC5F9B44032D116A0664FA489C07010A4AF6D28F743B605267
8658F1CA15566A142D0C343EBD76AC78EEE4930A0BE6C8AB74EBFF4F3B40A2F4
8CE623209E3BDB50CE28AED6561EC0E5963370A1DF0EDFA575DE45BAEDA94CCE
C368D8877B0901BA112315A3880E6133E9FAF616F3039ACC84403B0F0ECD38E6
717A1DC7815A31854B17B86DC68521D9A4057E1219F7E411562BAAAC24C5218D
CA6C1B60895C289260E89285ACB3B188AB5DFCD5855C7F6911C3B571D1BCE158
E44A601B34D371D49F02F65292D33D085C22A1F0D6A0C33ECA275C8E1B312E92
E0176A5186C24D3E34FD7032B0BFCF074B95862D8AD48072FB18BE16D53A351A
0F790D72922194FB3F5FA6274D9F624B22F4F08F61E63D83B11CC026D842F682
1279BD211D81CDB26B07BCAFCF3F361A3A72B2FB3B9B97A79B96ED0DE6678740
12CB2C3A76CB3AA4AAD5E84DB722851325C5C031A4DE3FFAC59C8A77218E09D1
AE2FFC135D880204C0A11C4BA0347431495C83B4012BBAF9015E894E31794C57
C9C02F522697308B6EA0D1D5B79A09C45DA1B16437D124481DF8E5CAA3CAAFC7
095399D107A2D076A53762A1B38E29B24EBE9658E3ECB39D18F8238B5E17AB5E
4496C1CCC51570B4799D28358B682C2CA50FE120704CC07D27F349CC03345FE8
8A8BD5E258CD366EFE2E983017CC9CBBD228AA3F3D051648D70200494A7B5326
8D26AFAE16A370BFB590D83391909F92401E6797D5C9C3E8A7DD73959291450B
5E73CFD415E9BBDAF3127E409EDA6B2B3058324E6DFAFFD7020093669C950430
D5D4FE193C25CE1B12BB8CA28AAED49A878C6A65FBC8D3C9CD0D01F2C77E1544
8C4779F45756040B7FD0153428CF3FD1B557535DDDE8CFEA45FF1AC8DD50D58E
0DA44382E644E110101E1FCE16EAC4E8F28E4E68833BA0D64D1D333541FDBB46
B4F59AFACCA3D777A007A89B1CBF3F26B8DBFA9852B869C79CA197E32D2A667F
4D890EDE0BC472634A1A88EC9472CE68C095F5C3A7272DF9E59843CC0AC7DF8A
25A61B77C9B5C0F3344040A6AD77C033B89FA2F013E0095847BCDCA4B196AB1A
93D4B8FB1D83CB86A502A03A64E2F4BF12155483811D7F07A8E9F3E8FE8AE06A
98817AD4CF50CA1D49CEC02B53F1613422F018C1868A900AFFEE71FEAF6CD70F
9510D65356DD84070E1C3D7EE2785F20C44B84C69898E30F004F0FED70E8BBD6
D174FFFD333DF6B4D3604F0B10C8B3214162E70C8DACE480D6BD85E4C3EA5B34
F3AE5165D4DDB5A22379BC3878C634AEA0CD69F55B3EBF07EFC173A7F6209A05
119EA65A4C943379F27F02C25B081837A0BE27357E3DB42598039841DD79FD91
204A0CC3DE92F133A5D84AA320D2F3894483F9FEC9A913725B28DE3AD77F1DD3
974DE25F61562B8C162E2F4C147172110CF937F8B8E8D5E2AE07C91DA532215A
02B871E47D0065B39C5763C9DB76059604E6A85F74CB8F5ED3C6D0FC65195534
5EDA93CDC915B0E033AD9B902D53471EB263E3B54BF85B96BEF8A976AF75FF6A
75236045777C18762AA0B895E323C74EBCE2B747AC68CAD0BC52C454FD5F43B2
57A650A1F1005607078309096AB4DDFD1A5E41706C71D6A040BFE353E73B680A
FBF6E0944A18B33A828D9408E28DC4C1D9C299DEAEE53756F2F97060AF1CDA06
6F16583E31ED67B6E86A5B43310B9628E1285544C1A1DA9F168B773548585280
BCF508AED5F602041732C9CB0307C5DCB13E31F73C911F854FB1F9921A019319
867D8AEF55F68EB23A4F042F3BCC74AB07D6075E33C04C0F8CE9E983C7FDD090
235D14817A731D90E0F191B907798571317936DBE2F91068545FDF87CD88B87F
88998C40559BA15ADB7FEA1CF4A8B23C48E2DC0534D967E2CB1F9CBABBE92905
66C0480F9F996EFF22715604BDB02295EFA62B0B001B0171122DF09D697C99D5
77E5F732CBBB85F151757FA1672DE22F5DC2C39C8119558EDEB52A1E8AEC54AF
155EF47236E6B9BB176D1C118899DC3158E756FB19E83A224C6D435AEC6813B9
60046AB47B406682F6C59E1AA4415F413002A79249F6A12920AEA51C6C37509C
0A37C9C5C75A1B6FE49897D86988DAF5E1EE75926BBF3D092A26031D153F1354
4D6467AE0052362225932C0438C8A782F12F446C9F044CF6B5FA41CDA067AF4A
9358AD1C8E0904132189CE52B183ED9ABB43DA536DBA75B57126374DDDF14EEA
D0EC356C9DDA6B2DACE2C63B2E32005B770402A6112FBA9609DC9B51377A71BF
3FC14C9B2F6114D240C2CA16FC332C06D2FCDFAB0FE60F568AFBE3AA84262C6B
827979C1E5C60A70248AB7A02CD7C4C0B68905786CE5AC8E8E3C34972DB0FCD9
A11078E5F70A16697017402CE21D6D22B965F0AC88C2808D3B683FC2F2662EC5
05FC51DB9342A635883578312A4FFC507EF4BF22CE08721B2F2E4FABDF9A5FD7
74BF92CE7EFC52479BC5D7C99FB2265482D1175300C4ECB512C0540F33D48F6C
004CD2A730342CFE249BEA796389CBD5136E419DB0D63F93DD645D22C0417296
37B8CD506A41EDCE4A92C2B7600CFCF63EF4BCE76503CA73A17F2F221E136A87
1305943D735AA3DA3883E13AA11CB06E3D7A2C72B6449308B83553E3596866BA
4B735D760A0DBA41CF036CB4CF19C06FC6CDE3D1A9843D22A64FE54E8EB14673
44EEA7ED5878F7874FEEFE7C1C88E91ABF0CB759A6764A76E5145AE84234A145
E0F3798D30C78A9671ED437871B0CB4EFAC735B7EE8627640608D8FDBA50A74C
E8429A90C90B305C4BB5A615056701095E23A42BA82208D808F26D352A5764A4
DABB319FA822C36348EC97F9FEF010A44361D7C4F51DB5953CB7D83967B5418A
78CA3D63CCA9DCEFF28CF9A660B4F107344D7258BD329EDD512CD884676287A9
12250E54E73315F9ACEC519CFE04B1A83E3601D884B9F2E214
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27932ADC486BD9CC130D94BBD05
43872FEBA04FB8866ABCB4D379696E73B84BBE98FBC4A16CFF22F8A7AF754624
2912C228030FF7EF23D51DD61BEB5171AD31E2B630475E16B6E0F3C78D44AC30
712D165DB70C0F2C3113D39665EC82F54B085395C8040813F81B7EC39BF53AA8
4F7EE7CA9C2CB80D1E5362863E8A6A7FCCE9CB4AF14D3619C1D072CD01B49DAA
3887C1FCC9EFBCB94A848158CC96D79AFE21AF83F15507D1875B65D58FCAD2B0
4118B80BEF2FBC05785D5EB23C0051085E3CB67584A56A69447FB77BD6AA161B
DDB443E3F3243CD1E1F93293115A7892FFCAB8D8D9AB253E2313080EBCB7C253
88EC39DEAEF9D3F272D55E86C59B6BC1EAD48BB29D0F0AD1A5F0AF0B475ED68D
3193DD5421EAC352519E4A7B2F7249283619E3B30465EACF5AB14E36EE6AE93C
AB91666DBFA4294AA989DA4637BFA743A0877B46AF9D83C9F4DC8F81D97F6E81
A6085ED99B8C00CDED3125EFBF4A2C80BBBF280120FA3691DA631550799EF558
F182FF26E8964AFCC4FF4BC07437DE943967455B1C481F4E1F457BB487FF6613
DE0F9686C87D9DECD736A613160901ACB0104CFDE2E7BB7A6E2A6D3488DE02BE
00B63747DB1E3551F75BB9D91822EC5B7BBB35866F1A966ED6A74ED574309FFC
66ED81163307DC4AE757984A55D333A3CB700B0BDFB62C378A686619FBF738DD
12C130923E53DCA3A6EB5A3F665C5A98F5BA723698E98DDCE973286573F869C6
AFFED59A4718848640940D8E457141FE833953F8169179C359BB874383665B55
7E5BC07E27B5C96698E58CCF377AE56CA6789D6CC18419B03A9D1B3B93E518EF
A673A641E4994397E7B43A77FAB3164CA5F8C206A4E5788CB002EE464432A4D8
E5338851A57355249604B6354973ABEB9B0075EB3E98F73E060E201FA940BAAF
409093B73E210F263DC36D30D4B22300A446652CD7C14D9C09EEE44C674DE696
446562C4940D0F495FBBF6B82066D19A2CAFF8C926920B044541344FC5F8CF89
B439FF8C8003F82A76F8822DC40A8C69845EE97F260A74AD1BCCAD9B4CFF4241
9EEFEB5BDB9D5BA848BE935CAA1202A45CA1E0B56004DBD4E93A6CC9C1A8A5F2
612553307A5E1FE1AA325FA69FF154DF37914E8436BDE4B6AA3CF332B5568846
B520DFD0348A1A9CFCDF6446CF0525E1E8D89C3E6B92A8E41247646D15910DF3
781EB6055597EA6DE3B9AAFA3E29EACC7C0FD12E8688433938D02696F884C215
60E71E1FC3A2F3F99CA65F2F85327A4DD7281063BB7E1E716EC12973F7E5D013
E59E76A7E35FCA1B2703B45B61E4C4E1D9F157BEA0E97B11646907A0C190EBBC
BF095B10F85FB954CDE44F23B939BEE43144B4FA58E30A7D37259E8B49638F7C
227142C716C6237269F4FF67D2A8D68AA1CAC435AEE47F0CAF2AE4FACB29D03A
5EB21A024ED88EFE449B23E54C95E0721352BADB0F3FE2910C3294BF5D26F73F
D72E31110689CDB937F1ED52FE09DEBC0859B905FB4FF4BB34DE56BCB8AD3A0B
07D15102F957B20E266198D5496537495472EFD3FA3DF403B5535C74EA47F4CA
B599BD565888EC27A4B9ECA91E32BD8D1003C0BF68E220B926727621F297B0D6
C19EE24DA3AFB9DB1DCC84E86973D71D6C62635D5D55E31F8CCEECDF0EE16561
35D6A3FC0D7F2DF98FDB2B38EE05B02162BC6639E089F221126563950E7E998B
E75E9A87A72BF739142B70664B86A62CDA0A74DC032C3A420526F9A0BB461B84
AD520BC762B84730A2DCAECFC1D98F80FE5A8B775150BB739C97FCBA87ABA4DF
87AB664728A093A44B8E102A20A8245E5DF7A7CA1BAAC6E65DC068943CBED4B1
00669F2E91E922B6FB4E846547FEA5B8C9BAFE1AB6C45EEE5D448123AD102818
1E05C30AA25E1311F799F7CC9C68E706F007702DB107A8FE26F9A8C4AF26EE4A
7A45D32435B349EBA0EED72E18FAD6CE79676949D3F57A77DD1ED73EC96CD36B
B3F89DEB0D7B8DD0898EB6790CB101285E7E5CB5045BC5039A61072BCCF62493
B0CB7FEAFC9B1E91CA6BC654FD6E1B83D9142BEA00815105A013E2A9A6D3EBF9
431AADDE90D985D35A629A8A8D105CB3332EDEDBA32FD6052D51612EC363BA6C
C42A99097F3494699F9134201E4B95EC203D07B040B9399BA5915BDCE8489E7F
A09A51D58D5FBBAC3D3BBB2B29E1A9A5269F243E2708E926924A0FCEA92CA6C3
663D8AC0A49F8453D88409549CB59356E64F757C167F4F41D3EBB72B4B88C176
45C735E881A3D34FA1FBFB1C177AEDE9AD6FD1DDCF137619D421526B66001A08
CFE6278B554CAA3717CC8DC7ABDCD827B81F0224CD910C5943FF96A60A7898CA
C960CD70B50A2F3240163BB63249664A259F5460667396E58E95938A7A10C187
0F958752A7BC6FD25E1601EA16CCF0528B08D02E39EEE67AF5418C0D7178A29E
6A1E557BC14E327696F4109B207533FBD8E8748D29D34A6CDDCCF090E0176AE5
7F9D2008701EC512200DEE2A4E536001A8CA001C6C7D471C527F4EC95FD9F6BA
33035DF5338529FB08C1D495C8711AEBDAD1853F37E6A4F358D3D29BAE29CF8C
5B352FD4124E421CF379BA3E3DD6A5C6B0CD5C97B2A5EBF63CC4A8AA01983AC7
7B9F854B651D0C945BAEB884FDF298ED7CE5BAB5869D258F62FC07A1B3386F38
A600F0B2877FF148EBE36C180682F361D2819824EE6AE4557B1CE1B531EF641D
9D76776F424E134DBE25B6589A34761AED25D4C04FBCE17786151E280A61A71D
77E32492D4964B593F2DA2DA4EC7FDE5771DA74A71E171A05E46E4B0EBB13367
89CDC155DDF36379673B7F36C90D03794A1BD35DAAED0639734669E80A984465
075E901FCED5EBD9D0D36C04F008963A7331BD7E5CB4E206B7D446C76BD1DDEE
A469BC1C7E3195DA3860E1377DAF5116280A1189FB240A4B605FB7C97225D393
DEF15F50218515FF1616A2314482BCDA3B183872A42ADD8DB4C31B161A28C88F
0565426240B50AC863BF87BE4CAA887BF560F1B020785B2BF6FCB204A68DB630
7A9D8A41F4AB87100F49C9EDBE1E5D157FE2ADA6F4B0A13D6C19E08BFBC298EF
7330F15A72596AF11F707F375C6C57E929105A4AE73577A1E3724D1F765D0228
415D124C41AC5F20AE7FEF7548B9758B206D553A7CEFC59CA4FED3C175B77917
2B0052FC2DE20EEB089E05006408E0E480B75E06463312D48584280E67377924
D90C4DC0E832AA00AEB9DEB6607921551D0BE236EDF1BCF1DDF0EADFDFF8E23B
9AFC199B3C6BE3D175A4F986FFAE26631626845137116433B1B8738F4494D549
B5AA4071855784443BAE636ABB7E190E4CBD123041D4B363C33CE1B04FCE71ED
B4BCC6501D292EA7877A4D5008B48D6B7A36EBCC5B014569ECAC742E11F7DDE7
6812269119872146C7651EA845C131EBAD7236F4B1954FF4D15F57D468F933E6
67888265A100F1285592473DACA20C57E2C91CE7C6DD3EA289C2275865997D50
2A4325EA061B4286EA89D197F7F915B45E775F6AF81F6238F1912FA7ACB98B47
3ECFA5E89E8EE002867AAF0CF8D7A0E4A22EA7D67AFFADD0BAE1FAF77BD5B5EC
C9F7AAEED4F7B1AACC560DAC1FE230AF16004C480BCF356391A9B479CDE17784
7D2C4AADC0756556FC251F53F7FB8168F308918AE41A42FF6FC4E771EF3D12CE
B3C70874A171428513DC0F9A2C38F002D00C24554B61466C917A644EB7CE4432
B36C4A3670C2EA9AE47759276238C9EE3260EAFD1CD95885CFB083279D69B5A9
C088A8D5890155B74E06D9A51759A2FB12AF9526B59CE45370858DA582849C59
65EFE6CB1B46ED555856E1015B7BD5D501BB7145B8500C28BF167CB1BCB3932C
8B22BCBF344FCBD6900BCD959259750B112C8CD0BEEB7EFF80EF055C13F56B3C
BD14C28E11A77A9DAB9E7D7AC8A611F0EC09F061D3488F48BE30E0C4495A1E6C
C7D1FFDC7AF60FDAE24D8D79E0F2DA5C6D6C20381AE3ECAF4989DF2571CB4CA3
0D4F24D3914F09C699469CF0A8142B29A489C88BFD54C00BBA94392CE501DA08
690E668B8A8F2049CA4EBFF0FE9AF3F87B5A4CE66A22E01157956F244F7B4DD2
2E19DD0AFFC0F603F70198CC78D688DB73CB705A3A0596C5CD715EE5B99B8F17
AA17740953692F341ADAF87EB0BDF8EDAAD31772207E6022E9D50B28912D312E
F88B3116C72ECFE0A2929D298BB116D61F9AAA90A64ADC90C91C11BD57CFFDDA
C93FCB9AB4D99C33CE3409B4DBEA5D26791A7C93D4E5924DED1C6462BAFA85D3
1C5122EBB0450B643BB6DB337D265511DDB27EE60E3136D34EDC05F2EA3A4DAF
53F84188F507AF51474CB951F9F0BC94F82A6F671C5301C1B253EC4C4CAD6C4C
A01F63FE38BCA11CE7AF548397B6EED2DC6403042D3AF888731AA64086C1B317
55D822ADC278A30161E26A177C9EC7DD14855EE2BA552D34FD66D821E28C7526
040D6FD16523C40D3E54308213597BA3F10BD4C372D48D1E902B835666B41205
FCB46A502A8539421B5DE531956DE40EA2D5A4728FC4262D12A532F2B5192C65
425B223D30333AD463ABA91C133B0EEE7478F56EB85A8C7067F8C6300AE175FF
F5B87AB75E2B82B37A6CAB3F2AA8A82583F8B31CD7DA9AF7229628BEC0279FDB
9E4A5C91CF77C9089806676802F72BE5816BB90B3F2978386990CB32B6D376FE
5F8C5ADB0DDC43CF5D26CFBE8C66D269C21D5E7D04E631556661D63A8225FF72
4FA086FEFF6EA15FB99F4A15C4ADBAA889C0135565C22E533971E855DE727AEC
1D7BF6B8CF86A7F969FFE8A1462AA168C27816FB5C09C6EF0376BAA9B2F1AA4E
C0846B8A1A6B8F45885B075E3E7225225A6BCB6C1A08345C667DFE845392EC97
4ED77AC93C7399E645CAAE93E122B2F992F2B165A8943CBE908C2F904580C15A
3C202FF56C0957B80FB97E3171D698E907B87E9557179CB387744580665118DE
A609CF8EE797056C3660BB6EB25AF82F2DFC907840D8E46A2E3856CE833FDEE6
B4D69F6CF3EBD7D7898042B9F9BF5B91343564CD39E3E6308311C44073A35CCE
BB8E180370606F3677336E45B0C23CDDDA0803D7350CC090CD43544472F21C0E
256C84AE7C4C4A653C647EFA1EB8419998D511CE035F80177F69B4AC244868E2
9670DD77A76799C8F36CF7C3B6641CF6718BE32CDB4D43AD23D0DDF24540B36F
44CEBF5FD0CB3BB4DFA6599E8F3807EA3FB4421665A7E0DCD0E5500A1E69814A
F204BB6D569ECD925D476AF139648D3527E82AF1014E43B2123936DBF7D6E066
10FEC1592CFC55FD0B20BD4F49E82F588112B8A18ABCB41449E2479CE1FD0026
71A0606DB05376D0F4C99E69EAB4328D85FEB12E367EA11031BCCC6CC575A66A
50FC0FBD47727C165903E52DC706B3E038C3C78F2461E81D3D35818760A3AB8C
65A2F399898760A3F43316A3B3C034F8125FB0E3788C70D598A57F03F3BA0D24
EE71467FE43970808E3F672F4650D996ECA8117187409A5612818E9EE4260DB7
E211529592A02F8948F3D3F314CFE6D37113B57691B626D09C1A5B61A0BD5C5B
4D9FD249F4C51B8FA19A8E9CCB0966E6B7B5166ACF0A6690F1FFBA7C70396761
80EC88AE6F3565ADDD38CCA9BAEA710C0EF670213B24FDA67220656F6B2CE6D9
D7E07D86EC4A0F96BEED1A7A9FA441DB9C2B2B6B5E34FCC72236D9FB9F6566D3
547DDFF4885399DB6892D8C67C81C84903C4BDFA490E9DBA5CB6B1BA072339BC
B38709E7BBD11A86C2B037DF4550D6C7E700DC662537C116042BB8BBCA09132E
77C747AA9E1294C9C3911C4AEC35A0B9A16058FE6DA188BCDAC555F9D845CEA2
FFED173D0D4F4B3AF7555B186597A391F95463E780B567DA9F8C507C6FA098A3
1D232C631065E784D69EEA4B6603E088C43E0D49D21C757E35241CAAE4FAA199
D3E51BCB27032CF4C477E2FD79B53F9A4589BDE1709EA13EBA82D0FD2A175215
13B4EB786612436C52A13E901052BACC31AC80C01999901CEB97284AA465D502
711B7472CBED795860A91DD3678E09CEAD9317957D5C0CDD9A01AE24C91055BA
580F802BA59962181E3DF65BC93374E3451413F94035911A89D50AEC19145216
8A459D725292A246C3F8D1CA58CFBFEF1F01EA81CEFD1A7D2D594EF0CE27C8D2
D2689E54628BB27F43B69052711201360427BDB741A01039AE43E535DF126D69
012E64304279FAD659341C1C9CA6B4DB634120231FE13D2CF3CC0DDD2A032EAD
D1CB1BBE757ADA1ED2E45DD0E37CA1A50C3EDABC5E11D8FDAE69DFC9B9495FCB
55381D10405C55F6EF1757667AC36D07328C331505B26243169344989A4B3B55
2994CA5C6F8A084F7EF5BC311398105C3EABF3ED59F55A75F845E6E278E975ED
8A4E6A3020032AD317640E719E95E294AC40609D96C437B011E073AC3525DA2B
F20C54F5CA645A85B67030404DC4885338F1FDE6AC2455C41DCB11E2B3AD1734
05A0A5F599547374539434D64A122431CDA528997423095D1A9C60D2D9452CDE
4A8BA8DC4200CFA4CE37738082E05B8C068F287C021E5959B00B1B7CDA4C2259
F58476537ABCF2CE206E5B11A799EE07A2853BEC4971DEA09E95FB2776DDE7B2
95630C9EF768F6FB9B6008A145EEF1C73D6D2B7DCEB206769B9CCC9D53BCF554
366A35D24C07C683D7187D478DEC856F732D1DFD79BE9EB8EC89BE5A4DF4AB85
0A2E2604009DBAFB1BE1F37D87ACD226D86B971F9089D02F8EC254F76562794C
D5A45F4DB8179F295AE5F8E04050AD2CD8CA18C8A9F7A89842B6BAD4EDC04961
0A7BB6E30FA21EB03AE1CB434C39D7E4C5974A28B16C2D8009AE7DA374945E0D
B4B5838382ED89DBAD0C5912F3BDBAD04DC0926B6A5EA5EF2F778B53A23C98F9
B314A48BBAFF3FC3B30D6FD9D7D013F8D5E267DCDF437514F449A9F7E7B43BD5
72DF31295BA4018394FF8D4848573060000AEC1DF612585766129F064609C360
E55AFFF47698B8356A90B85616E8825007C54CB2B09970A23D0C07EB51555493
5CB75A55371CE9D2DBF92F7EA0709EFE073540F21408D10632DD2114B039CFBD
8B697E3332F7F07195E8C75E6C046160C9BCF0F9431E82670101E6702A60FBFE
6AAA6104AFC384E30700D9F1C71835B6E6299083A1DAD6812C434920CA2F44F5
BB59E74785FA4EDEEA3372171FD26DC9788F5C3FA3529E61DEF4CDE7D542B21C
2629C3BA8177145646486A414A68678CD3AC42CB28DFF27F2DE00C1B0F6D8400
C5233FFB41DBA69A2E0ACC67104F101CA0CD2B36442B50077BB0109DEF238949
BFB062F1ABD6B10D5FA62DE86270A2CAE731C83CC1E2DC6DBCA301F758A5981C
1CEC6ABD5028171E19E164AAC229407C0089818E3F82468BC6734DFCD3921AA4
57EFEA826A67115C5AEDC7216AC2D3FADFF773D96220A24E819A56861E677FA8
386A830A6EDF091C2B6AC79F85BD117AB4BFBCD1B7218AE98CE80794CA914804
4DFD6CD5C8B5D63ABAA2C66A5E0B6E5D0B073260619F6CD569B2BA9FD4066A67
3C57CF6CA4DBF6343744F3DC70D58A4C6F3B942C40BA077D6C5B34A435389007
280A80CE48721A11209A417216D534D2226B43C18EB73F7BA9E0139CFA6A18F4
09C63926C573D7347C04706BC72D3DD42FE197DAFA27AC6A4A5F95B1E31FF461
2AA58B58DA51174A17D174F5695757A3CE33915D07B17EEECBE3F5466E8B27C2
7BF0371BC559E8CD8A186C5974D9FA6CD8468B900E62E4AF829576652C76172E
EFB83D93D8FEC26F220774EA3D43EA681B136B2BC248801BC3C8B99D15EEB757
9D39D357E419DE7823E51F4A59BC496215211B9C9EC4BC4971F6A47349FB14FF
91DCE23CBC323A7A8EEA5A9497B88D177AC62EB323B9A5BD65A6B8EE996978F2
90426492D5815A1189B18D5A0E02815FC022DC45E94F863AE060C1533AF95C5B
CFA334732D2CA023BC4C13919241D77E3215F7447766153C3B895D24AD1B3A86
DD8865DB9AAFD108E67DF61C65EB138172B834FC7F8D8289395CECFAF427F067
68E8C4C603129C3468646419F9AE2573406111BB7DB934237D88A9ABD524C078
B5A7A72F8FA3184055C6990A387A0AAD06CB6D7FDCFA92CDFD511B59ED33F784
E5AA204230BBF81C6786BEBE43DBB81F90F663995A1CBFECC2E5A26D9D2D04FD
051256AED6FA21D477CB2DD0E08C5BB23B8710217E779B92D2CCCB4F6E7B5B6B
3B617402FEDEBAEC669E9102D37EA6ABA227D04ECB0BEFB7F24C55EAF228CFFE
1F78284CDB1AA09B4D8450D48A1081D9C38138A0A6AB05B355D2A786D9017018
65125FFC27811AF56505168C368F7DE962F1E52C40C04689DCBED8404E037E25
458423CDC937CF2291AC4CE317CA97822110576B3BC263484034C10C51347D75
2D65A7B48AD96BBAA3138F22B70889F06A28F801F015D4CB2BD5A8FB824A492D
CF7EAD0B15FC02AC1B7C339C1F5BDAEBE9F7D852B7BC802B1915F2923EDED6DE
7021EC37333B55F04492F6DBCD02513AB9F5D03A73769FB87AECC2AEE58D6053
B66995D0DE74185C5CB2EE41539FBD4E70340D22093B1FD5B1ED86522CBDD38E
F0776A20766E870D359DEB0627D1A8D8CBB212174029928BDE915643C227BC14
8EC48F2ED37B60C7293CF362A4EDD967656BA0B88C21932F5EC544C7849FC9FA
8A00EC518768D304F0AF850BE1AD53889E2F68903B773C47C4C48E57999AA756
2775CD2F0DA2AF8380801A346D40034341FD16175DB15A18BE96FD4933F81A1E
D9009A3407BF4520D5B2DE90DC3E4DBE769BC82109C151704D34565C674D30CC
619242D6D96C9F710E6BDEA2D762737E279F4A01A89AC610D84BFA1E6A3FF6E6
33516AADBA44248F9A0246D4A5EF82D27AC66A2FCA24FD7906125E5EDFE0AE51
31120F02AB45D24FB06E4EBF70E5B8D5ACAE2FD7D7C22F03B05719D33B624416
15B5D4DE97F92173DFE3EFEFF84CA7C1EF5C583BC171FDADDD2F8D42F9E0BD0E
BE39B059CCD89252CCA592C6CF2941AEA1ED14611B38DCF36A72910953442DC9
CD4680E48497EE0FA0166BDA6D5931BED3B1422B696F6EAB93BEA07784156FE1
D0F139B84696304079D28DFB8D42EB8B82E62BD3E994A5A8A75FDEA7857C139B
D4C11E714370386F9DA8CF4239BF8840AEBC50B4462BD873FD251C156F425987
145C6B4F8635F232DAB1BBCABC54B005902EC9FBDBF8B59008F41BDA82E2403C
414521E04AB89B980CA03AC5F6CDEEF024BCB375D333E909FAAE808E2A817D53
279594F61E3DDDAE4E73FDC519162522F17702D8E8D822655D9DFBAD0827B841
5BE71B0E242856FAA96F61D0D3F696EB7A68A0948CE7C28505015DA7B9D5BC48
C480C25B44EE1938CD69CE8C5B4270F6A9C9FEDD2277DA1DC23F32545B185DD1
244531EA9635C40D94EF86926BFCED9B9DA7CAB22248F4B474F362BF57A1C333
D734203A7E21A075B298475AEE682D82C502CA55CE02C45AC5DA18F8F7E7214C
6161B0D8232F040C9B29D53A02A4F69CB191E2F8FCFFD1EEE5E15AE035BB668D
A852B17586F28A6DD9EC1CAB0B63B6FE6DACF6781CC85014AB6D27861FC61C18
AE7E8B695C115412939EEAE65BA6CA6866085273FF7682AEA64132684CA8F923
537617BF923DCD6BF9CA47D327CA41E4C7F62788A9023492F03D5AEA0B40CA2E
6113E992D2BEEC62D4F57B44D786FE6FF3A4AE810AB8654F40E85F10B0047463
DCB9A55107C404900AF8F04206E7482EFE8DF1F80B83E9B2E699B725A6F27360
614712AF0D803A7FBFF939699F799E7ADE84A3D565704AAB49B5F779F2BDCFA1
03866C384A966CA4ED0A3F4307F140AE70CD6DD9EDE480DFBA6EDF7DA68B1430
1A3CFB5DD0CE3287578D38D56ECBF88A2CEBEDD0CDA0B6481586196E126F82D6
369BBA2B53F06A5743ABA70FD179EF07DBD8B93E6E4A008C74C0035ADA5B153F
C2B46524B773AE07D88790C719FE73EDD447AA64AE84A78501A240DE1A17E907
292C70B1CB7353B8BFFFF5F6F1ED50DBEA222CED601EDC2739F0B40FB04FF6CB
44A60C897398CCF5F1A4A331936E1363D875A2716F55A5BAE5DCC85F090428CF
EE76C4E131CFBEF01BDF98DF4FCC2B20C2DBD5A1228E77952B639FAD075E2B94
E927732C9C680A4FD1E0783F3801B0987126F6CDA4FE1709600FB9220A9C3B69
7DEDA3A81DC124470B76FBD16177FB0FD1DAC8D903EB6991318EC52F6D2A6F2C
6111577361DB643742516844262CBC5E120D42D1E3F2D19A18278E5EDF908DAC
1E0AFFB8DC5655A10EA30A0198CC09881DB89395F342478DC64ED1D60C7AE101
4B4FB69CE94988E8155A74D42C97A3AF6E2B3C9B88A904F3145E84D01E1E54EB
4C85B639B460484A706694A3079D56BDC08C461C94352D9D71CD807699A78F0A
6C07D2C6826D7497BA50EC7D9903ED4DB059A0372476302F59D9BDCC8ED96207
79921667D339FF9C229950801D8709837564B5F7B7F0FF11C5C3ADD6F453F683
E686CED83AB62DD64764041BDEF79EED2F42E0636DBA57126DDF24CA67C3C545
24733A6F0E797C19BC3871F2A6A26BEA2ED29ED7C8D832E7AF56B9F5287E463D
9B305C7F712EB2A8170B014E897265F2F32278632AB431D5E0536DBB84187F97
AE93F2C97FBF7B0E8A2AE4E0FC826AFA72CCB9AFF87355CBFC101F455DFEE656
0BA62E156FDC0DF47A11CE1268D822D4D28855BF5A1B529DCDB5FBF7896D7CF5
08F620CDE37A50ADD816EC9D78130C1240636EDC24D7E35DA2D14B848B57EB94
7D6BD15462EAF705993EA37E0CA2732B7AF38D1A69581EFB7E9BBAB14188B07B
6CDB95E97355D0B4035446E3228409B1A604BF3FCF938077B4C985B4445AEECF
C5DC88ADB39F5E89531943F96E5791DD14C4E3601E946E8E01CBD56AB7BC6E04
2E12DB89EB4AF0C977DB5BB4E2A2DB2330A8AFC929552668A7458DB9AE98E111
A6B64DC9B57371EAE3BB905A0D584BE6B91E3C8BA415C7D09CA53879895B86BA
7A04153E5751315206836549A9D5290A0515D22CD9146546222C19DECED0C95F
516315DD6E895B3A531F80000C01B032B101D6E8DE41190A8B1EE2C5FEB5E64C
C0EEC0450D6D5349292EB1B65B187E63A4C2A2D90AF72F04FE8C0901C09C09C3
582C4013454DA2E01EF704F31CB3F709103B983234AA02F7CB78E98EA3146092
5162786F6CF8B1E045B49B53484D7B20A5FAF845CB5A7926014B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 65 /A put
dup 68 /D put
dup 73 /I put
dup 79 /O put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0AB25B56BCA5D899F1575E61ADF75676
F48EE26C054AD9A75FD88A3E17498AC26FD4DC8000A125D6DD423540B8A98779
B28CE97C9CAFAC45693FF43249E4B559E7F19FB349F94B60AAAAF05B5FBF244E
982B4B51D997DA5811CD43E1917DA885DD96133A5CE1A290DBBFD88AF285A879
D3136C41C839FD2276760A7B4F21F4026AADCDAB3F113FCCCA9588C7FB72643E
AB8F6D8AEAD1DC3DCA6E436B3DF24E7DC6AD37137B49327871EA80F3B8AEE932
D20D9A5B4779DFFAD7B3E5D447023D6433575F8F5AF589D7E094DA3786555D0C
046A427ADF128E00AC7B458D5A131A130D6F49A7ABF47833791F172D69FE6393
EAE0E90E7FF7BC2333D4E0215D5201E4B209591782F8A664335F67B9DDE36DBA
793EC77E5EB405862D14EAB6A99218B3F66F11EA2F345629C402BD8FD9CA0AC8
FB5A2E119DAA9F80083C9BC54F4586C44320993CB5D9CBDC8F8522001F82A16C
E307F175B794F4426E5D273581A6D2844444D82093FB03482B270D693391DEA7
CB26D4A418E48A2989167B7DCE251F0D53D5C9B29D359A568FEDB965DF31CBF3
900392FE739A2B43BFA2363CA74FA72668FC761D1A17B9C0B56D6172499CDDCC
90EA538A5526FD5AFF81D04BFEA703E5DA963B11042723106704021C1B90557C
B7AA96E076842E2C5F929FDA6D05E0B91B5548006EB4A6EB262077411083C2EE
D51D0D237A85D6480DA41A9D8DC24EAEC0C849E0D53D9FE1E54ECD82C957B8B9
ED68D7B29A43F369C28272083B7B4E700546D293DEDAC7E74EEC946B4412B0B2
0639AB78E79402C787F50C4F78991DBC12D73F5B371BBA2CD9535EEF0550084F
40A4B2C4D178C0C001E63E08DAF15D064426F6F24C49E02AF5417D18BB7997D1
46CD6476615EE2F496EF2D2E5A6DE68ACABAEC2033F9F3689D9F8CA23483C81F
8E9CC42B7AF2BC3FA80B68FD37E3B87FC27AEB7AF6D2DFF9B4B7A60D26292AB2
36461A349D3BEFAAB8918729204873D7793A647387156252B5A1B975639E02C8
9715F8B4853B592ED9E467BA41B32363ED0D7557EA0AFB8EB093B4CB1FB3CCD9
3369A67A60448575C7CE305DE7C1B59DC21DB0132F2B67B7B31EA068C5942DBD
7D1BE9CBA33107AA60AD033EA5B3618B83BEBA01BC0DB592BB9B82D69AA1D690
954DD77B0CC9B824007A7F1A4471A861F64C9FB4E235084327EC024E40A9EEF6
BDB4FA8371D3C4FEA5ABAD50E992F9C8B30F95BDE6795C6AFFF4C00C1E197DD4
10D5F1996E9BB66724E0CCD5F930F3B3F5C994D3214A2D0851F039E95FCB1F06
64C84E8D514660A5434A2AD96A53C0EADF3FAA50FE5B58E93F2E2D3DDB352228
EAE762E2E5F3F0D68E346ABCBC147491A0EB8BAE82C9F14E9F3B744B51D94C27
73BA052B475D09EB09469D2BB86F7BC232B844A7C6134BF0DEF1E84FC08DEC39
D507B7E8BD7F2A2D702659F02E5AF8CEBFBE4CF6E8DCB3E415B42D110061907C
6DCA1676C889DEDE8BE8FA21BB9E5CF8DBBB15E2CF2657A2CBD51A828AFF6D63
2592EAEF5EF11EF57E29953254FA16D7AA03EBFE3C76C97F952DC8ABDC32E848
67FDE6F40B8EF9BE18CB89C24A65BD957E03E597F5E0AC14D1C5CA1FEECDCF7A
51B23E606DD42EC10145EBBB5A732772CB805AA9A096D01B35B92C18AAD01478
1434C3D468EC7606637CE15CD83EED16717A38CF9C88CB71E42FCC75E63F283F
1424743DCACC0B4CEDDF122A4AA0753F951A63AFB753A6A3C4DFF9BA53B2C6F3
4650E1D53121EFF893D6315C69652F91CEF4F18F55C5C304D5FE7645EEB76983
5286B370413EE329553FE07A7A3AF2D2461479D489B8F6CEAB333ECD0BA549CB
EAD686CD63AAD6B2F6AAA6861741C9900C4729B4D91C2065477024B42BC972B8
1AE5D7937BA288E6F7F5EF5CCD877408B57AA4D8980E5892C1A2F0D275488BD6
D2A5863A7D645472E49931F5C44F4E3D2AD710BAB4E8321F182B6BD670B9BE03
50BAB2DDA1814B058ABCF1154AE76D75393A665BC35F1EDFC3E3F6B68A476774
840B79505CC192915F19BFD04AE79246673B0800054A500F1A9BACE4A5153799
3839A07010C3DBEA2A7553865DE2B927673D9DE38DDCFF16BA47D10BB4E67A06
45DC66CD18EE7DBE26B871F48144954ABF89914652466C0C42F1B8FF2DF66064
EDAD49C7B92FCCEAA739C04BD649053FD29384329537601424814F2BCF083E8B
3B41ECDBAE898BFF4662CBB9FAF45840C18C647FBC4AB1C1868BBEBC00AF6444
F6FF65EC934079D8AE05BDB17A0DA8741069FD46E847C7E8D4905084C826AC90
D646AC1CBBA7BDD35F637D616C7003024B08E526D00C074064AA534A2AF512C1
F2BC5BEE9F21801517D86BDDDEE4231FA5F99FD382973C7EDD6C42B1AC643413
AD20A1E701E0FCE0CC1F9C0464406B7A1AE8627EE4D0F3E4EF7005FAA7AF982F
439413484A63B2B1A3822A150B0250F50E8CDE235C22F467218A278C0BCC57F0
8B8B109526FF86F3C88AC7CEE9F877F49F6B790863AC070B2AEE76512E8B4160
979400268E6B90AA8EF1F5AB6E3DE782AD95A684B219DC4A8E1AC2FF5C5A9F40
68FF3B8773848FB9178994E186660B5E09415511DF968A46A9CDC5A35624D4D3
E43B94240BF8178A66A28644105038841988ED3FE369C3256B10D6B9C3A06DEE
3F9F81EB709F0E34406DAB7700025358AFDDB542C3AE29362C779ADB87E7E421
3AECCEA316CDE8A62DC7C1F7714A95D8F9346FD98D5E459684DE6AB10D25FE0C
F685B6724744D95CC59ABD62694A5DD0BDB90C908C403E25E563FB38152BDFF4
532F7AC1A207DD736CE267B40E21CC100C86B935792BA1DBDDC0F65287E653EC
FEB3945E0C232B1B4DB390965187E2D91BA27FAF9AB7A519B90750952E53E9B9
A49E495FF32FA28C8E1CF35AAFF4F73B9EFEADE7A5C208CF1CEE59A30E3ADFC5
B0F2825BC54EA5B18471E3DD6A64B411D86EC802A177FD433287CD0A5FC97C0B
7760514DA588AE128906F7C735DBAAA4A1306E834F5B85E59B0BBD7C1D0DBED1
19567EA7C799E0F0A868FDEDC298DF2EC770E0F8A4BE2D8886D208C73AC5FAFA
AB4ADCBDA2660513829F5442235FC0FD6B6A10D7D5EFF8F06490D4D96A35D40B
FF79F133D4B1D06D891655D006138CEA62A3C83DCAAE5B6CEB2B2A3C2A5085BB
0E87DFD0B90AC4B63F8C714DD0B43D864F549344B3D2D311C782B0D332572B68
70C1B6E7AF8E11BAB7AA577D3928BBCD442ACF33DBCBC4101D4D4D525D65208C
19C2D6FC3E05F91696F0D8AE4D0637C44035ADC6BDEDECE8037337C94754251C
05DAF9936B5BEB867F240D92DC33855501EC63C676638140F9EF7A02B92E75A5
97785BBED4857290DC194DC5368C977D4BEBCE7AAD6ABCEB874D8071ABD4C2A8
29B751078551D349F269C24ED4E260ACD0562573597210A1728D0742EC26BF11
F977F0A82869341D66DF7E4BBE80618AE6B86D9812B7DCD557FB92419B66F380
E30C865DC98E53B30FC4E51D0C7138D32D57AD28AE3B0A5D4BA4A68C8F9467EA
D47506D2F6B52758195045B7AD97711CF73D6D620A6B5E57E8ADCDFC35AFF791
4E46394EFBA59CF1FF1483C3A65A8A5BF486FFA3FB8494B2A3A3EC359128AC66
E642B93FBB1CA825BB8C4128DE1004717E552754ED55AA49D316055F12C81A53
B359609D5510FB9F5941FFD4B9283059083F5E07E64B564772418218AD32B92D
A711077C5EC2B951B2462ADB0AB40687AE00FEF32A24F83A2305E7E5DD65B081
2E1CB66CC23B285058ACC703C7E09FF4249FC893D2911D4C07527F8A299BB218
B500C700651AFFD63FB2824680100D909834B0799689EBA18A2B4A4CDE0BC444
154B18279E5D74474F0C142C27CD5A064D6BD655AE57C452BE7715373E6DF8A7
E720223E16484001BB08E0ED330B70DAC5326C15E14EC87303D3E6E0DA99CB27
54A13122D02066FD4A97F1E71D5CD2EAAB33D3A3FA8C25864D426CC272714DC0
B68D2CD2F5C6CA081B504F311F4C6A7C2AA3A3F99E9E98A3C3189FC9D918EA21
B4829AC6A8C1A0D3A7F413434A05D5FA1004C1665278BB08209A5C97B4A1D89E
6A76FF932A246F3243F05CF932EC0A365198B34585E420B995F3981BA2241DEA
ADCA4EE0D9B9F547DBDE036DD428466593E48EAC9B5A2577AC1D4C7D112D2BDB
61EF4CF73F2210C0F1BA6124918A64E00AF8F726C291A217E33196056BC687F8
496168DA443C55C8BE173F959C366891D4319A5DD6C11FB549F3D444AC4335ED
FC4051985E5A6C511D521185BEA453C0E5B375E363AF352DD9F61C1292586B2F
303161B0F9FB85381BEEFA54EB6145D2249CB5474819A1B4AC8C20CA0DFE71BC
F0362FE07A153DB15E354943D93B6D0B36ECC19C3E7BA61449AF1B54F0DDEF41
34EE69919595DAC3CAF86B26312D1A7E81EEB4D34EF99AD642B7388115DF239F
F883AC012290B0BF11E8D58EE3D345CAE45A75DD10562AA628F0317EBDDE04EE
FFB6B7D550ECE00057F7C862F5BF7A57D4C23D6778F1973A6D1185BC7781D259
BA3E101491ED99D8F14E445A101A47C5BD63BC31A8A9E382E60D751AB2B56476
07BA3D6A4AD1929F6FEB426CBFF7B6871C8AB2799AB83CC5682E9DC0D53304E1
F3C45D66A5DBCF2BCD9DFB19941719C8C3D793A476FB4EEE68ED8C37618422A8
40009D0682CAF5DB28C1B7921061480B6CF4F2C948E8B850AFBE2F70D01612A5
FAF1C8652286CFEFCD582F5418449EAA36683BBB5E802BB89506552FA1E0C5AA
AEEDB86A0779E1932B942E8FCFEC95D2970A1CC4146AA463766D4E98F0EF0B25
207E60EC6CA8239A183F39991A8E4BC32CBCFEC62D0AD1243FA96087656AE4C3
3793CA5E4C1F4734254A543606E2BDD14B94B946AA5ABA5E62F16CA4AAD9BFFA
F57CDCCBA9378192C14EE56711EB28E16E44CFFACD754AFC2044F72A23918290
C09815E6CB6F110FB53E5DF64EE7C62537F081C1AF7DECCBFF952160C895D908
70A9BC669F051F1D6DCB8FE10ABD33E90C52D6177C8EF311FADDA5DB805C0111
7DC1194A40802FDD5212FD2082CD68CE178044631AC8AC1DA96E32BD7B8B9746
1FA6BDF0909DDDB19E172CBB000065D5193D331CE8ED409CC35E6D5291AF9C19
607EF6E46488F58F0836E7C70D3AC58AB26FB73B4B87F01D7790101029EBC1BA
97D3627E2D37D68CC75807E74497B6037B77420615E9C6EBC3331FD0E244B078
2334495301A3106B8A604B19D028C7DE39DEB5DD316C624A887D993F886C4F3C
91B78608767DA00E564E67CBE1B7FDD1F40502E7A2490273465F29339E7B8E93
0500C0527C518E6DD30ABA7FBD54C26803CF94AE070DD96DC9A73A1576AF205B
D3F62377BC06775217B3428DC127CBC13D346DED4E5C410A999435A20784D4E5
424824DD8E02DCF636F5F8073741B70BF6CD89E92E924B9C3576BA0440F73516
09C3DF8C1E89855AE3203A4D1C75090BC1FEB5E7A91CC07372CF3F6D3EBD168C
A778DEB0BC626267B49B9111D6CCEBE7047F55E297A03C009ABD601161B566C1
FBB77EEF4217C1400B0AFB2834B89FF97537D8B97A08829A2A6655EE88A956C6
DBD67CE52A07A5EE6CC8439446AF333242F3A9E0F0956C183DC57D64ADCDAB25
7898D1438FCF4B1A083999B37FBB7AEAC830682C5FE68DD9A042A8F2FA72FA10
8A77FC3949FB5A2D03CD6C802D8DFF78126B9EC25509A5C08A3823CEB4BDCCCA
00CFFD25C37DADA9B3CDE318F9F1A279EF025A736360A99801B000393D24A83E
3EBCB032672B26CDE299D9AFE3AEFE5CAB000DB8D62204B3DC061B2BCEB8CA8C
E1740227A7AAA495B1CC7ADE105F040FDDDE3F5F4056B481E5D03B2529442F75
8577A43C1BC872AAAF049B812A82C52D5030F175B4C773441B8CE90A1DE21AF1
2C1240C5CC471FDF443AE6204A96A388E34E0D9F0A1DCA97A325F8545DCE39F5
BDB91BF95694680E20B515134C83D28EC3852846F45C2C0CD5BE1DC4F92FBD6F
4CFE46B14DCB5B844C9DB1078BD906AFB2CC8999EE931AD9289FA3F4A61AADA6
55792B086A59D55DD91BF20A2E408BD539F93CF71BD9CBB29E514659D4FC97FB
CE5E494DDF3B37A378C0D3F052649EC3C907744487BE46EDA38332D6354790D6
4615DB5EF144E2245ABC7B984B439076AFBB78A196B0357A5064330EB2B78A75
D29CD9A1F272246C04DEB0D4819131A9E4899E79E0BE57CDC1E6702322FAFE7A
DE74A89EAA9FFA3F7D31D983A2DE61A9B83BA676BF7FF7152762C6402FA897BD
4DEAAF55D2ABAC4527D3B9F15AC77710EEA2F1D2F4353A11E5DAF08C9BFB3384
0A6E7902CF51A9640A8A2E57FB28C553F6F6A952A8A19EC094F51E4CB5E0D6FC
D0EF2B3C3BB8F3D0996753646F34FAC5455D2A9627F5321EC6EFAC58AAD09689
2E419A0032CF8350286AB84AB000152FDA82489A21461F800967A3D496C2C401
36A8EEBE27590ED1ACB46E353BE0453D634000F92D87B333AD93EE8C34CB3AFC
FCF697DCC8804A7B91637DB7F8F9D8A6D5CCD314AD11A806F2C89C6A0A852710
BEAC2BD504EDE287602F1E531982DF666B5ECB3BD31D566B44ED5F02DB700A32
A5EDC361BEC9516A3E7749811859548ACD4D14CF80804491E7CEF8C8B79EBCE0
C421FD1AFC46AD1A95A814C9AD0807E039821BD727BD63BD24168B19130873A6
063857D7749FF669653CBEE7069363ABD9F73010C9EB087357C59450F1DB4362
E931CDF172526F377C1AF5F7EDC8E5E17D3E33A40F0E3A3AED41E9C6D792FF83
0C0D60CF84E6609E8397C2DA3E0F98E96C4E7AE5D350EA085BA51A2839C0809B
CE3116B2472FA06D1A4F4A14FCF53D288A0B45F6FFA24A4144A471392B7CE158
5548D47721288F15B0EDE83A5549BA58BD881F151FC9F7EA97FC80D43964E3D0
6DF9A6D21459F4BAC9A39032E36CF93B241FBD7F8FAEE0E99F50D8DB1BBAE284
735DBC4DF015B16BBF263F5101EDFC4C0AADBB95EB29E93DDD800110DCD4C200
984DFFD97C21A534C81D6A3E01DD993F7DDED2BC42EA7D30993EC47D5120FF3C
56DC68E47F7FB6331B660DC347EE272BC662CA2BA39E86442F03865FB06F1548
193B44D1FDE72F5C9A483418AC045CF6BC30B94A11434EB932292ABCAFC66168
FFEF4B98A5EF2BC620A0988AF679B3E5C609EC8596E9B987188285626FA28560
486D7E7832DA8FE8848BA6470F20C461CBE8999F7DC8DB2261BFE4EC78C658FA
090C339E36F04BD4663CA185C6EE2CDEA92C4BE150F3BA80FDBEB318FB7B4B73
7D40875B371534A77E7C23CA7ACC6C24EC91896CCE0209A12C051A4F47630514
821451E73BBABE2DBDAAF93DE9B0FC88F3C2D5F92F5B4C3D5A30744C3FC6033A
9C6D10DD94B862EC6FB820024C378A87CFE7506BC7DA8CC957BB166A8AB76F45
C2BE49815079BD21031BDBAB9BC5DF36990005F8F0FDE35ADED87F0AB64B1A64
80662F362E636DA8BF28CED930AB4B07C4DFA433AD4CA0568DB008771AFEC2E8
18B010491CD848DD3A5AB90E886C7AA639854326BD431372AF43FBDB1BC56A9C
AB59B6D066092D4E8F5734511CB8CF44E40537AB4CB2CC4462A1C4A700888587
5C956C08721F012217A6714AD8C4FE7F4CA37F524E67DBB1C6EBF44265101AB3
93FE4002DB3FFDBDCD185F44766905600405312630962F32328022B90E8D184E
B4EDB0F14C5372A6E9637F5BAFD4A088BB5CB35120D68409B08569E475F7835E
824D91A24D5F351F35C8D0B3AF6072AA239FC6F814E44260BD6282607E22526F
AC97B5D4B73BED3ACD130C2C05C362FC4125C39971565C61910F879E718AA83C
EFD8E51FD2101119BA81A63069F8F6DD827F0D0436139CA753F745FF7321C310
85A2222F1855A37DE93D9832693F5087EEDBE9693CAD6A24EEFF0432AE9C8B34
2A8DBA2E17C19C9270562E84D4A8E93358C20CC7BE35FD1453FE363623785692
AE1308C2196B20B047020D0C064E85C9B8302DA62311B48B8E3DFBB7A5BBD5B5
6D32B90E02CC42BB18E14C1DE97426A96FF63ADEB1777B4B87C3C93D867A34EA
5FB54BA549109A87428F4E34C632689E1F487CA60BD97B427B8DD1A5A399E75B
EEA5BC408D513BDA99A7546C2CD7DEFC27B180F4CC6DC09BA1817D8FA6E9C2C6
6B6BDE9A28F584A50F0733AB3264B5EDC280B82BD7129D92E46C5FA828C16758
6BB52FE6566F4969DFAE8999B4B1D08D7B813F7B65D7B0589FDDA26C6B311573
EBD4AE3E48712F2A29F01CFA664144AA3CCBA8F459B12CEA3C4E6728EB4C77F5
5CD9688AD76B25BCE8EC93A13DEDA132DA62475C74095BE440DD0FE8C8C20811
B25305277566BB6B41FD25CC38FAE5B64AAE1243F02F5B138A44B5E321AEB5DA
C9D1AD810037479D98DB64315FA907D3319123E54F74FDE3FB8204B06375408C
FF6E0CBA8BCB2BB36F8F51805C2E270FF8F3F66C27ACF8C1551A6F4EE0A0602B
538CE8D4B378298125945D5FA4B105F0B8556D0C68164EDE0A0E429B54FEB2FA
74567E3E752F6CB5AF8FFBF32A5232C01C9AB7631B32125828AEC58249A05C83
D990EA3CA76E96D2F305C91129B36F13418CADB2DD48E8C0D7C176F5B1C28E23
5D06F576BC590AAB724ABC050473E0C01BBDD0E78BE9CEB6E2CB1850FA16DA12
0990034D14E14415DE62797D9136EC3A70F00C560D7C58F19BC07BCEB837CF16
0B951DE24C63B839B1D19F9C6670667118A0AAF8C545AF2D4B4585CDFDF72799
F483699F605F295954A6483232E43C426FD4571F5AB5A6A98074278DED9D8E38
19F2AABF22D6186D96B850D6FF61144FCABD9735C1264C6B29E3AE24326AEA17
116A23FDE6080B10524FE39DC06A026E3F0C9DDEDCEA012095C4ABE7A0593917
6855AA36435BBCBAA2165DC6797FCB0FC4757D656433465BBA9E7BD416193B4E
BB1586E374E26A9F01853E90743CC658F51FC3C004B49B9E900CC9ACB4CB6C56
6444F41E0A37951CF0C36472031FE1CC2A02B013161043566015D76F2CC8C7C7
FA6054D0485C9A67D67D6DAEA89A4D2EEF3B0021C5309FE4479FAA99231CC004
35C171D6142759575C6F793A355AA4520898E9DCF34AF137A1369BCE1DEF869E
631076F22CF6D71B0CD670F66D3BE8A4621B6B43D23849715DBEF546F1E37466
DD664E551358860FCBA50711CB3243B8DE96608C8B6C82724817824924C9BFF2
551090BD6151DBC098C8B68BEE4A5209861179AED58C2B26D49F5299627E1222
6A9806B0BF8C2AF0F65BF4DD56C2568FF39C11D3E9A812D73D75CE71476A8CFF
3B9FB98EE0133F262D0587248D1C634D6C828FA34DB4F4E1C04703EBF12D904C
9E8290B22C4549C93CF7624D43B16C0ADE10AF4E5DA8F2A874BED59C506B6CAB
2D71B0B660501A73C6A106F198A8E9A8C99DF2E63E1D44B918EC70D13B8C8E49
788741623A7A469A2EC72D5C8938DDB711D0DBFDE9420571A2A756DDDD9C8651
5D540D331B6AFF026EA16E156BA2452ED564DCEA0C24CD9325321754E66A3E53
B5A59225E98A29BFAE21C4A1FC04CBCC89D90B41F141B19F4C07187813F29A8B
4D2F16BB6EB0746A64DC64491CA26583820745C98481A516199322DCBC8E6F8A
B6459439E9472A1B4389CE1C723901AEE32F2D0670F147240A1EEA8B67EF5ECA
A54BD90BBD4607A231C1D231CF5763BFA25CCDA0D61818B264670AB59D9F21CA
0DA7791B2C0E7C1E657CCAD81818C5261078BCE88130F132E862938F62912781
2E0233656D3BD066CA59D4FB2E128E2B02FBE5A1D59DF3AD37AE396A4A6AD27E
59107F8664808A58FAB0A0C169B0E1D10AD9E4D12F6E837E6D5BD1DEF8021963
9DC59C9036B0D1E2821FB78FFE064E6F0FC827E41448EAE2E83C9CFFA14CE39B
E85B3EDA66A3F185C8608DA534609CDD82B2C4A4BD2A064CCD32B5870A3038A4
E475B8D83F6BAC8641529F427E7AFCCF04DCBD53735794D64F6F915D83A79C64
AE2E560DFF76D9493B1DB6AB5D60DA369DB011914E69AF0399716220C3F440DD
7FFD9C819F74A3549EA02656F01EA8E1D38710F12EB59A8C62AD96CB45B0C1A0
CF1FF7EDCC75AF25592EB754AA2BC6B5BA04248825226426927582ECAFDF141B
8584BAB53E9AF182EE0E4B39734100A7A8C5A96C213CFDBAF0E593137FDF2044
DF6F425A2FE24A1DD0A78E5B59C488D535E50B6D496E702274E9FB2A5B21FC51
4AAF53E10FFBAEEE47FE4632BA459F0DA464320B7D07EF6F43DCE5167202224E
791EFE62A2C9C4E7AD2AE6E09BCAF47BB7A57B745906227D5273538863892037
5918E9071CC69DBC9B016A30414A31EF9A4BEBA66F71ACEE6B224D15B001ADA8
AD1124864598EBB6D62CAD0A14371E960BA80A69543488F14F032164141B69D1
2D7DD0DC487C8C003DF0F507128667234D230A9DB6E0E5958198144D28C62C71
46B70C2339C83FEB16D89E53110285ECD0C562A5523E7EB45B58C8BFEF3ECA90
815C146A6CDD79AA801856CA6D1296CA1A23EF36CD4247B16B09D1F4A8155D07
89E8A31787436B474D047F79AB4C319790CC70BA07DB05E219ED0044ED0557A1
D1E2AEFDB193813AC44C0AA68ED95AC5E2603AEFC7E0DAA816DB8461A1502AE8
4F0F9AFC0888D4B5284ECD9C6A3F1FC6BF77955943D1319565D859C60A821D3F
23A3E5460F284429C0738CFEBF9D9D7B6C5CE940D22824110B0C1D075E55150B
494AF2C6CECE6FC2571B6BE25AC88F48AFEAD6F626AD7E01FEA49437A7CDA095
B39E7FA772BF27FD0278D3DAD2180E9636B5D35749C537B905FA16608EBB4124
2C79068757EFD29C06414FB6585A675E733C58C8C98D1A560BE707FFC02DAD75
F84852D431BAF32E04FC161E9D3571AE5F9EAA60DE1725EA3388610C131EE087
CD6F1C13CE9169FF20D6916B48D5EBBFE93CEF14DB62457F01DD9275D02ED268
E6F8424A649791882483D69691ECE3F8ED98CA95FFDF78FB9947C946D92371C4
01C1D5D502661291AD4CF60A6D4BFABEB9D88C71883319A920008D5C235C83F9
9774B353D480E74DFA666F5215512CBD2300
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E2995196097015E0C4F622C4356B6B
F41DBAFD797A4B9D7AC22332C552043EF98913D0D9B50CA6B7CDAF903BC5C04F
D20A952BA5CC35B646ACD0A287C956B98C450051AF6AAF79DF37F8954473F8F6
652BF03AE2AE82B99D820CF93F5FC0BA17EBD7AF90313E70594EB5C354023BFA
07912408F1757319C7288E99872B907D5AB583B082EEED8AB079C63E38B07D11
6744856E689A479CB3A8BC081F33CB06755926204981DC0A45B3ACC18F6865BB
EE2C50DB43B62E3630FC1D9B1FFB3BFFAA6D0A20C0381ADF48E4D916BEE85BA2
BB40F538F55C11D50F882B73913840B45161262BC8B0012694C3EF26452F9B77
2CD7C7AD6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F1E10DDB693AFE84
246AB18279A2B24E5B50A2FF6337B7B1039FFDD4B00ED3667B5F2F7BC2786D2F
525A0E82234B30711AA835EAEAC2E404915FC7EC0081B194765032708B5E11CE
EF6868298CD26E5B9EF345BFA3EC2911E2B96A0B40AEAB95BDCCEE38F5EC170D
3BFB792D2DDA7E57BD2FB7669484EF9322A1BEE009594901095DE2BA9A15A0EE
4DD77404CEF16EA6C31FC04A8FBDEF27B9FC1AD3264388B0B12D8E476305B912
30B51624D4605C45B514473F327DC3EE8BA69032A95301CF714F225A92C253D0
D943C80B9CD0524C5B87A8D052D2E47A9725EF869D3B89097CC13CA9BC695FF8
A9468004450A76A13B7EE78A03CC18917EC44036C2DD237344E594569B8F2DDB
21F7619180B8C760741961CCBE54FD6DD07C4CF73B346099234A1EFFEFC88574
6324E4232BA18A38EC9F0B780C298877EF0AF42C1EBC2EB52DB64A1E1E352503
36AA29953A073B864FCB31BA938A4163D000A159ED4D345331FA1EB4009CFF67
1D107BABA6AAA48075C6C50BC7683929EC146594E55B01D4F5B582328284068B
2AB05CE92EEE1DF4557DFC8FEF287CB7F961F4F1828EA48B0ACF5C63E1EEC8FB
6A0EFF132268B7DDF7B465D4A21B05993F4A4CFD168A700D04A7303BC2C00391
392C3FF97E770E6FAFFFE501242B20B4F7B6C17331C64BDBA3E59695E176CC79
E7632AC6D2E920AA048BD1EBCF9909D8C314D2EF3CFC5CF88D8570BAA814D467
96D86CF4415C5B739FA6FE7B4C228F06268D28EE33381982E7B005C26D2604B3
AA363CA4732B9BB0E4D4EE50556D777258A7BC232087C9F00B0D5EF70270B40D
3071E14E4E5AB5AF1C686C5A7C268D36A0787DC9300D4CFA004F89A73FFEF780
E6BBC957E31B764159C3ADF752E6E1A6C3B5B855F8A483497A347B601E3C8DE0
362D76B715916113CBD2D3765197074104C7E17B87670CDD5C227A1467BD678A
BE442F196034B02132850CCB77143C2873447FDB8767C462C63916D9D4A13198
B7910E1B274B27644DFB2E8372C8CD55E6E2AA5CA952A079E1E638992316A2DE
C84AAFBD92F033B33EF2BB8A4796B06A7495686545D11C0E99DB92988762E658
5B31D758685D10C2BF46D44EC8836B9FC33A70C50FBFAEF60D478D68983EB006
896E6616DEAF9807C23208ED4C039D515D767D44083E38BD7E8696D363ACEC5C
7B9EAD898B77FE83EB160ECB4DDAC282C68500194FF7CDEC599CB6069CFA2C99
17F00E7676DA3426665A73D5F329F33A68B26A2B905FB8E0602BEBAA0836227D
F52169EB06CB78C1A58AF3AF8944A0E355F989A6D77DE5CE2EC91C36EEE43CB4
1512FC78FA567C195C5BAEBD19B8FD6A9FB4369A20C0DDDDF3EFAB051C35DCE7
E096437250C43D322255B1F3C392FD8E6EFC40A927FBE3B91CD0BBCED74EB5CD
A71FBF496804D53CEC7C42236EAE8BBE9937F9C2D7C0794179665324D266CD2D
F15E9CC37D12AC06A83535115200C6D6D23C294FC688FDC0A7679AA53EEFC9E1
4889D360E62FAFECFE7C1FD1B9949BE88E7306E4DCA49805DDF3EF2060C244A2
213C97B628A21067C2A6D69BC619F7BFA790DEE60CCEA18F596C2A638DFA3A2A
0E4088072A3C9E36431B3916715507FAC1A256207D14A1E013338CA388A3A5B6
8CAE874DF96FD989CF9A31986847ED1891C88524DDC180CA57915FB1994154F2
81345E8350B8F483C8FA5DE70A50453E6A4C7B7F667C6A0062752920D0F3C6D0
CCF6B1B6BCF9AE13C3B43A71EC5E222469B25486AC71014AF1E0B153BAC4BC90
4083F4BF0F87BE35F7A76A4FA33B6E9F6DC579FED706E90B2E752137BCEE1CA3
65A3080E47FBD491626CD973FCEB3EB90E9F5EFB31DFBAB52094FDD4FD1E7432
92136B228D3A164A0A1FAEC2997DB02A3B7CA3B5D2C0A4127A05A875DDACA3FF
ADB7BE87446FAD6548D0F2F71951D5E8A4A7C3C21E322AE64C490E73975A72DA
34C808E07B7FAB28418C5D520A679A02C699A1BDBEAF62F00E36C5740166077E
FD41A10B04A6B12BFF555C353704D018A5FC49FAB667C0C644186CD55A3A7EAE
CA32CCE498361675D2B472AFE616B01EC044731B6DB80077C9B74BB9DCA1CF6C
F6F2A931EE3C743961F66596F99B310834A0C6D52CFE2CD2F83CB160C170298E
901DD520E72F365DD4876DAB21FEF2C0BDE44558ED898A4B67731DC4A90AA18C
162BD9BB26137253311CFC9FCCB48DABF9AF85D58C1CF47D441C8A689D4089C6
B147D972B3E4622B548B4F0E0AB5EB81AACA707204213C055635E2B1AA7515CC
39606B297D3C8BAF3BC9C0D15F283A59C77F7364BB75AE2008879BD0D21F990B
90ECDBA58B3F240C9B5727BD240BBCE94315760461A102B120CBE08D7F586D94
0F5D69978D3D7F84F66D353E344BDB668BC3FAA4A117A55B66ADF5E792F4C529
6AB4CF487FC29101F8D2E827C9D797FC63ABB9AE33CE4D934B9550C69DBE7886
D7ED3F23836BEC9D419528B283E03EA0A45E475FBA36D436D42CE04C7B29B6B8
38BDD88EC7CCEAA4D28DDB3D6608AC14F12F7D242B1D26964330C817A3937983
D4E6FD5BB812C4D33E88367435D83987FAED863BCF88F60EB7177E9F8BD19115
3B6288428B7A4C80916BFC01B9A06BCAF5B5FE48A7E6E0077A97AABFDD2FDA1B
E1138C61BAA39B0E0C6B874F696F3ECA394C284107F37B19E5275AEC1B270323
5A276F90B7025D2E35ECC22F1CE10AA34DF00F86FCCA06B75EE113EE71E5B4B1
9CF973D5A934129EA92525A7658E148731B64D7FE07AEAB1F2D0C9BF38A2E627
7819608D94417C4E4828B7551F712EB58760441A20C0DDDDF3EFAB051F59F232
04B3A36C555F2853FFC1C6616BD0BAFC4DC53C0F88E09EE604E93F3DBCDD3965
393963FBBED86F93E511D181A42B64A8416AF39F3DB247A10D7A2BADA49696C4
65F470978CEE166334B9919AD6EDB4D35BEC93729D362EF1C61068D2F56C399C
7A681EE0386306E2372D313B72ACC0658E69A52A6C4AA4B2D922DD7FB5C5BC6F
1F118A9D3A80BB4AEE64A7448953292FB1DFA426E752C197FE10C2AFE3DDDF04
A4D7B4A3275248BD58BD4F6C806FBA895D3148C0D44DB13FC7623589A7B1AC6A
E3D5E4B896D55B67838F1E5848E0D9321EDB63029FAB0E756271DDCEC982205B
9F1A4F8D68D6847A8BB9EB523CFDB347EA173F4F904F3CBD602FD42293201ACA
0CC6944287FB74FC58F854571C77ACDF6A60F780925A9118B2FAFF333AC7321E
5B46D424C4C0B986630894FD77E3E150439D42F68AD60B27AC3972BCABAB0615
7D4FF79706131ABE2C48D77E256D0990B9B4B2B38659E5ECE5F23D716A990246
49C941D59CFA44DE8149DA2F55F3FD7D015443F66865BEE65172ACD5C2F51786
9E598D819D905DA0323EC2D622B5FAD1F9A57C065104D636EDAA40C89E0F9119
FAC6A3957E84AB91F769E0425E6B527C4EAE417FE471E65A0D75130931205645
33AA83F37FD4D440C7BB17B4779282769B4DEF9D3400BDF686D5DF78B60F0686
F7B20E630FDCE505FAC094D13E37DCE929871922575245D78C3F897885D97E42
7E1061D73F63507C7B057EDD4280D406BC22FBFF404E5A1318F12E614A6CDABF
A02088877ADC8239BD0E2E76DA2868B5E11EB99A4999A7BC784E9865B00EE8B4
9B918E886049F1F49395C25CDF2435C05DEBCF002CAE98C388BCC9A61B5DCFC1
1507187886B69AC0CB05B832EF6B937115BF2BF9335E12647C8B7B342EA14B0C
75E8E5D875C642CFF36D22505EC7C1DEB87C1443B036257E2772ADA2CE2CD139
C92ECE5FC2B400B7B62981E3A1B0E8164C56FC21C3FA1F371DC668B75723B69F
0294D27652FB2888A8021517424772C66839A8F5B32571B3F188BC184FA3BE18
46209DBC00AA36DCD0CAB8DBC620E7A7502FBC06155E1989144431F91A6A12E6
F2C72E24392DB520C6053337F5D104E0BF0C91997862933CBC85906B77C5B1DC
F92439A3AEFCF125F437EAF5FD6DCF3B572E96BF71A6CC3C8A3F64B111FD2AAA
3ADFDCD7EBDD49721BCC11926EBB5DFDCD63933267F0032C96DD0EDD9E1D5054
717CCAAF6D21DAD44A5FFF03959033FCD255AE1A59643044E28E299BDB56C8A0
33D20D4CD01885C20C8D1559D4C8D19A6B519F8C9560EE343E23657CCD1D1B0C
499FCB8CD67A60CB1126845EE4C7FF49F8DD753A0B0132AFB6E60BBF9F2E821F
93709A9FFCA436C487418DE57D19865DBE6FD7FD991EAED23E0C76BDFBEAB14B
D563B164D82C639024F2610EC365EC6816CC9174AABF8FC766431EECA10758CF
9F5CFB1B3156064CEEC693C16B08DD6531D374766075BA04259A6265E351AB93
E574EF58E856FE5EBE3C8095A19415FB2FDCC84CF8DBBE924D0DA8D8EA2256CF
0A9DB7EECE81259D35AA0847B7E95B9613A8043199F65C069BF6CBB802D9F36B
E58E514D98050A0AB48C460A34586C527404AEB41DAFEC490B57111100ACFB70
E5297401C1E972EA9EB05542D0CC25DE30634367C7088C1849C803F348570167
FA3DB083E363450FE15EBC6A695647D3974CCF627D08B3501AAFAA2902AEA31F
761169CFFBDD0FE04C1F81D2E286C2C26F37D33E383F16D58DDA3CC35A97481E
A05B571EAB29628726EA94128DC8378597A1260BC439E07D909546BA4907FEBA
3E81D2FF0E6C9693079F4ED75A4B3B615CD40E8B0FBE0658166A903C044CDC19
9E3F81650DF556BAB272D05B1788AA39EAA34044B406A8F7ED3A39FCDC00BE53
FBF9CE572A49DA60FB42185366924FB86ECCEB9C6825EE80A9338843CEC50515
A8A685D05CB07B3945235B6A54BCA5447015F5A1D879925CCA9C3CB43E8FF9C3
EEAC1548E8E29658261A8CB222F15C70FD91701B1BC43F44DA98248C5728EE1D
D5BCF487503222CB108F6BA0142C9251E3EC10840DE80376DD66492B6BECCB3B
B2830999ADA83F31A6192BD089AD6500686195B3D031CBEFBA5BE1F043F38CB3
E2F60FEE6D4ED0D903026D4D63FC168B51487065EDA6AB834B3F26BABA89AB63
F7479181E91084520F671B978FC38381802474D785B08144D1AEE436AF513E22
9A1A7FBC8F7E3D089681D214D5E38E8034EE9F5F2911F45738A28432D88FF922
015CECAC429132EABC34447378D184AE70C57EE448A4EFE8E7DF93EE24822C9D
66F3B9CDF34BCEC3FB22FFDB7FF057FB1BB7279528C7D6324E5D029E9E4F6AA4
624FCCFA7D83A0B2C52DE4655E0808192FD490C7E3A79D0FE6F87E032A69B0D3
8ADF81206799766CD90C2498DE5F65B5D9B0996059B6A264A6F55F3B57D357DF
DEE111591F3170A083439148A456405A6BDE16F58D202FBEE8BC57869DC6F706
AE0B26CC1F82E86C18B7202A88115E3BD1000BF4447F9F1C0B529D636F24E1D8
604736215D4D716D1E3BF0139666486D9AF6BEEEFBC51185EFD7440618686E62
9A5796463916E64C0AE8F717B8A8A26BADF4C8DBFAC4F65CF3BF41933EE666AA
9B87E9E1F2ACB29E3F14A6D9380FF2F3918828A5BB68C35E0177A833FF88226A
B6AAA1D10688BCC4C7F827FB9D172E3B22108D82E506F332AB9BCD94F746374D
53BE7C7324143093BC34BE3DB233E11E27F356AA9E61877B66CD0DF79C971D2F
3E8E8D8DE2FF9BEBD10A06748F48905B8BDA3D192FEA79C937E0BB4FFCC71BE2
376BBAF7868EA28759DE30C59ECE2D8FB85B3B873011767651F7981E2EE85FB4
2A1CCA3035DA8033E4361BCD5CD703C871F6D326E0AC4F76C36705D9930D1484
47B9F2B90A3259E2F941727ADE54C8AA51502F22845886F8564D0F3225F0A3DB
2C234C9BEE76D4E26B11F874B6576E943AD32E161E1DDF8320D4EFB0866F336D
5C5368E519DF68A35FC66A99867B83DACDA1C59EC16C12F66A04AC9EC854BEB1
548BBE8CDF0D0858A9E7560704FC2818875DFF3F725E686FFE16E7104AC9BE60
A8508030EEE4802D7E0D17ED114A38C35C152BB35A4590D6B0ADC700D318D883
F54315611AC7BE523129F53EF91094D31C2AE65D9C751BE12108A90148A08000
ED0BD2921DB78031B947AE9D03C2B66135183278A1C1B30C9B0CC1D86B957FEC
D41F998D58F20C60CFCB486B7BD69F31CFB5619E845731B6EC14E455D9C5191C
A3E52CF1BF258221B5D57C11305F5239B191F6334B8462F14EADF39208A95C12
0C4480FA49D36757DA295F9604E25AC17FF147E5F01A276C94347B16D9DE74F9
F09E39F42ACFC03968B079FF27A1A8991F4A15F757DB17F84E00F380D6D83741
6D3E85CD0DFFE721F02B6728C7507A69866BBF26A9FEAC4C48C8DF7E29E707EC
F3C2E89EAF5936F9A72C954D9ACADB6CC60BCDBDB49D30DA707E5CC9148B3A5B
E6B6B7E6C0C19D972306FD7C721BBB584A6AB77669897D68E486A1ECC9AB5F25
2B9E3F5CD022536D420A64045C3D67CCC1FBFD52789A0568318B10C2DDEF52B4
AB5A787684953B8252C375ADFCCF823C657EA3BC1FEAF64B7911A52B32B1D8BC
1833D1B818D93E43BF428FC3E91EC6A40BA93760D7E23F298838F1787016390C
7F0A4C8EE55C4FE72A671F87E0872B9FA9393A85305385D81CFD92F388CB9979
53B888B4D9BE1E715C0C577DD732248931178473AF42AE511E63D83817806E2D
1CB3FD6735DB81101BC0F75CEFDF864DE1F1C073FE6EF928240C25077621C9E5
6C4224D11F4D96244EB28B101F0628C4E778C0961BADED7D21106343A49BAE85
B4358EBA4CC56A28107D2818D8072004BB28699B9028C7BBED09DA71110F3742
5F25F53C2DE729F1FA5FD1CD4EF2A14A0393B8E9D22150378F0E24B0AF1919C4
F3EE314DE5BEEB0D6E88AF2F5016F4B355A1A1F88B5F28A11878DC48EF9EBCF0
0D6F205415C83F3223DF313A32A8A088025C637EB8AF4C8386B2F206F593C00F
B22FA4E8109B89A6C6195332A0D0E20A6E81B2A65AAB7C013602D74D537B04F0
8819589FCB22E246DB377B9F92B863D055994229719227098753FD98816588DE
2577AE04E6267301F36CDEC321F076DFA9DB26EEA314ECC116AACE6B72F50FB1
BFA1C886878D65A6EDC34B78FC8DCCB958097D284D25B269401B28AFB6870DBA
ABDB8A536BD15EFCDA2DABB717657A3B4CBCAA9969EA1D11EF17B40015666BBF
494835AABD3768481E65167207785AA64117321AA0168E05D39CB8E44A065CE6
A68E78C8B48A765B84CEBF4CE4751E1AF2E04EBA22063212D292936C8C688597
34B232A72F44A5D93F24B8A89A0AAE2C3FA6F52A2CB094445F794BF09CA7D65E
B3EFCA849EB3B05E52B21AED3BFB2F1F4858B0E57BF2088B26962398EC6952D0
E0A93AF7DE0AC9FDE2DA4301F9D395303F4B6F223F65AD95C24FFC0E5FF430C8
556DAB67B16BB414FBF7C233FECFDD44BA3DB40EF0FFC7E8765611F0C58AFA4B
7EDA3BFB7599B02E5AA4A022CC537847335A1AC626979284CB96F954F3EF95F6
2B93986175F6ED7895A415282C55CB4E065C65F5B7787B724ED863E11E9B5F34
CF8FEE941A4D590102AC6B86D3458D139F725A70F760DF12DA572C32B0191B3C
A43D84A5202CEDDC8ACCDF04B6354D7B6F57DAD9E6ABD6F9263085B40DF9FC8A
B4B5BC82919F6221E938BD6A36F4664A3DE943D2F13357ECB8746F4FB5131307
4803A0DBE6D3A9448BE61FA737311C7A095942F8EB49D7143C2043C5C330DA06
6805A59ED1773AE21D7A0C300A5FF66C09031752C5508DDE9629C6F9E6929F62
CB4C7655F1545256252B6D2F8CF407322B632E65BFFA388B71C6A0732A1855A3
EBC2360DB44C2378811A6E1ABDFBDACB4482722FA01BEAB8A12EA6D6B59A26EF
06AC73A7237CE2727A1F863FA4DA80000C23EBC26683BD27435362050ECB9A7C
3A149F332ACFFFAAE02B1A477B1C96A4A3241F59CC5449E1B7CCD7B347F37917
F0234860580E758860E1A6F8B6B832E51A8A9B4FFDA8FF5C5A205264D3C517D7
A2D2679724C110FE55C182BD137BB108015AE957BD99F846A846BEE68C721603
1E439383A0C41D9CE74A59C404B2C309C1A282A266429AE1E1843F3FBD947BA5
D7CE092990DF1A7E529CBC35CF5C380D49BFB4B3540FE72436B7BD7FBD829CA0
295861BB24D4461B04777676140B32E4F27A5DB3BDC93B9E026C876B95AC6ACE
8E4F9B870DFF077E79ADECD882C4CEFC28878ED46B836374850DA159B537A449
2223060AB71009008D9E2DCBA16BC503D40B0E926A6A00A41C63A5D6D29DC0EE
29BF909E132F98B1E0D36A96BC5D0598F1640A8D67C28A0A66A9476E49637774
B57A26A8B78E231A6A26A9AE6B8A4A436EB85ECABEC3CEB8C15BD97334E79E47
0A33E8E95696E8C5DC554B94F435EA4B8E2B8F18D52E59106AA79F0F472F93E2
47E29C679EF02E5B6588F5F1B8E8706CD6FC54CB4FE05A251AE170D2F0485761
5616061EF3CA8DC28D89F47C2CE195066C6F0E477BBF3CBBBF3CBF00C4F0F0DF
A8CBEA741F503A93B6DD5B0D557D4E65793FF7F46A0273AA5D0A2683CD1A185D
374D966458F81583F48DBC8CA167014BC439265535230B51AE5D166BE0FF54A8
405456288099D34B95BB430DA51C9452A46C5DA88A77CA51A172D5539D55F416
2709FE872F662FC475BA406332B8580D6E8452B55FF72ED472FC9E06949D6FD5
26FE23B97F42BE73D2BCBF26A8D00389094075B6EFC7A328CFE839D0862D3B52
A44E2A0B8D50CB57BB4E65A83C6EBF95DA53E424B54F824C1AE76A2CCF552D86
6C8808464852B58733A80B68B57043B4CE2EA164B1FA7A35668DB472134F23E4
0595275860CA3647D285F3848BB9FDB1B5A79365F8E367F2EA2EEB1B691EB0ED
6A84963A9902DAFE40F100B6A70932FEA76DACF765246663EFDD9D5439CEC198
17B8E83C67AABFEA142E0EBACE363AD2978CB6E48C7CE5CA98112627598846C6
95993DB2C5D234B078390AF11E48EA09CA149DDC20142CC7ABD2A03A21A5E88F
35F9EE316B7E183AD9B32DD964EDE14492C7CE1A998E84525EB1A9D1BD6EF25A
28F6B8E5FF6A4B958B699A14BC349FF60B26D9812CCED033C8F1C9788AA4FAD1
12A61EAC2B0DC18FA5D90F0D31640E3CF72640248FDE1252ED6B19A97CC52501
EC92BA1987D99DEA8F164091E22B4F6EB4F11F798F995E96304A669A07684B73
C112F6A3FE7CA8037C8635F70D25E98911F855B6B9FA7A7110F61747A9482EDA
E0350ED89C800F48D33809A2BB6DFA41F9650400D9E0D73EBF4588D2587C722E
F5F8B8B4509EAA15C767C7306D924EBD45A0809A7F7C0089818E3F8210B524F9
CA763B7128AECC42F2F84F1D23714C458E8033646A520CF69F25CEB8C3C66C3D
493156301A8EB727D81154E7133AB944E938041774039E0228D3E757DCED76D2
952943833A52BD063127B037369E1CCA3D7E5435E0A74D6780C1F23EC5903FD3
7AAF00FF59E46B0DD7CF42D0E6A4E0F26449E7E411BD1D7DDF386C3E2E659FF6
6929C52EC35B3499F41491B6D33F27CF04CCDEEAA16C87C0C7C49C49E951B5AF
FE3D1006E550D8FD1430CD8319C71112EEF14A0AA0FD3F9D6B82B00F1D6D753C
7C232068FE63DABDE58E65A1DA410D602CC011E5D26190A301285F118860AA37
837E2DB1892D48D166747CD6AA1AD0DBD7A7FFAA4F1ECF54BF25B888B8C64950
A42F6626A6E7CFC8ED7DB4030746944F8A251398AEE5384C7A61946FCEBE8CCC
A2C6AFA39F324C5F0678C8C88A19F91410C0260D97EE6E24DB150CD9B8BEC8C3
E86DA094119CCA4AB716503588E4779E2ABC92CCF955ED3DB8F377A2E3E2FE69
CCDD23EB9F4CD5710BA35104860A712BDBD7AB8F6CCFC29D88572812256C0D1B
6A8F205864F22EFED60EDD46F8E717C5DF28361032F041B4A2B6AA6C8020BD6A
31322D1B1B062DEBA66C3B669A2408DE018AE01D67B15E344163E4ECD65D3DE3
D0BA9B5C3ED05DA5F76FC724559C2209EA8941E8BEBADF17D63F5128DD8DD0D5
AA88E26905C54C038B56707A70FFDB7AF810745B2D13D3E1937E6975F74CC9C6
DF60B5C35B9501F5722478AD32F7C9E93C0E8C02E20ED526FC859FF3AABE25FA
319840AEFB73F6233980634F8CD44721D3104E68FDEBA6D4FD3A042BA8D62D5F
BDF23C806EF84C8213ECF4B92E2A05E927905B3194DC1A97241B63570E39A524
0B10B7803F43DD5D6B0581A0D33C2C64E55EF3E84B56F263F4B491F653CDC09D
E74BA7FDFC81DB4C407927A17BFCBBD1FDC9AC6ED41A904CA0DB19EA0A8FADCE
5A79B4A624AD926D0C4684873B1EECE2A3C56AA8CDDB583F0F322933B358042B
66EA73490807C851FD4B0D34F781F4D5D4102B997B6146A90432E4679FA77DCC
CE4BCB4059936AFC3F8AC0569731853AB414337F671EDC68A2C01C909DA31EE0
7E01ECD456844211C4A995EDF467FE041C1D23D4BC52BACD75B94B14C7A2BE11
23EFF528F8C0DAF3874D65EA1B53DFF5ECD3CE3940B6597D755AE0DCF0830C02
BEA26D56D69EE6697FFF8991A39ABD7C3A99BC1CEA2869BE43C281504A2F1EB4
C97F6166749B923E3B1964BF64C8C908D3A55A84E76A904EEEF7D9FBCBB66BA2
263931D6E85E592FE380B6501821AFF3D75DEA4EE8C43E1A61A9C5BC28C28A78
C09EF2F50BF8C9DFE2003147AE5261B67514B57BBA752DEBB7D3CA9E717E9764
7832A09A1CBC8B66794A500787046DC2F0A9C59A801F09FBFC74D5A93433C728
485E1FFD5A21D25453B2B54A972B358304B553CE224FFA6FC519FF2CCE9B01FD
DBBA29FC00EDD69B4D91F3CD6858E608967F7BA570C6298FEF352FC59DEBF934
6E82A5BD7918682F6F0A563C26455CEDF3A95F665A36C94A89906F19A2FF27AC
F4BA4EBC1B592F6982D8751877AF7F1D0BD59EC70A370A34BC91B7D4B96C1961
F056840A88453EA495187E32B97E065E50FF4B26348A0C7A0FFF2190DC0F5C30
634FE4BCC979494876079540176C949B2EE16F5318487D3181A3B4B98B1BC022
29DD55382DFECEFA78C11A9131F41199C6B56DB858AA13992E516453EC5F7B85
6C2A830364474842B8BFEDF08A574C9DC1496C29535743E20519BA044A869FA4
3BB3C1915529B84B8F7D83AF61D72215CBAC5D33337D4AACBD1AF07825E6160B
3E65EC8B51CE9BFCB06A8B536F48EB88E8D2522DBDD6565101CFA2CE9FCBBDF4
3D8C7AED2C0B0832B5D72F7D2AE303F183C34BD0BA3CA10ED3A3D0249975D422
A87BD3B4F8314CC30448BC002319E1AE0DBD5CF732421657642C31ED4B00660F
E496B96A2E07F2484A19FAC9B1EB5DD356C0D34F847BCFDD2141560068074522
56D5CA2032532EB18E7E810385A75888BF70A6D28DD86617D8AA564FA3C15DDB
7F49B14D7113083DBD0F48CFFE6A09A1F59A2E1C148ECEEF74DC914AF614FAF6
F9C1A670A1C32F2417FDF3DA1348BA142E21E01EAE2773F256DD3EA63F15D849
26142CA0E898D6AE2928BE1711CC7476EA3065ABE679ABF5AD61EB798D2240D7
BAFA91999C4C9991DEC31B5C95BE66390C6D04C72038F6E62EE1EE3FE17AD79A
D32F0E25D3953C96B5C47122EABF2697CC031E35B63F23FEA3E4D825C73AE35F
EAC267C5DE64A7B6FCB89F7D71F4499BA4BB4EB25073BE0515C92B2AE035C690
60DB8A46C16B1BC7315D652774DF69F8028F069E10FC39EF97110CDA20C349AC
C30CE1A36EAF6362AA2CC5818F6ACA5D77BFD8A0F704E7630A80493346D2B7DE
9365C03C0A3CBEE624B33EC2CC7BD9108F4743E195144026D9916EB6236CCF84
318E5FF093FC8613F362558256E86B7A45B2EE72525FBDE3B0309FA52FA8A2A4
176542255077478A53E00759755B9F160F83EE36D009059E8115DAC401CA0913
C4A517861FC0BD1FC5E46D5F5F2D89D6E86C662D015E8A22C014F05600C271F7
C6C928AD229184412B934B3CFC93FD13042A832C2E9D3445564FFDF7738BD8C0
AA090E9550C701100A69C42510241B2588E8092AF721BBE46679D6AF4AA8A565
F1FCB5ADE1CAC589DCCAC0B628F31B99BF3E8C932D757EFB9E37FE8D30C1915D
56D555A75593916A410BD854008CE21A323055356A7C61FFF24E91DC1A7A2F7D
EDE8B0A7ADC5FFE4B04853DD1E6594C8675A5BB741309CFA3203AA664DE80425
E88449898D0FA008FCD36C16A1687C7F4C33799F8C044D724E3F8D6EAA28A038
1931D408FD4EBDA8A257E08D6CCB7709FF9F17CE5D66B1A963F3F5E2028BECB6
E6245981B302647C8851A7C59944EC8538BF51E3696C50E7AEAB4AC75B0BEF95
A909947EC22883170C39DB8E1D218C2562FDFC1CCEF3D50935E88D7030EE54B1
929CA85A87F8735E29D0F679D6168D51B6669A87F34C9E53CBCE3C1C706595BF
5C889FC67EE5072188DABFCC4D6F5E3DB9C75734D8F586A316DE6927AFC6D66F
2B67E20EBACD18A022223AEAF4D6F54297E755CB89DC12C3F9D04D13E51691AA
4F4E9BBF5F3613DBD7E44C840BFD5A67EE3E4EBF7F6B2E1A6CC2481EB6C65842
AA0E6537139C81D116EE6F2F970918AB28104CF3A68CFCE2F882A81CC804410C
AECA93D36A80DA0A94A103355B4FE131DAE3E4709DE76A34B80E3AF38C9BF38F
E2ADFBCB86833BD10F46C13A3E047F92239C84F82F1E2F829F6C00229CF584FE
688B8FCF7D77B0916106338AF8BD2D48E315EAB416B879D04692A051D9108753
99FC1BFCE5E0CE6D2477B1F550308EF15757DFAFCE3C8438157F44E2BF184BA5
52E1EE8EDAFAB88B5A8F11C498D622DA82B9253333270BF964CA8B55B617A025
B618218065BDF59641152D5FD62D8D48E49F3EADED3DB88016AB75B3D488D637
08E47EC4F9A97D1EB408C340D047CE5A7A4FCF4921B9FFEDF452F774BDE9E9A0
2D95F60805D073E1BFC0B7AED232317CE6036A12B162D38BDFF715E09DCA901F
DA35017ECFBD1891C97258ECF985F4F4CB969AE4A7C81FBAA0F51DC89F476203
D0778E308FC17A33D5991C008FF9E557CD08001A734A2B9332C85F6FD9B93FCE
E96A86173D97488A13921035EE0DD32F98B57D0ECF54EDCD5B253A9B167B1473
C00E29BB080B0AB00E5E3D730DFA90A4EE5974A7E3A3996786C89C79F20B948D
2096BE9154ABA72F4C036EF3590B31A48801358F117FB90765E6060487ED54D2
07CCC7889CACBDA0AE7100E70E671807D3A83D2C968F4E0F6B7CF12FCBD3C464
AA14A393F6B3FE7DED985219FCBF87B28AEFA896AF80E9EB4182D0B88221B993
06C19865982B769D41893025AAC68F4D30FF3524779292D14688026401CCF5AB
4857C65F923A344CEF7832D018FA5D6E98DF0740936E3BCE68048582119428E1
CEF12EEB9664B4C74BE9990765038AFBA0027184F27C3D8C1C199CBFDDE401B7
89BEB490EBE6633902F9BA2C2BC983AA0525B0E76101390C76E0240F7F046386
B42E8D35B60F57B9783FEFBBB9B2FA104D7BF3016F87D1EB767057727645955D
F853A7B1287BB1EE14B8B64327267EB4E6962A0096562C0C0536CA049BFBCF90
6B16D39EE6B400041EAFD503506D77732D6633E2EAEB722AF09D06ECC90C2BD0
BEA6F7407DAE6FD4EA79452995C5E4351E4EF2434509A9D00432556F091F5AEE
6E34FFEBD63DF16784B029E42CE52BAF839A7274DCF8400CE7F9325A0A669EBF
3557C60C95BFA1734EC402C7F4DBECD130C7B9EB72E3086D50F71613A2BFA637
0681B79CAD217DC996133B277A7D7BECD70CE1BE39A3643B645229B514AB9765
03FE71824CF1F8E9483A11FC6CF8FA0F7792F58F06C06B9F58545BEBFCA87D07
3DD892484CDFA929F495D2ACA816B9B6C633E5EF292850624B02E1F9C93AE270
A5E0131CCEEA479C13D6306399F3AECEAFE8F4BCAA720AA586451E0AF20B9CAD
2ABFB2E4FCEE522EFB1DFA6C1BBA11160878A0A897387FDAC3D268C39F6834F9
EFD8822E9A2B343E2FC6878FB730174EEEE1FAB73764989EC389FFA5F0307DFC
96115BAC1DE59BAC3B90AF27B1AFE29074DD056ACAB152DD05C1CE0800A0E5DF
965C12A6F9D75B7BB5B77BFC028F1DE639D7CE3C63034B454F7B26FE1292A0A4
D99981F98AE7549AE795F667F313A617C40601A24E7AC5B3A95617C56CF36E92
581219423E25F294357A6BF54ABB40BB0BD5499A6E44BB262CB57239A5426A58
859489BBB9102501FBB355DE6B6B41D486D24C3852EC3C9103116DF4F8D9DD15
4B19235C62B9BC1719B25D3253F54259F502D56E2DE77DE3D6D066936A783A26
032C1C40759F47FA2F03A49BA5AC9A13540FCEF86096924CF9557BC1F35C42F8
87328956ADEADD31C330F565B7C28DF1155FD61CDB37A75F13E84934E03EC2C9
40C0876836D7EF8675D5217FD6B425BBDFCC25696218CE1E9B6EBB2091714559
BC69D21AC464CE68A7D2A65861513A33A8ED5DE6D2C0D49B1635EF2101E4F657
131E72B73C3EE0EE9B8A2A74E520985D24CA48464878A51DB54775BCCD8E1171
81002465851565F8E5335DBAE980484FD03FC0DA050F96373C73854A45324ECA
7F60AEB956016226EAE3751961B164D492400046D81B20F791B4B6B6F9388B21
C2B471B2260198CEA5967F72F9C986B434624708590C4B488D0ADEA2C17A607B
17EFA54655352150CAAE663D3692FA9DACB6A355A64E96259DBC9234DA3DDA31
78FCB2CC7305C4B7CAEE98C426668294F6E53581802063A82E5C1BFB83768F6D
DAC5EC6303FBBD1AC1E2BDD4C8412546E91F080AC9A2E8338EF528803AA07812
9D70BD6BB3D03EC10B254222E36EB1547C8E9DDF00EF9E7CB5A4039A8C7BCE39
6798F3452093131DD1E4DBAAFA3D07AB4AF4322671B23BB580F2642843E61212
A8E7CD48C1978EBF53E29831CBDD2C84955A96DB52A239EE529EEC231E960185
06B94CE269EC8FC491C9BF28C30210822E9B236D151FCB2FCBDB9E4E0B81CDE8
E3D46DC8503F0A135F9FF4DA477FDB9E81898AFE339B57A861F625BB6FCF5247
357F2B4B301FC2D1BFCE252AB8C56AF383DE0D32928D99349A24C77212170B9E
6BBEEDC4CE3242AEDF892602DD3503595B50D9A22A4920D1255A4EC982DEA6C1
B2624DE2441EEA3ED4D36720CAC9CE14542D6F07510D3C28A9638C1DF38B29F0
0EE359EA6416D91CCA283010B1FFDF66F4B9CC4F2B0084099D0FFE5BC984C313
89DC113021A1A81AF13046621B6332552DC68515B0D040451E47B24776599B56
F9E79AF70B1F61CC378E504B928F3190B1FB99FD4F615E0F541F6BC7F02EE32C
9BE0C6A42514E504319B6A88CCEFE4F32D0134DD772339F0FFF051711642C8DC
9331AD744B560B70A9F1EBD8F074400ACADA79160C589CA4CAA5560C916F4D6F
114A95F445DA9E11DA948B63FDA49A1E57FF606486963F5974E9041D31A6C604
42955BC1E3AB8D8EEE6DBF8EED4B07F41F395DD5A97568E9B057038283D6F0F7
66C71EB616A48D529BF99C443D2125E24A23908197C1643AEABC4C286B16484D
9D8A54077AAB917927DF38D961D03D6D9DCF6C8F28D9DA81D61AFEC3600E78FF
E7306DB691CCB6378C57784A48BFF2615DA1B01ED8F3BC473B158AFCE5BC5566
AC9DDF4D41EDD5A69E87954C331F5F8058338FE58D430F1A261735D65E84E0B4
180682BEDEEE8D1B6E68C4D9260F8B864914D7D81C5657B66D27A46EB04C3F4F
EF4ED79EB71F254F0CCBAD73A532D76482DF5D8FED2EA596A2127CA10432FFFE
9C61A09CC270DBF9CB8B37896EC957AEEF19DDC6C9DE039497621EF2E0B0E59D
F176B74F0D0B819C8870B09A0768C67D929659CC370CDE0BEF1F82C47B3A40FA
4053D2F18F36EE0049193554C076B263342E8A69C9F14DE4AF861AFDABA96679
4388FACF5A882AE1D372BD1F045FB526C190EE97204892E411CD0CAC08C3E846
6770F8118BB6DF14F3ED694D5EB158B23CEAC224A5B44BB6B6DF5BAA1A5FB4FC
E308F08C3F7435AF0B4713E0752BC93FF04E9A3A54E8B7708F0A1DD317CC610F
E89752551EFF160AA3315DE8E062ACEFA0C93EB7220B0335F1FAAD09B554E531
A0625F20C4C6BBF24275868CA808B226ACCC14AF2342574818D8E2E3304E56EE
CCA550A95F4159E1E418AEEDAC8883998F681373F2DBBEA1874FA1096506534E
F4003BD1B2F33C12BDA097B3A37C232C6070EF37CDF05266FB81706714DD2CA1
7A7DCF9EF656D76EE86AC3E3ABD2A40F40A4CDE565ADBAEA8E57822322E3D67E
2AE9588A4F559B5FCB03240A4070900E595F658FAAB72214050278659061224E
0933D1630DBB5E83CBE3FFCBD4282E1F1D5D95616CD93B93D4F221058FB7C7D5
3AB914AD7F6683D7D93B937A1E72A9D8A49707BD226CB2615CF7E7FF6688611E
5E062C8C4A0ED41A685422E51E2F2D0AD5562C360C89C9CC8B39EA2A87FCB4CA
01E8CAAF5E2F4D39432D77B7503EE7E675CEE9FFDE879F0E7BEB39EFD503C36F
5E11DEEB0AD6EE9C59607E74887779EDF4262B7991402B39D71FD340A45A3414
23D765C64BDDCF1DFA8ECAE3D67E063F70CB97436036356DA6790FCDC2064FDD
95B7CF31EA3A1399F91CDEDBC808282C1CAB8EC1C258078254CFF9A4F755EA88
F28D4EAAB65F17799776CB9D24D020769E47487073A1BFA65471A5A8D53FFF49
24AE70D16047A75A9F6C499C0722D193A54122B5B9F2F85051465C49EE8DB264
C25A9245DEF85B9FE56253EB0B71480CCC97F88EA06A9526E2AF2B103D684892
56515BD4F0F5F85F5FB181C7371B067B15D4FBD42CEEB362EA1AA8131C172D34
F35D25D29AB996602C286980E037F48886793087B78940F13FE1D7B8EB0D6D6A
24D68A6D87E2F8842E26F1A8E20A156B2569937B3B8A81586C3FFCF0BE1E9B83
90F72AB65858B8FEF30FB5C9786F36421E318D6DF0E8655E9CBBB7E80FF4588F
019832FAB7C8734F25AC04C1A7976B719AB46341186FE8B67A720C4016EE9DAD
AAC01A95C376428D9C492D5F065BE006F80B32B73DCF5030F94A66E1C715551A
3673E916F1EE739580640531D818D8B0BCE207535631D1D193A3B332CD5597FD
B17DA4388FEEEC746328C6CCAD238765BB5211D293CB0E57AD7C2E08822ACB50
A7F57884B5B2BA62DA62ECBA71EFF383DC58FC1CC1976D256A17A53DF75DB3E1
6FF997ADCC24189A7CC5E365928A02136D9B0FA4064D0EA69487EF0598F1ADB9
CBEACDAE8CF52E8FB89FD167CBE668B54C2E0CBCE59E40171DFFE756BD50265C
926E006E46EE07EDB8320FF3CC47E9B20E180451F760C770434683ECB7F04803
1BFF9305BFBE0C8DAB0E16018F78A2F403D5242B5BDF5462DE21F0DABA1B7AF6
17D3FE0B43C0A876BA22AE0912E071CC51849F2D46581794ED8613AD479313FE
44FD5A7B73B819EE97CEC97C89A3962BEA770690195C8511B1FD25A035572A9E
BB32824A6A7D28CAE7BD64B277F84C4476FD8DDF97E8A41B04F65614A3486FD3
76595A37FD54AA673E7DD1251C14CF6868F70FA1C2E36EC0B1A521230295FE8F
DE16843AE504579DCBB17B8E64C843A8F7C056BCDD5F44E52212666D17359090
79C780D6519925C4CA6FDB742CF55FE14C067B7D17A915ACF15BEACD0AF0496C
F1C72B0F6CF0E366DFF3910A9A1A0FEBDE4AFA30148418B860D901560243C12E
1AF9BB4D00C0235ECFB6EC1AE1F9EE15FDC9D239BDCCEE2A893B54EBA6B2A9DF
D929106030A935118E7ED48A3921B11EF78B6756BF5E23993811A27EE9D7C26C
691CB62A59562044AC5022144A1002F6D47403B03A660483CD352BDDBBDC9667
9F739D597D6B4979DACD3F5A953B7EF53BFE78E885B3AC6BB735D51746D6E6D7
F1DEA0B59829F57376A529290973056698C8E125A94674A2066EDC288E440420
BC64FCFA00A6EC2C65852F7301A522B3AD242E5E70DE94B1134E8084F754AB5E
94D0BD6F19946ABE985DC8F30363291678A7D98C36514E609A9EC6C81AEB8BAA
5836A2F1839BBEC944014E6E9D72D7AC26CDECA8E5E7CD27C269CEB9F299B570
B0AC2EDCC6C407906FA67A80ED17C1A02774F2BA5AF12C3B04F36F9AAA416F34
DB8866C18575E3CACEC54A88D02D0566F11FDE8D54234397671DD50617B23AAF
609368A75A04ABFB4FE3C2361F118ECE1809C6C73BE7ACDC0247554BBDBF87AA
A5E7949F9A4FFD1385BBFA7B217D28E4764D4390782237A06846436E5A573F4E
DEFEF5792DBA4192C6F27E2068E239440FEE42B7172D4C1764E6E17F02A1617C
D9A8A1A2ADB200C1571393AC8003C95808DDCE3A263E22BA6D8CC93CD914105A
82182479232E836609C95823D3C2457512D1E1251E17B70F0BC3A1DF296A7135
92EB5AB3F57FFFB0A4357492557AFA36DF3FF8EA9DC3C07A757735730512F2BF
0D600623DD8A090610E7A6FCE71B87DC438B08787D732B4B86B1AAAE1E873EE1
BD6C8327E178C4413C506C9ABF36721CF25BBF9EE7A6360FF1CAD318C15363E1
0E090C6D330C17496C499D83EBB2B5C94BF929F948962BABB244A9CEAB4EFE4F
6E9006E162F2B0B66303010FECEBD3FC306AEB26712687B9E64A5527F4C03F56
EA34ED9FFADEB624899CC6D9C207C511A37250B7232F5F25808DEF753C32DBB5
F364AA860B8BFB431ECB21575478997F2AB0A5D4917D964ED4BF395A5AA15C54
ED22C71712D6253C7D450E99009E59072EF30DA58E1197E2BA40168F114FF2B6
EE77D6499B0A0DF65330FC8B3CF7B34615B97F1848080960C49D27ADC113D7DA
16AF9D22C32D0645AC8315249E16FB74F3061D89A452DBDBAD599A536E9E0962
61632C3CD0E140D29DAE582C340238DA00E070F78CFBC299B46423712F3E0047
977B7305E9650026718B6C70913C79C60675605DA127DC08FFAD31085F4BD276
D9C4B1A665BECC98E16C49AAD32391BB7681D8D3171BAF725B98274CBD4F0F56
CEB35B189AB093BAB06F661A9269075C9DBCDEBFC8787E3D3B2347DE182ED0F2
FDD7FF526200A17CDCBB2D27D3FE8CCD435AE80E72D820F5359870F3E5576DF8
5E3AFBAA859D37DD3743BD6589FF100DEB82565EE53FB853316A79D25A1009B8
C7614D5CC146C6F81443923B70911789E5397DF22126B346F9DF7D02519F434B
DDF2416A6AC122AB1CAB762D49C09F01F052B8D0CF416594243E2CF4C8C054F2
0B91B00B1CD0013F4E454F7F455E36C43903531625589E49F9F059807BC427E3
E7313AE910CF60A7C2CA0AF555336009813BDBB0D870DB20B33A0F9013BE39CE
960881611B667950ED67C1B7606C39954B2304F9840AC759A83BE5B63AF161EE
75A840611DCDFB58214444235D83BEEFE5DD077DB3F5FF2578740E47B5775102
1A9289F14010DFC227219EF6720F3BE2EC1A9E16DC0500A5022C91A83E4D004D
9EF2AFCD76B9F1CF4487E0A932F4D8A16595E7B591BE6014AB088929C30A57FC
9CBF2ABD3925542DE5B7000019EA061AD8C46A806DE96BF5F5C94CC2DF18584F
A74C6D4FC64BF0E1AFA302C020A8CB31A421449521F2BC32746E9812750A7E8F
744280CE62422E3AADC78B54446E86A2A90092E1B27B53CC7A75823F979551C1
542FE6B257672ACF746E8F08F79FF99839AB680107FFA3BDA2C6209F99264D5C
87D5552CECD5BCDD353D72EDDB67BD7D19A115F77F698F72A4971F9948259537
44C8A7EC2293B61AE3A88DA2679ABD155094D7219D3AC16CF1F22B7956BE076A
16B6D78C471DC4F7867D872DFA221BE8067B10902D6424867334D3A7949C3584
E98451E5A684E5C2DC920CB87D32A047AD727D8A631B3888789131EEB951F6D1
4645703B45E7208C15660D62A0CFD9D4B41B8914BD5DC89898E114EE5115AD4E
CCB9DFD756E3EB9B664FE840E79A9F360E03430725EC5B39C19DBC38686E74A2
4179C5E6761A23100CADC3E762C9D352C3ED6A78D53674AEF3C9ED01FADA48AA
2B94500ADCE0ABAE94F7F05147B21B2B30C55941303F347727A2D2638E0C4ECA
05130DC0D1958ED4B1E1EE543780AB3D8FD3ABA12C93291937C0B0B898BFB0AF
58D107B6DD3CF6ACBF0DC78C52B488842588E1CC0C4E8F037992F46D49CB92DA
AB42F635480FA98BC25DEEAD54F711101FDD861EEB2A31278341314AF3609192
AA0D6BF2727325622B81F67485A05130E0812C23E085B9FBF55523D8F07C2322
984070FC8DB788A637FB9DFA67573951461154AD1F6794CE591B7949D7F2D8AC
9E254EEE0E5C5D83EAC60A1522FB14243CDD40B68608AFBB35D35036B37A5B15
022F1FD8DD5C819E389367C64DBAED951C64862557184EA1EE4E617686E9E0D2
0B5C578329DC139917A09411E12DA39D5A0F0C4905634EF6A752E5F26CFB67E4
C4A032DF05546B6448F46B2328E65C0B97429D1F243FC5B3CDED57040E934AE3
83D499D0A09535E8D62E7B9A0FBD6171D7C42C6C4E76A6B2EAEDFEBA5C03109D
1DE49C3EAA29B51F3D5E62D1708759809B71038D34500955BD585C2E2C402E85
C11F51675E4F5C90EC90D87A6FD416C1185E5ECE5641014755FC35C00377C02B
F4AFC1B9DC9E0FAA5F4C3F2F29CD91DF0D2221318B1D2B5E9941A4E3DD89CE4D
E07FB0783D0490B8534DD5B3448983E679E17CC0B22FD0E7F59BD24E9479D7DC
ACC75C3347F03A02B3FA67F22F9CBECF6484FF9B47CF4C16EF2306E3601F2F0C
4AF719F502258536C3E38C84B3337B6BDEBE6DAF4A7BFCE409E08E350B95AD44
9C5823458F7C118BE4F2D2F5B4D6402F763D29FA33C7E7C6C85F5C16064511F2
46AF6ABBF5ED74E020A7A46048A03E43F5D5ED600281C2037F457A5DB940CC80
E27C66CD1344667D22F94B3CAF799D0B1B87473630ABB6C4A45E793B699EE59F
B4D445BF0FED23A6A73FEF7E6208E39086E2B3FA17BCB9A034C58701C181C62C
A18971553E51316C4B687E71F648341B2F5ED937546C1EDB69B7EA2642A915CF
B58CE250415DF10F80FB0D12878B6DC1709F9D0191569FADED11D22485F1A662
88356F8D26E09471AFB5DE4C7596C60CEBCF69975DADE58C1A86ABFF30A01CCC
E982FB39DD2097120624022ADB519679B16FC50B8CEB14D442A99EA43DF26A12
FFDF889ACF09D954215FC0B48BF084ED9BE1E341C0474588994B56957CF8638A
5E162BC7DAFAB53A1E5F0F8AB12CE14343B753196B7828AE4648D5C6C88B589B
F28900F0B18C97FA1D119388327790E9C648C72BA9DA61951ECBE9B6519F6BE6
CDB5FAABD6731817DAFFAADBE6FD329218FAED0638736F96FFC5DF2474F1862A
8F2E7A1CD436C335CE66A9AABA9E96DE115BD0F92A8704C4B13B36EF0FFE55A4
C253B58929A0D3D2E659CBD84ABAB421171E9E2280B578BBF3437E0BDE677B71
AF7FB6D3DAF0ED426B4045F05219BAEB65F1368702C11208DD73D35E20C6A6B9
67B798F9640834002392E938969B441F57A50BCE9CF3477CC53957E1BEF7176B
3125CC10B02A14F4AE5073FF6EDBD52DD06AD7553B45A571F816ABA2FEF4AF21
9B4123A3CC99F77382FFB5D5DE30155FCA529CDADA33D383E410511A3382D283
D6DF8D01D770B505D31A1260F973CA4F197B16ADA137A519A05110C30EE906A5
DF2D6A58E0603A96E443EE76B1236D85070E05CC3C6B868A217B26011CA3D2E8
0592270A678E8A6B2364922165F8D2B35E708712D51907A56D5B59EB95F0AF43
E047656AD69CCA50C7EB98D0CF920805FC9567A9382ABE3EEDF2C6486EFAFD59
3D717E9578B04903525917D665BBE44C46EECFE017BAA8AC39CF99C00DD06959
B704E3F6311E3525E2E17013704279F006C02C13F4EF6111F326892B37E5FFBD
01652A0C5A7423A639677BCBB37D736607BB396A80AE554AA34C77091946F0A6
B5DF6BA3CF7E9D86A496B32FF8E423955503853CF8EB55F7CC2B8D02AF24476D
77B61D4129D9EC791A17F7AAC2B1C88B0DDC3D1A30E31ADCA0170CC19568A0E0
194798BC914825EDB2582AC378FF0480E2526E634D8BB57A0ABCB679CB245BFC
8B72E189044177C87F6D97E78F5DDB216B8CF50DB245871B3F90A359F9FBE590
C48DDE8AE392946918089E04B1B44E0FCA63F46AB42508A5CB26CEB5A5407324
776442A9F812ACDB80C786BF34905653D9AAF940B3E9EC30A1B928168789CF0E
ED9C90E1E2D46E687282D8B09DF9CC171E27601B4CD59BD0B5DA13D2108F866E
BD9B1C492B4BE3422E15F06357993DAC26FF8AC80F8C0FFEE5C11ACB2B0C4EC5
81D9CF71CB73B863A9E6436D2D80199A22092D966F3E827F5F7A045A4106F364
06EDC030F4473DA7DFFAD59B130E3BF166333958F2DBB65ED65877E89FCC6482
CA4A17FEB0834FCD54D09682C04CCA4EDB591B24442B2C67ABDB1DA7BF62B00E
57AF0A9B8C2F3E755309CB5EC645B2DEEE7565C0233334E0152C7CE56D492D18
6A12A2D9170503341F64D402584F70B48B937FCB7A1FE00FA112088FFE50A25B
4FF77A33A1414A906881CF0B9934567FB7EF23D6E047BEEAAF5A92493F1582D4
657E94C0A678A817C090D64D8059ABA6AB767D90D66F0B75CD6B46615894511A
3AF0818FE5EEF56A192B05B796732E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (main.dvi)
@start /Fa 135[44 44 1[44 44 44 44 1[44 44 44 44 44 44
1[44 44 44 1[44 44 44 44 44 1[44 36[44 10[44 44 44 45[{}25
83.022 /CMTT10 rf /Fb 139[28 1[35 3[47 2[38 1[25 3[38
1[38 1[42 13[47 6[52 30[30 45[{}11 83.022 /CMTI10 rf
/Fc 134[59 1[81 59 62 44 44 46 59 62 56 62 93 31 2[31
62 56 34 51 62 50 62 54 11[86 78 62 84 1[77 84 5[42 1[88
70 1[86 81 1[85 10[56 56 56 56 56 56 1[56 31 1[31 31[62
12[{}44 99.6264 /CMBX12 rf /Fd 135[50 1[50 53 37 38 39
50 53 48 53 80 27 2[27 1[48 1[44 53 42 1[46 13[53 3[72
5[36 4[73 2[72 8[48 1[48 48 48 48 48 48 36[53 12[{}31
83.022 /CMBX10 rf /Fe 135[71 1[71 75 52 53 55 71 75 67
75 112 37 2[37 1[67 41 61 75 60 75 65 12[94 75 3[101
5[50 4[103 97 1[102 11[67 67 67 67 67 36[75 12[{}33 119.552
/CMBX12 rf /Ff 133[37 44 44 60 44 46 32 33 33 44 46 42
46 69 23 44 25 23 46 42 25 37 46 37 46 42 3[23 1[23 2[62
85 62 62 60 46 61 1[57 65 62 76 52 1[43 30 62 65 54 57
63 60 59 62 6[23 42 42 42 42 42 42 42 42 42 42 42 23
28 23 2[32 32 23 4[42 19[69 46 46 48 11[{}73 83.022 /CMR10
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Capstone Project)/Subject
(Capstone Project)/Creator (LaTeX with hyperref package)/Author (Chongxian Chen)/Keywords
(Problem Statement) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -158 -466 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-150 -150 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150
-150 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150
a
SDict begin [/Count -5/Dest (section.1) cvn/Title (Introduction) /OUT
pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.1.1) cvn/Title (Purpose) /OUT
pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.1.2) cvn/Title (Scope) /OUT
pdfmark end
 -150
-150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.1.3) cvn/Title (Definitions, acronyms, and abbreviations)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.1.4) cvn/Title (References)
/OUT pdfmark end
 -150 -150
a -150 -150 a
SDict begin [/Count -0/Dest (subsection.1.5) cvn/Title (Overview) /OUT
pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -6/Dest (section.2) cvn/Title (Overall Description)
/OUT pdfmark end
 -150 -150 a -150
-150 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (Product Perspective)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (Product Functions)
/OUT pdfmark end
 -150 -150 a -150 -150
a
SDict begin [/Count -0/Dest (subsection.2.3) cvn/Title (User Characteristics)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.4) cvn/Title (Constraints)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.5) cvn/Title (Assumptions and dependencies)
/OUT pdfmark end
 -150
-150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.6) cvn/Title (Technical Challenges/Issues)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -3/Dest (section.3) cvn/Title (Specific requirements)
/OUT pdfmark end
 -150 -150
a -150 -150 a
SDict begin [/Count -0/Dest (subsection.3.1) cvn/Title (Functional Requirements)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.3.2) cvn/Title (Technical Requirements)
/OUT pdfmark end
 -150 -150 a -150
-150 a
SDict begin [/Count -0/Dest (subsection.3.3) cvn/Title (Usability Requirements)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -1/Dest (section.4) cvn/Title (Appendix) /OUT pdfmark
end
 -150 -150 a -150 -150
a
SDict begin [/Count -0/Dest (subsection.4.1) cvn/Title (Gantt Chart)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (section.5) cvn/Title (Agreement) /OUT
pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -150
-150 a -150 -150 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin H.S end
 -150 -150
a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -150 -150 a 0 TeXcolorgray
0 TeXcolorgray 809 -67 a Ff(Oregon)26 b(State)i(Univ)n(ersit)n(y)f
(Computer)g(Science)g(Senior)g(Design)h(2016)1502 132
y(Requiremen)n(ts)f(Do)r(cumen)n(t)1039 332 y(By)g(Alex)h(Ho\013er,)f
(Jak)n(e)g(Smith,)h(and)g(Chen)f(Chongxian)1463 531 y(T)-7
b(eam)27 b(Name:)37 b(Stat)28 b(Champs)1792 1439 y(Abstract)-150
1638 y(The)f(Bio)r(c)n(hemistry)e(and)i(Bioph)n(ysics)e(departmen)n(t)h
(at)h(Oregon)d(State)j(Univ)n(ersit)n(y)f(will)h(ha)n(v)n(e)e(a)h(serv)
n(er)f(that)i(allo)n(ws)e(for)h(studen)n(ts)-48 1738
y(to)i(select)f(statistical)g(categories)f(from)h(college)g(bask)n
(etball)f(games)h(and)g(generate)f(Marc)n(h)h(Madness)g(brac)n(k)n(ets)
f(from)h(these)1767 1837 y(selections.)p 0 TeXcolorgray
1929 5799 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -67 a
SDict begin H.S end
 -150 -67 a -150 -67 a
SDict begin 18 H.A end
 -150 -67 a -150 -67
a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -150 -67 a Fe(T)-11 b(able)45 b(of)g(Con)l(ten)l(ts)p
0 TeXcolorgray -150 116 a
SDict begin H.S end
 -150 116 a Fd(1)77 b(In)m(tro)s(duction)501
116 y
SDict begin 12 H.L end
 501 116 a 501 116 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 501 116 a 0 TeXcolorgray 3501
w Fd(3)p 0 TeXcolorgray -25 215 a
SDict begin H.S end
 -25 215 a Ff(1.1)83
b(Purp)r(ose)461 215 y
SDict begin 12 H.L end
 461 215 a 461 215 a
SDict begin [/Subtype /Link/Dest (subsection.1.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 461 215 a
0 TeXcolorgray 55 w Ff(.)42 b(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)
h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray 111 w(3)p
0 TeXcolorgray 0 TeXcolorgray -25 315 a
SDict begin H.S end
 -25 315 a Ff(1.2)83
b(Scop)r(e)375 315 y
SDict begin 12 H.L end
 375 315 a 375 315 a
SDict begin [/Subtype /Link/Dest (subsection.1.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 375 315 a 0
TeXcolorgray 77 w Ff(.)41 b(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)
h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray 111 w(3)p
0 TeXcolorgray 0 TeXcolorgray -25 415 a
SDict begin H.S end
 -25 415 a Ff(1.3)83
b(De\014nitions,)29 b(acron)n(yms,)c(and)j(abbreviations)1651
415 y
SDict begin 12 H.L end
 1651 415 a 1651 415 a
SDict begin [/Subtype /Link/Dest (subsection.1.3) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1651 415 a 0 TeXcolorgray
28 w Ff(.)41 b(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)
g(.)f(.)p 0 TeXcolorgray 111 w(3)p 0 TeXcolorgray 0 TeXcolorgray
-25 514 a
SDict begin H.S end
 -25 514 a Ff(1.4)83 b(References)548 514 y
SDict begin 12 H.L end

548 514 a 548 514 a
SDict begin [/Subtype /Link/Dest (subsection.1.4) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 548 514 a 0 TeXcolorgray 33 w Ff(.)42
b(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)
g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(3)p 0 TeXcolorgray 0 TeXcolorgray
-25 614 a
SDict begin H.S end
 -25 614 a Ff(1.5)83 b(Ov)n(erview)506 614 y
SDict begin 12 H.L end

506 614 a 506 614 a
SDict begin [/Subtype /Link/Dest (subsection.1.5) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 506 614 a 0 TeXcolorgray 75 w Ff(.)42
b(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)
g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(3)p 0 TeXcolorgray 0 TeXcolorgray
-150 796 a
SDict begin H.S end
 -150 796 a Fd(2)77 b(Ov)m(erall)31 b(Description)789
796 y
SDict begin 12 H.L end
 789 796 a 789 796 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 789 796 a 0 TeXcolorgray 3213
w Fd(4)p 0 TeXcolorgray -25 896 a
SDict begin H.S end
 -25 896 a Ff(2.1)83
b(Pro)r(duct)27 b(P)n(ersp)r(ectiv)n(e)901 896 y
SDict begin 12 H.L end
 901
896 a 901 896 a
SDict begin [/Subtype /Link/Dest (subsection.2.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 901 896 a 0 TeXcolorgray 67 w Ff(.)42
b(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)
h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray
111 w(4)p 0 TeXcolorgray 0 TeXcolorgray -25 996 a
SDict begin H.S end
 -25
996 a Ff(2.2)83 b(Pro)r(duct)27 b(F)-7 b(unctions)839
996 y
SDict begin 12 H.L end
 839 996 a 839 996 a
SDict begin [/Subtype /Link/Dest (subsection.2.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 839 996 a 0 TeXcolorgray 65
w Ff(.)41 b(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h
(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)
f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(4)p 0 TeXcolorgray 0 TeXcolorgray
-25 1095 a
SDict begin H.S end
 -25 1095 a Ff(2.3)83 b(User)28 b(Characteristics)901
1095 y
SDict begin 12 H.L end
 901 1095 a 901 1095 a
SDict begin [/Subtype /Link/Dest (subsection.2.3) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 901 1095 a 0 TeXcolorgray
67 w Ff(.)42 b(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h
(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)
f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(4)p 0 TeXcolorgray 0 TeXcolorgray
-25 1195 a
SDict begin H.S end
 -25 1195 a Ff(2.4)83 b(Constrain)n(ts)585
1195 y
SDict begin 12 H.L end
 585 1195 a 585 1195 a
SDict begin [/Subtype /Link/Dest (subsection.2.4) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 585 1195 a 0 TeXcolorgray
61 w Ff(.)41 b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)p 0 TeXcolorgray 111 w(4)p 0 TeXcolorgray 0 TeXcolorgray
-25 1295 a
SDict begin H.S end
 -25 1295 a Ff(2.5)83 b(Assumptions)28 b(and)g(dep)r
(endencies)1293 1295 y
SDict begin 12 H.L end
 1293 1295 a 1293 1295 a
SDict begin [/Subtype /Link/Dest (subsection.2.5) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1293 1295
a 0 TeXcolorgray 63 w Ff(.)41 b(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray
111 w(4)p 0 TeXcolorgray 0 TeXcolorgray -25 1394 a
SDict begin H.S end
 -25
1394 a Ff(2.6)83 b(T)-7 b(ec)n(hnical)27 b(Challenges/Issues)1177
1394 y
SDict begin 12 H.L end
 1177 1394 a 1177 1394 a
SDict begin [/Subtype /Link/Dest (subsection.2.6) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1177 1394 a 0 TeXcolorgray
50 w Ff(.)41 b(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f
(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)
g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray
111 w(4)p 0 TeXcolorgray 0 TeXcolorgray -150 1577 a
SDict begin H.S end
 -150
1577 a Fd(3)77 b(Sp)s(eci\014c)31 b(requiremen)m(ts)868
1577 y
SDict begin 12 H.L end
 868 1577 a 868 1577 a
SDict begin [/Subtype /Link/Dest (section.3) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 868 1577 a 0 TeXcolorgray
3134 w Fd(5)p 0 TeXcolorgray -25 1676 a
SDict begin H.S end
 -25 1676 a Ff(3.1)83
b(F)-7 b(unctional)28 b(Requiremen)n(ts)1073 1676 y
SDict begin 12 H.L end
 1073
1676 a 1073 1676 a
SDict begin [/Subtype /Link/Dest (subsection.3.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1073 1676 a 0 TeXcolorgray 25 w Ff(.)41
b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h
(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)
f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray 111
w(5)p 0 TeXcolorgray 0 TeXcolorgray -25 1776 a
SDict begin H.S end
 -25 1776
a Ff(3.2)83 b(T)-7 b(ec)n(hnical)27 b(Requiremen)n(ts)1030
1776 y
SDict begin 12 H.L end
 1030 1776 a 1030 1776 a
SDict begin [/Subtype /Link/Dest (subsection.3.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1030 1776 a 0 TeXcolorgray
68 w Ff(.)41 b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray
111 w(5)p 0 TeXcolorgray 0 TeXcolorgray -25 1876 a
SDict begin H.S end
 -25
1876 a Ff(3.3)83 b(Usabilit)n(y)28 b(Requiremen)n(ts)1015
1876 y
SDict begin 12 H.L end
 1015 1876 a 1015 1876 a
SDict begin [/Subtype /Link/Dest (subsection.3.3) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 1015 1876 a 0 TeXcolorgray
83 w Ff(.)41 b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p 0 TeXcolorgray
111 w(5)p 0 TeXcolorgray 0 TeXcolorgray -150 2058 a
SDict begin H.S end
 -150
2058 a Fd(4)77 b(App)s(endix)383 2058 y
SDict begin 12 H.L end
 383 2058 a 383
2058 a
SDict begin [/Subtype /Link/Dest (section.4) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 383 2058 a 0 TeXcolorgray 3619 w Fd(6)p 0 TeXcolorgray
-25 2158 a
SDict begin H.S end
 -25 2158 a Ff(4.1)83 b(Gan)n(tt)28 b(Chart)621
2158 y
SDict begin 12 H.L end
 621 2158 a 621 2158 a
SDict begin [/Subtype /Link/Dest (subsection.4.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 621 2158 a 0 TeXcolorgray
25 w Ff(.)41 b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)
f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f
(.)p 0 TeXcolorgray 111 w(6)p 0 TeXcolorgray 0 TeXcolorgray
-150 2341 a
SDict begin H.S end
 -150 2341 a Fd(5)77 b(Agreemen)m(t)433 2341
y
SDict begin 12 H.L end
 433 2341 a 433 2341 a
SDict begin [/Subtype /Link/Dest (section.5) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 433 2341 a 0 TeXcolorgray 3569
w Fd(8)p 0 TeXcolorgray 1929 5799 a Ff(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -150 -150 a 83 x Fe(1)135 b(In)l(tro)t(duction)-150
15 y
SDict begin H.S end
 -150 15 a -150 15 a
SDict begin 12 H.A end
 -150 15 a -150 15 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1) cvn /DEST pdfmark
end
 -150 15
a 116 x Fc(1.1)112 b(Purp)s(ose)-150 285 y Ff(The)30
b(purp)r(ose)g(of)g(this)h(soft)n(w)n(are)e(requiremen)n(ts)g(sp)r
(eci\014cation)h(is)g(to)g(outline)h(what)f(is)g(necessary)f(for)h
(this)g(soft)n(w)n(are)f(pro)r(duct)h(to)-150 384 y(include.)38
b(That)27 b(is,)h(this)g(do)r(cumen)n(t)g(will)g(describ)r(e)f(what)h
(inputs)g(the)g(soft)n(w)n(are)e(will)i(exp)r(ect)g(and)f(utilize)h
(and)g(what)g(w)n(a)n(ys)e(it)i(will)-150 484 y(transform)g(these)g
(inputs)h(in)n(to)g(meaningful)g(outputs.)40 b(The)29
b(in)n(tended)g(audience)f(for)g(this)h(do)r(cumen)n(t)g(is)g(Dr.)40
b(Victor)28 b(Hsu)h(of)g(the)-150 584 y(Oregon)d(State)i(Bio)r(c)n
(hemistry)e(and)i(Bioph)n(ysics)e(departmen)n(t.)-150
716 y
SDict begin H.S end
 -150 716 a -150 716 a
SDict begin 12 H.A end
 -150 716 a -150 716 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.2) cvn /DEST pdfmark
end
 -150
716 a 100 x Fc(1.2)112 b(Scop)s(e)-150 969 y Ff(The)37
b(Bio)r(c)n(hemistry)f(and)h(Bioph)n(ysics)f(departmen)n(t)h(at)g
(Oregon)e(State)j(Univ)n(ersit)n(y)e(needs)h(to)g(train)f(their)i
(studen)n(ts)f(on)g(basic)-150 1069 y(mac)n(hine)26 b(learning)g
(concepts.)36 b(This)26 b(is)h(b)r(ecause)f(mac)n(hine)g(learning)f(is)
i(a)f(highly)g(useful)h(to)r(ol)g(in)f(Bio)r(c)n(hemistry)g(and)g
(Bioph)n(ysics.)-150 1168 y(F)-7 b(or)22 b(example,)h(\014nding)g(and)f
(understanding)g(biologically)f(functional)i(DNA)g(sequences)f(is)g
(made)h(p)r(ossible)f(b)n(y)g(mac)n(hine)g(learning.)-150
1268 y(Ho)n(w)n(ev)n(er,)i(mac)n(hine)h(learning)f(is)h(not)g(a)g
(cornerstone)e(of)i(these)g(studen)n(ts')h(education.)35
b(There)25 b(needs)g(to)g(b)r(e)h(an)f(instructional)f(to)r(ol)-150
1368 y(that)d(pro)n(vides)e(these)i(studen)n(ts)g(with)h(the)f(opp)r
(ortunit)n(y)f(to)h(understand)f(basic)g(mac)n(hine)h(learning)f
(principles.)34 b(Grasping)20 b(mac)n(hine)-150 1467
y(learning)h(concepts)g(from)h(its)g(applications)f(to)h(bio)r(c)n
(hemistry/bioph)n(ysics)d(is)j(di\016cult)h(b)r(ecause)f(these)g(mo)r
(dels)f(are)g(generally)g(hard)-150 1567 y(to)h(in)n(terpret.)35
b(Therefore,)22 b(this)h(to)r(ol)g(should)f(utilize)h(results)f(that)h
(are)e(simple)i(to)f(in)n(terpret)g(in)h(order)e(for)h(studen)n(ts)h
(to)f(understand)-150 1667 y(ho)n(w)i(training)g(data)g(on)h(certain)f
(statistics)g(can)h(either)f(damage)g(or)g(impro)n(v)n(e)f(the)i
(accuracy)e(of)i(their)g(generated)e(mo)r(del.)36 b(The)25
b(use)-150 1766 y(of)i(Marc)n(h)g(Madness)f(brac)n(k)n(ets)g(mak)n(es)g
(this)i(p)r(ossible)f(b)r(ecause)g(the)h(output)g(of)f(the)h(studen)n
(ts')f(e\013ort)g(will)h(b)r(e)g(straigh)n(tforw)n(ard:)33
b(a)-150 1866 y(team)c(can)g(either)g(win)g(or)g(lose)f(in)i(eac)n(h)e
(round,)h(and)g(whic)n(hev)n(er)f(bask)n(etball)g(statistics)h(the)h
(user)e(c)n(hose)h(to)g(train)f(their)i(data)e(on)-150
1966 y(will)g(b)r(e)g(re\015ected)f(in)h(ho)n(w)f(far)g(eac)n(h)g(team)
g(go)r(es)g(in)h(their)f(mo)r(del.)-150 2098 y
SDict begin H.S end
 -150 2098
a -150 2098 a
SDict begin 12 H.A end
 -150 2098 a -150 2098 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3) cvn /DEST pdfmark
end
 -150 2098 a 100
x Fc(1.3)112 b(De\014nitions,)39 b(acron)m(yms,)f(and)h(abbreviations)
-150 2351 y Ff(NCAA:)30 b(National)f(Collegiate)g(A)n(thletic)h(Asso)r
(ciation,)f(the)h(organization)d(that)j(holds)f(the)h(Marc)n(h)e
(Madness)h(tournamen)n(t)g(eac)n(h)-150 2451 y(y)n(ear.)-150
2550 y(Scikit:)47 b(A)33 b(mac)n(hine)e(learning)h(API)g(supp)r(orted)g
(b)n(y)g(Python)g(that)h(pro)n(vides)e(us)h(with)h(the)g(algorithms)e
(w)n(e)h(will)g(allo)n(w)g(users)f(to)-150 2650 y(select)c(from)h(to)f
(use)h(to)f(generate)f(brac)n(k)n(ets.)36 b(The)27 b(user)g(guide)h
(for)f(this)h(API)f(can)g(b)r(e)h(found)g(in)g(the)g(References)f
(section)g(at)h(\(1\).)-150 2750 y(W)-7 b(ebix:)37 b(A)27
b(graphical)e(user)h(in)n(terface)g(API)h(supp)r(orted)g(b)n(y)f(Ja)n
(v)-5 b(aScript)26 b(that)h(pro)n(vides)e(us)i(with)g(the)g(abilit)n(y)
g(to)f(presen)n(t)h(instruc-)-150 2849 y(tions)f(and)f(the)i(generated)
d(brac)n(k)n(ets)g(in)i(a)g(w)n(a)n(y)e(that)j(is)e(app)r(ealing)g(to)h
(the)g(user.)36 b(The)26 b(user)f(guide)h(for)f(this)h(API)g(can)f(b)r
(e)i(found)f(in)-150 2949 y(the)i(References)f(section)g(at)h(\(2\).)
-150 3086 y
SDict begin H.S end
 -150 3086 a -150 3086 a
SDict begin 12 H.A end
 -150 3086 a -150
3086 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.4) cvn /DEST pdfmark
end
 -150 3086 a 95 x Fc(1.4)112 b(References)-150
3335 y Ff([1])27 b("User)g(guide:)37 b(Con)n(ten)n(ts)27
b(-)g(scikit-learn)f(0.18)h(do)r(cumen)n(tation,")f(in)i
Fb(Scikit-L)l(e)l(arn)p Ff(,)g(2010.)35 b([Online].)-150
3434 y(Av)-5 b(ailable:)p 0 TeXcolorgray 247 3453 a
SDict begin H.S end
 247
3453 a 0 TeXcolorgray -19 x Fa(http://scikit-)t(le)o(ar)o(n.o)o(rg)o
(/s)o(tab)o(le)o(/us)o(er)o(_gu)o(id)o(e.)o(htm)o(l)p
0 TeXcolorgray 2256 3377 a
SDict begin H.R end
 2256 3377 a 2256 3434 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://scikit-learn.org/stable/user_guide.html)>>/Subtype
/Link H.B /ANN pdfmark end
 2256
3434 a 0 TeXcolorgray Ff(.)37 b(Accessed:)f(No)n(v.)g(8,)28
b(2016.)-150 3534 y([2])f(X.S.)h(Ltd,)h("Guides)e(W)-7
b(ebix)28 b(Do)r(cs")f([Online].)-150 3633 y(Av)-5 b(ailable:)p
0 TeXcolorgray 247 3652 a
SDict begin H.S end
 247 3652 a 0 TeXcolorgray -19
x Fa(http://docs.web)o(ix.)o(co)o(m/d)o(es)o(kt)o(op_)o(ba)o(sic)o(_t)o
(ask)o(.h)o(tm)o(l)p 0 TeXcolorgray 2208 3576 a
SDict begin H.R end
 2208
3576 a 2208 3633 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://docs.webix.com/desktop_basic_task.html)>>/Subtype
/Link H.B /ANN pdfmark end
 2208 3633 a 0 TeXcolorgray Ff(.)37
b(Accessed:)f(No)n(v.)h(8,)27 b(2016.)-150 3768 y
SDict begin H.S end
 -150
3768 a -150 3768 a
SDict begin 12 H.A end
 -150 3768 a -150 3768 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.5) cvn /DEST pdfmark
end
 -150 3768
a 98 x Fc(1.5)112 b(Ov)m(erview)-150 4019 y Ff(The)29
b(remaining)f(con)n(ten)n(ts)h(of)g(this)g(do)r(cumen)n(t)g(will)h
(consist)e(of)h(more)g(sp)r(eci\014c)g(descriptions)f(of)h(the)h(soft)n
(w)n(are)d(itself)j(suc)n(h)e(as)h(the)-150 4119 y(pro)r(duct)j(p)r
(ersp)r(ectiv)n(e,)h(the)f(pro)r(duct)g(functions,)h(user)e(c)n
(haracteristics,)g(constrain)n(ts,)h(assumptions/dep)r(endencies,)g(as)
f(w)n(ell)h(as)-150 4218 y(tec)n(hnical)26 b(c)n(hallenges)f(and)h
(functional)h(requiremen)n(ts.)35 b(There)26 b(will)g(also)f(b)r(e)i(a)
f(Gan)n(tt)g(c)n(hart)g(to)g(outline)h(our)e(pro)5 b(ject's)26
b(lifespan.)p 0 TeXcolorgray 1929 5799 a(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -150 -150 a 83 x Fe(2)135 b(Ov)l(erall)46 b(Description)-150
38 y
SDict begin H.S end
 -150 38 a -150 38 a
SDict begin 12 H.A end
 -150 38 a -150 38 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 -150 38
a 93 x Fc(2.1)112 b(Pro)s(duct)37 b(P)m(ersp)s(ectiv)m(e)-150
285 y Ff(This)23 b(pro)r(duct)h(is)f(indep)r(enden)n(t)h(and)f
(completely)h(self-con)n(tained.)34 b(As)24 b(of)f(righ)n(t)g(no)n(w,)g
(there)g(are)g(no)g(plans)g(to)g(implemen)n(t)h(a)f(larger)-150
384 y(pro)r(duct)29 b(whic)n(h)g(this)g(pro)r(duct)g(m)n(ust)g(in)n
(teract)f(with.)42 b(There)28 b(are)g(v)-5 b(arious)28
b(APIs)g(the)i(pro)r(duct)f(m)n(ust)g(in)n(teract)f(with)h(in)h(order)d
(to)-150 484 y(function,)h(and)g(these)f(are)g(outlined)h(in)g(other)f
(sections)g(of)g(this)h(do)r(cumen)n(t.)-150 616 y
SDict begin H.S end
 -150
616 a -150 616 a
SDict begin 12 H.A end
 -150 616 a -150 616 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 -150 616 a 100
x Fc(2.2)112 b(Pro)s(duct)37 b(F)-9 b(unctions)-150 870
y Ff(Without)32 b(logging)d(in)n(to)h(a)h(sp)r(ecially)f(created)g
(accoun)n(t,)h(the)g(user)f(will)h(b)r(e)g(able)g(to)f(access)g(a)g(w)n
(eb)h(page)f(where)g(they)h(can)f(select)-150 969 y(a\))i(bask)n
(etball)g(statistics)g(and)g(b\))h(a)f(mac)n(hine)g(learning)g
(algorithm.)50 b(They)33 b(will)f(then)h(b)r(e)g(presen)n(ted)f(with)h
(a)f(Marc)n(h)g(Madness)-150 1069 y(brac)n(k)n(et)g(that)i(re\015ects)e
(the)i(mac)n(hine)f(learning)g(algorithm)f(they)h(c)n(hose)g(that)g
(has)g(b)r(een)h(trained)f(on)g(the)h(bask)n(etball)e(statistics)-150
1168 y(they)c(c)n(hose.)36 b(The)27 b(user)g(can)g(run)h(this)g
(program)d(as)i(man)n(y)g(times)h(as)f(they)h(lik)n(e)f(to)h(generate)e
(more)h(brac)n(k)n(ets.)-150 1301 y
SDict begin H.S end
 -150 1301 a -150
1301 a
SDict begin 12 H.A end
 -150 1301 a -150 1301 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.3) cvn /DEST pdfmark
end
 -150 1301 a 100 x Fc(2.3)112
b(User)38 b(Characteristics)-150 1554 y Ff(W)-7 b(e)34
b(do)g(not)g(place)f(an)n(y)h(restrictions)e(on)i(who)g(can)f(access)g
(this)h(w)n(eb)g(page.)55 b(An)n(y)n(one)33 b(with)i(the)f(link)g(can)g
(utilize)g(our)f(service.)-150 1654 y(Ho)n(w)n(ev)n(er,)21
b(this)i(pro)r(duct)f(is)g(designed)g(sp)r(eci\014cally)g(for)f
(undergraduate)g(or)g(graduate)g(studen)n(ts)h(of)g(Bio)r(c)n(hemistry)
f(and)h(Bioph)n(ysics)-150 1753 y(at)32 b(Oregon)d(State)j(Univ)n
(ersit)n(y)-7 b(.)48 b(It)32 b(will)g(b)r(e)g(designed)g(with)g(this)g
(in)g(mind)g(b)n(y)f(allo)n(wing)g(for)g(them)h(to)f(select)h(mac)n
(hine)f(learning)-150 1853 y(algorithms)26 b(whic)n(h)i(ma)n(y)f(b)r(e)
h(useful)g(when)f(applied)h(to)f(Bio)r(c)n(hemistry)g(and)g(Bioph)n
(ysics.)-150 1985 y
SDict begin H.S end
 -150 1985 a -150 1985 a
SDict begin 12 H.A end
 -150 1985
a -150 1985 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.4) cvn /DEST pdfmark
end
 -150 1985 a 100 x Fc(2.4)112 b(Constrain)m(ts)-150
2239 y Ff(This)38 b(pro)r(duct)f(will)h(b)r(e)g(using)g(sev)n(eral)e
(libraries)g(and)i(languages.)65 b(Th)n(us,)40 b(w)n(e)d(m)n(ust)h(b)r
(e)g(a)n(w)n(are)e(of)i(the)g(limitations)f(of)h(these)-150
2338 y(tec)n(hnologies.)54 b(W)-7 b(e)34 b(b)r(eliev)n(e)g(that)g(w)n
(ebix)f(will)h(b)r(e)g(su\016cien)n(t)g(for)g(dev)n(eloping)e(a)i
(user-friendly)e(exp)r(erience,)j(and)f(scikit)g(will)g(b)r(e)-150
2438 y(su\016cien)n(t)g(for)f(implemen)n(ting)h(the)h(mac)n(hine)e
(learning)g(algorithms)f(w)n(e)i(allo)n(w)f(the)h(user)f(to)h(select)g
(from.)55 b(Ho)n(w)n(ev)n(er,)33 b(there)h(are)-150 2538
y(considerations,)h(suc)n(h)g(as)g(ho)n(w)g(scikit)g(will)h(comm)n
(unicate)e(its)i(results)e(to)i(Ja)n(v)-5 b(aScript,)36
b(that)f(w)n(e)g(m)n(ust)h(dev)n(elop)e(solutions)h(for)-150
2637 y(b)r(efore)e(the)h(mo)r(dule)f(can)g(b)r(e)h(fully)f(functional.)
54 b(A)34 b(more)e(in-depth)i(exploration)e(of)h(these)g(tec)n
(hnologies)f(and)h(the)g(constrain)n(ts)-150 2737 y(they)28
b(ma)n(y)f(imp)r(ose)g(can)g(b)r(e)h(found)g(in)g(our)f(tec)n(hnology)f
(review.)-150 2869 y
SDict begin H.S end
 -150 2869 a -150 2869 a
SDict begin 12 H.A end
 -150 2869
a -150 2869 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.5) cvn /DEST pdfmark
end
 -150 2869 a 100 x Fc(2.5)112 b(Assumptions)39
b(and)f(dep)s(endencies)-150 3122 y Ff(The)28 b(bro)n(wser)d(that)j
(the)g(user)f(is)h(viewing)f(the)h(w)n(eb)f(page)g(with)h(m)n(ust)g(ha)
n(v)n(e)e(Ja)n(v)-5 b(aScript)26 b(enabled.)-150 3255
y
SDict begin H.S end
 -150 3255 a -150 3255 a
SDict begin 12 H.A end
 -150 3255 a -150 3255 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.6) cvn /DEST pdfmark
end
 -150
3255 a 100 x Fc(2.6)112 b(T)-9 b(ec)m(hnical)38 b(Challenges/Issues)
-150 3508 y Ff(W)-7 b(e)30 b(w)n(ould)f(lik)n(e)f(this)i(instructional)
f(to)r(ol)g(to)g(b)r(e)h(hosted)f(online.)42 b(This)29
b(means)g(that)h(w)n(e)e(m)n(ust)i(consider)e(the)i(di\013eren)n(t)f
(bro)n(wsers)-150 3608 y(studen)n(ts)e(ma)n(y)g(use.)36
b(W)-7 b(e)28 b(w)n(an)n(t)e(our)h(to)r(ol)f(to)h(b)r(e)h(compatible)f
(with)g(In)n(ternet)g(Explorer,)f(Go)r(ogle)g(Chrome,)h(and)f(Mozilla)h
(Firefo)n(x.)-150 3707 y(W)-7 b(e)34 b(m)n(ust)g(b)r(e)h(careful)e(in)h
(dev)n(eloping)f(our)g(GUI)h(so)g(that)g(it)g(app)r(ears)f(the)h(same)f
(in)h(eac)n(h)g(of)f(these)h(bro)n(wsers.)54 b(T)-7 b(o)33
b(ensure)h(the)-150 3807 y(app)r(earance)29 b(of)i(the)g(mo)r(dule)g
(will)g(b)r(e)g(iden)n(tical)f(b)r(et)n(w)n(een)h(these)g(three)f
(options,)h(our)f(GUI)h(will)g(b)r(e)g(written)g(in)g(the)g(Ja)n(v)-5
b(aScript)-150 3907 y(library)22 b(w)n(ebix,)h(whic)n(h)g(pro)n(vides)f
(supp)r(ort)h(for)f(these)h(three)g(bro)n(wsers.)33 b(Another)23
b(tec)n(hnical)f(c)n(hallenge)g(w)n(e)h(m)n(ust)g(solv)n(e)f(is)h(allo)
n(wing)-150 4006 y(users)h(to)h(select)g(from)g(a)g(m)n(yriad)f(of)h
(statistical)f(categories)f(and)i(transferring)f(this)h(input)h(to)f
(our)f(mac)n(hine)h(learning)f(submo)r(dule.)-150 4106
y(The)31 b(statistical)g(categories)e(w)n(e)i(will)h(b)r(e)f(including)
h(are)e(individual)h(pla)n(y)n(er)f(statistics)h(suc)n(h)g(as)f(p)r
(oin)n(ts,)i(reb)r(ounds,)g(and)f(assists)-150 4205 y(p)r(er)j(game,)h
(as)e(w)n(ell)h(as)f(team)h(statistics,)i(suc)n(h)d(as)h(record)e
(against)h(their)h(opp)r(onen)n(t)g(and)g(p)r(oin)n(ts,)h(reb)r(ounds,)
g(and)f(assists)f(p)r(er)-150 4305 y(game.)59 b(These)35
b(statistics)g(will)g(b)r(e)h(held)f(in)h(a)e(.csv)h(\014le)h(and)f
(will)g(b)r(e)h(accessed)e(using)g(Python.)60 b(W)-7
b(e)35 b(also)f(m)n(ust)i(b)r(e)f(sure)g(that)-150 4405
y(our)f(mac)n(hine)f(learning)h(submo)r(dule)g(will)h(function)f(prop)r
(erly)g(in)g(eac)n(h)g(of)g(these)g(three)g(bro)n(wsers.)55
b(That)34 b(is,)i(users)e(should)g(b)r(e)-150 4504 y(able)26
b(to)g(select)g(from)g(whic)n(h)g(mac)n(hine)g(learning)g(algorithm)f
(they)h(w)n(an)n(t)g(to)g(use)g(after)g(selecting)g(their)g
(statistical)g(categories)e(and)-150 4604 y(the)30 b(output)h(of)f(suc)
n(h)g(a)g(decision)f(should)h(accurately)f(re\015ect)h(b)r(oth)g(of)g
(these)g(factors.)44 b(W)-7 b(e)30 b(will)g(include)h(a)f(n)n(um)n(b)r
(er)f(of)i(mac)n(hine)-150 4704 y(learning)25 b(algorithms)f(for)i(the)
g(user)f(to)h(c)n(ho)r(ose)f(from,)h(suc)n(h)g(as)f(generalized)f
(linear)i(mo)r(dels,)g(linear)f(and)h(quadratic)f(discriminan)n(t)-150
4803 y(analyses,)j(and)h(supp)r(ort)g(v)n(ector)e(mac)n(hines.)41
b(The)29 b(description)f(for)h(ho)n(w)f(these)h(algorithms)f(are)g
(implemen)n(ted)h(can)g(b)r(e)g(found)h(in)-150 4903
y(the)g(scikit)g(do)r(cumen)n(tation)g([1].)44 b(In)30
b(order)e(to)i(ac)n(hiev)n(e)f(this,)i(w)n(e)e(will)h(use)g(the)g
(Python)g(scikit)g(library)-7 b(,)29 b(whic)n(h)h(is)g(stable)f(for)h
(our)-150 5002 y(purp)r(oses.)p 0 TeXcolorgray 1929 5799
a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 -150 -150 a 83 x Fe(3)135 b(Sp)t(eci\014c)44 b(requiremen)l(ts)
-150 38 y
SDict begin H.S end
 -150 38 a -150 38 a
SDict begin 12 H.A end
 -150 38 a -150 38 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.1) cvn /DEST pdfmark
end
 -150
38 a 93 x Fc(3.1)112 b(F)-9 b(unctional)39 b(Requiremen)m(ts)-150
285 y Ff(1.)c(Users)22 b(start)h(out)g(b)n(y)g(seeing)g(instructions)g
(on)f(ho)n(w)h(to)g(use)g(the)h(to)r(ol)f(presen)n(ted)f(to)h(them)h
(using)f(the)h(Ja)n(v)-5 b(aScript)21 b(library)h(w)n(ebix.)-150
384 y(2.)50 b(Users)31 b(then)i(see)e(a)h(compilation)f(of)h(bask)n
(etball)f(statistics)h(consisting)f(of)h(the)h(categories)d(suc)n(h)h
(as)h(p)r(oin)n(ts,)h(assists,)f(and)g(re-)-150 484 y(b)r(ounds)c(p)r
(er)f(game)g(\(for)g(eac)n(h)g(pla)n(y)n(er)f(and)i(team\))f(and)h
(select)f(whic)n(h)h(statistics)f(they)h(w)n(an)n(t)f(to)g(train)h
(their)f(mo)r(del)h(on.)-150 584 y(3.)40 b(The)29 b(user)f(is)h(ask)n
(ed)f(whic)n(h)g(mac)n(hine)h(learning)e(algorithm)h(out)h(of)g(a)f
(set)h(including)g(sup)r(ervised)f(and)h(unsup)r(ervised)f(learning)
-150 683 y(algorithms)e(w)n(e)h(pro)n(vide)g(that)h(they)g(w)n(an)n(t)e
(to)i(use.)-150 783 y(4.)54 b(The)34 b(statistics)f(are)f(passed)h(to)g
(the)h(corresp)r(onding)e(.mac)n(hine)h(learning)f(algorithm)g(whic)n
(h)i(is)f(computed)h(using)f(scikit.)54 b(5.)-150 882
y(The)28 b(resulting)f(brac)n(k)n(et)f(is)h(generated)g(and)g(presen)n
(ted)g(to)h(the)g(user.)-150 982 y(5.)36 b(The)28 b(user)f(is)h(giv)n
(en)e(an)i(option)f(to)g(create)g(a)g(new)h(brac)n(k)n(et.)-150
1198 y
SDict begin H.S end
 -150 1198 a -150 1198 a
SDict begin 12 H.A end
 -150 1198 a -150 1198
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2) cvn /DEST pdfmark
end
 -150 1198 a 116 x Fc(3.2)112 b(T)-9 b(ec)m(hnical)38
b(Requiremen)m(ts)-150 1467 y Ff(1.)e(Cross-bro)n(wser)21
b(supp)r(ort)k(\(IE,)g(Firefo)n(x,)g(Chrome\))f(for)h(b)r(oth)g(GUI)h
(\(using)f(w)n(ebix\))g(and)g(mac)n(hine)g(learning)f(submo)r(dule)h
(\(using)-150 1567 y(scikit\).)-150 1667 y(2.)36 b(API)28
b(with)g(acceptable)f(lev)n(el)g(of)h(do)r(cumen)n(tation)-150
1882 y
SDict begin H.S end
 -150 1882 a -150 1882 a
SDict begin 12 H.A end
 -150 1882 a -150 1882
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.3) cvn /DEST pdfmark
end
 -150 1882 a 117 x Fc(3.3)112 b(Usabilit)m(y)39 b(Requiremen)m(ts)-150
2152 y Ff(1.)d(The)28 b(system)f(will)h(lo)r(ok)f(and)h(act)f(the)h
(same)f(in)h(all)f(ma)5 b(jor)27 b(bro)n(wsers)e(\(outlined)j(ab)r(o)n
(v)n(e\).)p 0 TeXcolorgray 1929 5799 a(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 -150 -150 a 83 x Fe(4)135 b(App)t(endix)-150 38
y
SDict begin H.S end
 -150 38 a -150 38 a
SDict begin 12 H.A end
 -150 38 a -150 38 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.1) cvn /DEST pdfmark
end
 -150 38 a 93
x Fc(4.1)112 b(Gan)m(tt)38 b(Chart)p 0 TeXcolorgray 0
TeXcolorgray 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 -204.87195 290.23526 0.0 .5 Frame
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
1504 288 a
tx@Dict begin  { 25.609 5.69089 } PutCoor PutBegin  end
 1504 288 a 1371 317 a Ff(W)-7 b(eek)28 b(4)1504
288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69089
8.53633 5.69089 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69089
0.0 5.69089 -204.87195   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 1504 288 a
tx@Dict begin  { 65.4452 5.69089 } PutCoor PutBegin  end
 1504
288 a 1371 317 a Ff(W)-7 b(eek)28 b(5)1504 288 y
tx@Dict begin  PutEnd  end
 1504
288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.5271
8.53633 45.5271 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.5271
0.0 45.5271 -204.87195   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 1504 288 a
tx@Dict begin  { 105.28142 5.69089 } PutCoor PutBegin  end
 1504 288 a 1371 317
a Ff(W)-7 b(eek)28 b(6)1504 288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 85.36331
8.53633 85.36331 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 85.36331
0.0 85.36331 -204.87195   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial
1504 288 a
tx@Dict begin  { 145.11763 5.69089 } PutCoor PutBegin  end
 1504 288 a 1371 317 a Ff(W)-7 b(eek)28 b(7)1504
288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 125.19952
8.53633 125.19952 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 125.19952
0.0 125.19952 -204.87195   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 1504 288 a
tx@Dict begin  { 184.95384 5.69089 } PutCoor PutBegin  end
 1504
288 a 1371 317 a Ff(W)-7 b(eek)28 b(8)1504 288 y
tx@Dict begin  PutEnd  end
 1504
288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 165.03574
8.53633 165.03574 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 165.03574
0.0 165.03574 -204.87195   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 1504 288 a
tx@Dict begin  { 224.79005 5.69089 } PutCoor PutBegin  end
 1504 288 a 1371 317
a Ff(W)-7 b(eek)28 b(9)1504 288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 204.87195
8.53633 204.87195 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 204.87195
0.0 204.87195 -204.87195   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial
1504 288 a
tx@Dict begin  { 264.62627 5.69089 } PutCoor PutBegin  end
 1504 288 a 1350 317 a Ff(W)-7 b(eek)28 b(10)1504
288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 244.70816
8.53633 244.70816 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 244.70816
0.0 244.70816 -204.87195   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 284.54437
8.53633 284.54437 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 284.54437
0.0 284.54437 -204.87195   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 5.69089 -28.45444 284.54437 -5.69089
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 1504 288 a
tx@Dict begin  { 145.11763 -17.07266 } PutCoor PutBegin  end
 1504
288 a 748 309 a Ff(Stat)g(Champs)f(Mac)n(hine)g(Learning)g(F)-7
b(all)27 b(2016)1504 288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 5.69089 -56.90887 85.36331 -34.14532
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 1504 288 a
tx@Dict begin  { -8.53633 -45.5271 } PutCoor PutBegin  end
 1504 288 a 799 317 a Ff(Problem)f(Statemen)n(t)
1504 288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 85.36331 -85.36331 165.03574 -62.59976
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
1504 288 a
tx@Dict begin  { -8.53633 -73.98154 } PutCoor PutBegin  end
 1504 288 a 602 309 a Ff(Requiremen)n(t)h(Do)r(c)h(Signed)
1504 288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 165.03574 -113.81775 204.87195 -91.0542
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
1504 288 a
tx@Dict begin  { -8.53633 -102.43597 } PutCoor PutBegin  end
 1504 288 a 143 317 a Ff(T)-7 b(ec)n(hnical)27
b(Review)h(and)f(Lab)r(or)g(Division)1504 288 y
tx@Dict begin  PutEnd  end
 1504
288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 165.03574 -142.27219 284.54437 -119.50864
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 1504 288
a
tx@Dict begin  { -8.53633 -130.89041 } PutCoor PutBegin  end
 1504 288 a 1181 317 a Ff(Researc)n(h)1504 288 y
tx@Dict begin  PutEnd  end
 1504
288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 204.87195 -170.72662 244.70816 -147.96307
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 1504 288
a
tx@Dict begin  { -8.53633 -159.34485 } PutCoor PutBegin  end
 1504 288 a 860 308 a Ff(Design)g(Do)r(cumen)n(t)1504
288 y
tx@Dict begin  PutEnd  end
 1504 288 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 244.70816 -199.18106 284.54437 -176.41751
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
1504 288 a
tx@Dict begin  { -8.53633 -187.79929 } PutCoor PutBegin  end
 1504 288 a 916 308 a Ff(Progress)e(Rep)r(ort)1504
288 y
tx@Dict begin  PutEnd  end
 1504 288 a 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 -261.78082 409.7439 0.0 .5 Frame
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end


@endspecial 842 2446 a
tx@Dict begin  { 25.609 5.69089 } PutCoor PutBegin  end
 842 2446 a 710 2475 a Ff(W)-7
b(eek)27 b(1)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69089
8.53633 5.69089 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69089
0.0 5.69089 -261.78082   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 842
2446 a
tx@Dict begin  { 65.4452 5.69089 } PutCoor PutBegin  end
 842 2446 a 710 2475 a Ff(W)-7 b(eek)27 b(2)842
2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.5271
8.53633 45.5271 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.5271
0.0 45.5271 -261.78082   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { 105.28142 5.69089 } PutCoor PutBegin  end
 842
2446 a 710 2475 a Ff(W)-7 b(eek)27 b(3)842 2446 y
tx@Dict begin  PutEnd  end
 842
2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 85.36331
8.53633 85.36331 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 85.36331
0.0 85.36331 -261.78082   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { 145.11763 5.69089 } PutCoor PutBegin  end
 842 2446 a 710 2475
a Ff(W)-7 b(eek)27 b(4)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 125.19952
8.53633 125.19952 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 125.19952
0.0 125.19952 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial
842 2446 a
tx@Dict begin  { 184.95384 5.69089 } PutCoor PutBegin  end
 842 2446 a 710 2475 a Ff(W)-7 b(eek)27 b(5)842
2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 165.03574
8.53633 165.03574 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 165.03574
0.0 165.03574 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { 224.79005 5.69089 } PutCoor PutBegin  end
 842
2446 a 710 2475 a Ff(W)-7 b(eek)27 b(6)842 2446 y
tx@Dict begin  PutEnd  end
 842
2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 204.87195
8.53633 204.87195 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 204.87195
0.0 204.87195 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { 264.62627 5.69089 } PutCoor PutBegin  end
 842 2446 a 710 2475
a Ff(W)-7 b(eek)27 b(7)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 244.70816
8.53633 244.70816 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 244.70816
0.0 244.70816 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial
842 2446 a
tx@Dict begin  { 304.46248 5.69089 } PutCoor PutBegin  end
 842 2446 a 710 2475 a Ff(W)-7 b(eek)27 b(8)842
2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 284.54437
8.53633 284.54437 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 284.54437
0.0 284.54437 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { 344.29869 5.69089 } PutCoor PutBegin  end
 842
2446 a 710 2475 a Ff(W)-7 b(eek)27 b(9)842 2446 y
tx@Dict begin  PutEnd  end
 842
2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 324.38058
8.53633 324.38058 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 324.38058
0.0 324.38058 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { 384.1349 5.69089 } PutCoor PutBegin  end
 842 2446 a 689 2475
a Ff(W)-7 b(eek)28 b(10)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 364.2168
8.53633 364.2168 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 364.2168
0.0 364.2168 -261.78082   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 404.05301
8.53633 404.05301 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 404.05301
0.0 404.05301 -261.78082   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 5.69089 -28.45444 404.05301 -5.69089
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 2446 a
tx@Dict begin  { 204.87195 -17.07266 } PutCoor PutBegin  end
 842 2446 a 27 2467 a Ff(Stat)g(Champs)f(Mac)n(hine)g
(Learning)g(Win)n(ter)g(2017)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 5.69089 -56.90887 85.36331 -34.14532
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { -8.53633 -45.5271 } PutCoor PutBegin  end
 842 2446 a -467 2467
a Ff(Setup)h(Database)f(with)h(Relev)-5 b(an)n(t)27 b(Data)842
2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 45.5271 -85.36331 125.19952 -62.59976
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 2446 a
tx@Dict begin  { -8.53633 -73.98154 } PutCoor PutBegin  end
 842 2446 a -264 2467 a Ff(Design)g(F)-7 b(riendly)28
b(User)f(In)n(terface)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 45.5271 -113.81775 165.03574 -91.0542
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { -8.53633 -102.43597 } PutCoor PutBegin  end
 842 2446 a -503 2467
a Ff(Design)g(Algorithm)g(Utilizing)h(Database)842 2446
y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 165.03574 -142.27219 244.70816 -119.50864
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842
2446 a
tx@Dict begin  { -8.53633 -130.89041 } PutCoor PutBegin  end
 842 2446 a -276 2467 a Ff(User)f(In)n(terface)g(with)h(User)g
(Input)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 165.03574 -170.72662 244.70816 -147.96307
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 842 2446 a
tx@Dict begin  { -8.53633 -159.34485 } PutCoor PutBegin  end
 842 2446 a -410 2467 a Ff(Design)f(Algorithm)g
(with)h(User)g(Input)842 2446 y
tx@Dict begin  PutEnd  end
 842 2446 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 244.70816 -199.18106 324.38058 -176.41751
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842 2446 a
tx@Dict begin  { -8.53633 -187.79929 } PutCoor PutBegin  end
 842 2446 a 50 2467
a Ff(In)n(tegrate)e(The)i(Pro)5 b(ject)842 2446 y
tx@Dict begin  PutEnd  end
 842
2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 284.54437 -227.6355 364.2168 -204.87195
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842 2446
a
tx@Dict begin  { -8.53633 -216.25372 } PutCoor PutBegin  end
 842 2446 a 577 2466 a Ff(T)-7 b(esting)842 2446 y
tx@Dict begin  PutEnd  end
 842
2446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 324.38058 -256.08994 404.05301 -233.32639
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842 2446
a
tx@Dict begin  { -8.53633 -244.70816 } PutCoor PutBegin  end
 842 2446 a 255 2466 a Ff(Progress)24 b(Rep)r(ort)842
2446 y
tx@Dict begin  PutEnd  end
 842 2446 a 0 TeXcolorgray 1929 5799 a Ff(6)p 0
TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 0.0 -176.41751 409.7439 0.0 .5 Frame
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial 842
-56 a
tx@Dict begin  { 25.609 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27 a Ff(W)-7 b(eek)27 b(1)842 -56
y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69089
8.53633 5.69089 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 5.69089
0.0 5.69089 -176.41751   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 65.4452 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27
a Ff(W)-7 b(eek)27 b(2)842 -56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.5271
8.53633 45.5271 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 45.5271
0.0 45.5271 -176.41751   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { 105.28142 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27 a Ff(W)-7 b(eek)27 b(3)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 85.36331
8.53633 85.36331 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 85.36331
0.0 85.36331 -176.41751   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 145.11763 5.69089 } PutCoor PutBegin  end
 842
-56 a 710 -27 a Ff(W)-7 b(eek)27 b(4)842 -56 y
tx@Dict begin  PutEnd  end
 842 -56
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 125.19952
8.53633 125.19952 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 125.19952
0.0 125.19952 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 184.95384 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27
a Ff(W)-7 b(eek)27 b(5)842 -56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 165.03574
8.53633 165.03574 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 165.03574
0.0 165.03574 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { 224.79005 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27 a Ff(W)-7 b(eek)27 b(6)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 204.87195
8.53633 204.87195 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 204.87195
0.0 204.87195 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 264.62627 5.69089 } PutCoor PutBegin  end
 842
-56 a 710 -27 a Ff(W)-7 b(eek)27 b(7)842 -56 y
tx@Dict begin  PutEnd  end
 842 -56
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 244.70816
8.53633 244.70816 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 244.70816
0.0 244.70816 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 304.46248 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27
a Ff(W)-7 b(eek)27 b(8)842 -56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 284.54437
8.53633 284.54437 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 284.54437
0.0 284.54437 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { 344.29869 5.69089 } PutCoor PutBegin  end
 842 -56 a 710 -27 a Ff(W)-7 b(eek)27 b(9)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 324.38058
8.53633 324.38058 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 324.38058
0.0 324.38058 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 384.1349 5.69089 } PutCoor PutBegin  end
 842
-56 a 689 -27 a Ff(W)-7 b(eek)28 b(10)842 -56 y
tx@Dict begin  PutEnd  end
 842 -56
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 364.2168
8.53633 364.2168 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 364.2168
0.0 364.2168 -176.41751   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add 
DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 404.05301
8.53633 404.05301 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 404.05301
0.0 404.05301 -176.41751   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0
add  DotLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 5.69089 -28.45444 404.05301 -5.69089
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 842 -56 a
tx@Dict begin  { 204.87195 -17.07266 } PutCoor PutBegin  end
 842 -56 a 36 -35 a
Ff(Stat)g(Champs)f(Mac)n(hine)h(Learning)e(Spring)h(2017)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 5.69089 -56.90887 85.36331 -34.14532
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { -8.53633 -45.5271 } PutCoor PutBegin  end
 842 -56 a 326 -27 a Ff(Initial)h(Release)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 85.36331 -85.36331 165.03574 -62.59976
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { -8.53633 -73.98154 } PutCoor PutBegin  end
 842 -56 a 308 -35 a Ff(Design)f(P)n(osters)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 165.03574 -113.81775 324.38058 -91.0542
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { -8.53633 -102.43597 } PutCoor PutBegin  end
 842 -56 a 22 -35 a Ff(Prepare)f(for)h(Presen)n(ting)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 204.87195 -142.27219 324.38058 -119.50864
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { -8.53633 -130.89041 } PutCoor PutBegin  end
 842 -56 a 374 -35 a Ff(Final)g(Rep)r(ort)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   0. true 324.38058 -170.72662 364.2168 -147.96307
.5 Frame  gsave 0 0 1 0  setcmykcolor  1. .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
842 -56 a
tx@Dict begin  { -8.53633 -159.34485 } PutCoor PutBegin  end
 842 -56 a 194 -35 a Ff(Engineering)f(Exp)r(o)842
-56 y
tx@Dict begin  PutEnd  end
 842 -56 a 0 TeXcolorgray 1929 5799 a Ff(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 -150 -150 a 83 x Fe(5)135 b(Agreemen)l(t)p -150
1396 3071 4 v -150 1495 a Ff(Clien)n(t)p -150 2304 V
-150 2403 a(Dev)n(elop)r(er)p -150 3211 V -150 3311 a(Dev)n(elop)r(er)p
-150 4119 V -150 4219 a(Dev)n(elop)r(er)p 0 TeXcolorgray
1929 5799 a(8)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

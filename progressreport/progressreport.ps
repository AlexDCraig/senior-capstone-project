%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: progressreport.dvi
%%CreationDate: Tue Dec  6 21:33:00 2016
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMBX12 CMBX10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter progressreport.dvi -o
%+ progressreport.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.12.06:2133
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08A430B643B6ED36DCAA09B41
FEFDB90E10C8A8B74EB358437D0CEBB9E03109C593BAC09CA996278246E7CA38
4F311F23DC5A7F7DB374E0E3D066C874EEE28CFA47054DC41A389203BFB3D601
BC9A4817F8DAC250A102E7404CA135B33DD66F8FF40D106F52081FBA3E79CE29
FCA5C502B38C86D8D507AEF30436472D2381DEA09B8B3BCB109BCD72332A9483
E61ECF0F89A85BC37B8C10FF3F7C0A84FB8D0F4A7898D3F8B06202FF8DCD698B
56544751347E9AA35209B18D3D416E5E034E36D9C5FC0B33B7AA0D46F3A3F925
7FCAD9D6B9E25671F9AC599A40C37B2439C06FDFDFB3E78DCE515BE82B5BE1AD
2F205E8249407179559DF39CF29120C4B92C5283B609D0445B30F3AC71A1A678
8F43D8B12D7FD722606252CF4902733EA4B25243056CA88363F0619D0DF82D7C
075E0B4F451B1EBE025DED1E6DC18674717E87E6481781DB35A9E67586B214BF
382A6F293A73DC12DE90730DADE203779321EA8DBDE8F9A0298BBC09FE8D4264
EE67FA3352F3B24ED803DEA02CA257258B888E07716B859CAEBEE79337B27301
D79C3C10CF15B2F4EBD97CBF2C82AE6D4C8E42B121101D1D84205D9D3A7337CA
39E3F225849F877F634D1A1A1238E330C751521C5EA39CBCF536F5E01DD8B1C2
68AD6757104CFDD14858F496520EB6A0A6814C4D7B9E3A75FBA8C4651562BC85
93794D149695EC79A253F5CF45893727D2486D426017EB0A9A8507319EB61A3B
E7A33644BB4065626085A9C79912B4A78F6A30D1FFCE3CE490E22F0C2721B262
04BBFE306EE0928A04BEAD656520C79ECC3244ECCF2F6F8CC93E65CECBD6B28D
4EC93F138485E00EED00C63D1FE401132845534171565B2AB79D1B1E00C610A4
E4C7EFB58D48CCF43A79AFE1D9A4244B7CFB18FB8DACABC361DECF74422F86C9
C8FF36224890D56F5E93A08414E5CEAD552FD7BB334EEB64266070C465E298A0
70DA368CDAB6A077B2E8A228EE2BB88DC33630A7D06CDC36B7ACBBA7A3BD426B
237899908E75279129F694BF75F0A8ED7C58BB19EDC1DEF04BBAADF4FF096FDF
3BDA1B888A1DFD87CAE72BC93B0E7FB86A86849A512E3D230010E82154927E42
FB1DF7342C2ABC0C7DBE9C20994D21D9B4EAEAF8D4A0C8804C0D0B0A15FF10BB
1B7F22AC8365AE63A2C5D27E327C9C3C265872267A6359988632393C45E054F7
AF0D90A257789DFB1A0AEF1418BD3A02B79AC49800AC90EB0C61DE6372758BD8
A8163E241E244277F95007B9033B3DF54BB997A21BC71CAFB27AC866D771AB14
6EAAFD50D8F80D5F1A28CD051A6AC3120C1731FF1093C7930F42178A40DF57DF
26BE3E73D480A823C2866945E4698148F320753F41F1BCBC2EC72B97AF111291
78A2A844F26EAA7E2A441C898D799732ED80B2F7EB6BCD42796DE5996763C0AD
0D5216BC15C9126AC60D1E91ADDCC72CF11D41D8A61B82AE0DCA63939EB3685C
8BA15918D5B9AF57CDE1DD0D27E79CACADF54FEE205C52ED98DF37D577DBCF93
00D65A7503D170C74F5631B52EB7082B53ED798922A414FAA35D69DBCC3481FC
BEC0D0EA0FC19029C9A94BD14AD3711C4C2A9AF2F0FA7E7BE2D2AF666ED32435
E426863901425381FE76B31AB0E0721BF6B1F596A270EA966F767E945BACFE16
8AF78D069DACCB5A28DDB4E46E14D733E38FEECC878819D94E551C6C16859249
7704531C72DDFBD7A1DF99A049A504DF88A3841FDD45ABAEBC0BAF76B6863967
A75C1DFDEEFD7310E6275714324776134B8178D77536771AB61DE979E52B9B4D
AA0494CB67979FDA9581F70BE048990A8F0F635891F9FCCD378A174D7467DCFC
5020BCC60AB8CB6FDA0EB326C1C6605CE84519B2CB485E3E1FEC0AD246B8D99E
7E301CCBA48F461682EC243ED1D1EB30F528B2B85F004D7B3C0AC839E39FD4B3
371F7A91B4F74898E23848E2349421A8E81086B71B3517C855971A2820ABF99D
D90A54EF761D8F72517307C85145CBBBEC23FED899E87846FE27987DCD8AD458
2C00596B98A5A231E45DD71302B3F6CB6A06751CBD04A161EAEE20445D4E9018
61BE0EAD686639BEDEF2EF6A095110C4826DB957BE79E3467C5206684A3A4C4B
F1B5EB441988B82DC439CA33DCD8A4798D1DFAB976B89B1F5FEDE7DF82CCCB9A
2A66FA6EBA648E9338F24C82E9BA16C7C409CD966691FAC9F0223375AE54767C
18DD34E81EF9F5150EEC73E70CBDBEED0FA21CBF83C96577FF33F8F34B8029C4
8F38D047E5BDD365318B5CB51DC072129F051EDB1E05A78BBA4E1E8C6A8E885F
17243AC1F61DF71CBB6A155DD7616DB7A4FB7F4ADAB4E94B2BFEC42B897C7A9C
E0513BF5778AB06EC5C31FF1592DB5CEDE9D5B6CBBC8664ADBCF47E892C6F744
96A82CECEF667240023041BABD4FE20DA62FA7F1EFAB5BD106E6D3CA4FC65B6C
13874F86F5E214127C5DCAE3D3A900C0B919D86B0ADBD88DFBE254A3310A57FA
6EA307093826914551CFF397D12EF032DE18384BF863EAEFD0797B21371DFB49
F2DBE1B1CB9AC98305246F9B3362F0B8D9447A400C8FBBCF8CD2FB35F191603B
D74EE4AFD333FEFCEB1DAEEF1448E07F44045FB1668AA03233164881B5F1020A
A853FFC91918C9A94C5FDA65201F1CA5D741F003B69FD9780EADFFDECC8894D7
FA2827FE6656D8843C5CCCBD457B524BA37B6A2557D4B13A63679D48677EFA85
A12ED8AC63770470C0277C0B8FDFE82085A3E7206CC6E0322AD914573DD18497
94EC22B6E46ADA33775E20B242C5FB77F9BF45D9F55B451B323C18FEDADD88DB
4AC8027A146A17083F588786F66DF0CDFE3FB2CA842A7EF3551FECA2677D4265
3CB583215774792B9E1B2935583B42B6256DF45E32153FBC349E3D2F891C4B9E
84C0ABB3116BE6BC9049AFD79C0F06B04842685815215E6CF6113F7AD307059D
E17EEFF34F6A1E2F3D3C9A3A1EED0BDAF96773D2F86DAF0F1CDB985095A27330
BDFC5D9CA324C7E9F7860A9E9775C472D796CA9EDC67A2401B4123EDA21CD48D
9C00CA56067AF88D6DDDAC10724CD92DDF74DB92C43650FC14248A9B082E1608
31A229223AEC131090784E095257148F49D0ED9F8ED1636998594040C0DD209A
5B96DC62DC2BF94839003B64C31E3B6A1EE2BCB41BED6BB1360816A896F694A7
0FEC68DA75A3293189784AC89B52A40194BF0BDC6CB1A25DA1106DC4BB489A7D
2484D59513AF4230DC99797BBC1B6F2C674607DF02D4C8CD5CB11F491E87ABA1
FB4164229D40729F45C10E40EEA816C25F0D23EC94F936A0713CAA80F20029B8
E6D1D8DCD292CD926634FEB9C9D2A72CD5A9EACEECB7E1E18BDDFD123D8D207F
715777B83D44B681900DE995ADD5EE23DEA1B0430BB45CD80EC2D6E11BF95F2A
67090FAF5507B0698BE0A6F1D24E746AFBD1582336E7D3B0D515EDF3BBCA99C3
66975A45F7ACF842B8DBE44C6D2CE9490274CE37ECD1C1C19A20A2EF429EB2FC
1317C438F5D90A98AB9B474DA6769825DAB080550F56C19C403E4D48C60FB3CB
D3FA5C4CF50AC296D49C8B0556C3E4BFB1D1F9EE5090549F21FC0065AF2E3D7A
4314E61B6A25E649AAE33976F3D0D5E82F9FA7A44F03BC695B46160F92DE7CE1
29E36141C58A47BB9C2D4D01E18C0718BABFF453A25DF94F6BD4C18D53DECF60
C58829C30FE89A85A76E98F797D7A4575186D96E436E1F14AA19876D2CB1D0F0
46E2FFAD2555D843E44D5103275EA2B1BFF3A3EC66725F0D324F7853A3EA7037
B38EC037142F92B50C9698034E694479680EEDB7B03148FA593B2166DF30C906
27C35836EBB9DD2E5AA1861C2799307430D24D5F57752BA6B55CAE238D9869B7
6A55C192869CE6AA4C8D4CBD1603E6A15EFDB18D279D752581D3B73412724B8B
6C268C8A14AD8B7C8BD070B166BA80AB93D1614A5D915C72B1597CA9CAAF512E
9ED74372F6F5C179034026612531B6A00E78B3708509F561ABA1936CDA1FFD86
5A8A207AFB4FCF502B4F78095C802E9A4B68FEE98982CA02468D8E8A3767162D
DFD9DF855A94F1ACB5A3FDAFADD9723DBF7BA36F7057899B7C54C46465F7DF83
BE97D46BE9DF14F6CCBF23F8B8D413A8296669B1AC6FBCD686688C1504091BBF
578777BB902A70DD2FE7B54546FA71DA180F923729C5995CC0BDB30619D63843
70E7392B774AC1382F85CD54E062D833256D41326ED76FCB0ADF1B4C91D9D4CF
1799A36E4F0AD12C3B049EAC50C8056EC838751885EC98140DE1931A391DD278
6B0BF1DB1E1D862F64EF831E66C8C5A6C5BDC4F1B028F1D2699C4E45911A2FA1
6D81BEB81A0631A51306FB47F2F2F16B6B70292393ECD2D7C1874186448C9863
1DA2FE3378985CEDB22014A7E9616E650C5FB54C5FABE0A0B732E94B0423923C
46842E4A5C1E51FA68C33897B38A1A68B01925736CAA692CA458CC98D64CBFAB
490619B0177E46841206FA31498CAAB64E887D2AABFBABDEEE0C02809976502E
3961AAF973165EC8BB37F01FFD174EF81F35F35A7F6267B5CD839731F464B671
BA113712BBAD2BB31D114300D154ED7787D7B744586FCCFEA1E21454F999F2C9
F7F2314F65DE320318DE34F203EAD86ED1791F457DC66766D82667BF5043532E
5D7EDB320A83C1D51FF66B523D17BD04FB99F7ED677674E7B615DF31A388ADC0
0D9B4F96229170E03C6535C3042539D9F03E0C1158410D72A2449A8CF351D242
8CCF6D08D0B84EB0F5A12ADD6200D8B928638A20EA68E54C6FCA6609EBAEF04B
A23436788919BD261F511448D4591A687AAD5C66914F75D44BE5FE4979880551
5BB805D7887D44A7FC606D48F5383F0A2071E52AD6F4873652A9729B8444E981
3D6EEDCCF4DC9616EF17D6CD7A3F65550EC8E252B42E5CAC73DABD568F81AD20
AF1BB34E4787F06266A4A932E179FC1DCB67FD164EF3AF229C3F6ABE3A20A6B7
9EF95D0F291043145A4E5DDD8CCBE7E9E190AA801D2AE648D9D7D5355AE570BD
DCE3723FFBCDC2066E928F28091F446C120652131F09E10E8FC42B8573180D3B
F220294E575B4BD0B0AE4518A4786D57823E81240C345B90FC6F53D4DB6410E5
0393C21792C481A782FC1C49622D9C26B5D09214394554844C5324DA626D118C
53B88340476B24B75516610DE7D45709E7F514721FFE218E5EFE6FDC48E16545
EE36C7D8B11BE8E46C31DBE059FFFF98DF78E987D42A84020A2D5913F3C7365B
9455C13098BEC9E1C864CB4A2B050A062DB097DB815D50D2A614D83E14A71A17
7D1E6E23FE226268B53AABDEBCDA646180C2595DDAA5611286F418FED1494D5F
21EA143460D673D3ADB01AAF704F5A66C2A27DD886013317F2DBF39D7D5C7C73
1A8A85A607FCCEA3F8895E4E6808E5AFB2D7B8EA1CFC4A17F5B140CF655BC4E4
1C31E7F82EA99CCF246E8EF26366F41D1AD2B0F090248356138712BCFF424225
617B0781F294E73E1F9E3384AB75F4CCBE8C36289BCA06797221D94774689E3D
755D5C613FA3AFF8823171EC4F91B640D9BE7AA331388F92F5DC0ADC731883DC
E8B3970FB78D78D3D7CA3D84E19AD61C0301BA8C989EC9BF42AE05014157696D
9A96959258F614FBCE24D322BEE9B833E2574541F0134AFE2D4E47B5A1FE32BB
620F5448F9F7AE77214A234E702AC0486AD82A0100D3ED06C0E30127A5DA5F63
74189171C45DF85DF6D78E8A452D8C4BCA134005AEE4183D9801710F60689847
5864734205E9BEF44472E9BA841F9E223CCA8847931A37D634363A2F50B2B2B8
5F38F5EFF96C763F51BB6CA50EFBAD073AA6B2D3C6868EE34B91BADFF252DE72
A51648790415DBBC8E681AB8F5A84E19544BFA162061CF12940C97B02463DA77
72AA0DC4E408E388AC5021C1AFD6D959E9D8F58A718A9E039B87227931724305
AEA50074BD131038D85284A88C2EC1A969F6DF2E124C988E8C2B766F4E95862D
D0BB81D1E46D87CC2FC7005A3D8D5D6EC1FB0E270BDB5F17A10534BF4B87573C
C8750C2AAACACC150E43D9151BD59B9035F214E0F8E56A3DA1593A1D1A45ACA7
953A4E65FEB95D5CFB6A61C2312534680EC1FCBC65B681C2694D3D4F940CE75F
3C36DC179A612CBC0926D567F2C58B80527B95CB1A22285CD044CE9CA8EEF00D
F0CC6E1919952F89D1156776B4AEF3C6BFCEBEDBD44D1643FAF41DF629F8ED83
165F42704B3F75B54FA18F30C6B86AD9F9859A769A82711C1D90C99115E6B253
B35B2BE35A78D23834BA00CD916ED93822CB0B12828A1B64F3BC554B4D8C5929
F8DCC403317F92EF2B09EB064B24BC3F1B86C52D95A2F644921BDD0C23321C93
E3C392720015A445562995CD8926756589CE7E295528525C00AC9971E2E34617
1058EC3082A2A109C6A1FD18569C2F75FC659B975D1310C454CFA582C3A63401
4DC60336380F791C0E6CCD5476BD953175129835F0F5CE2594AA8C0D41D218DF
19C1FB48739AF13B4BAF75A41282DBEDF7DEDF82209CE0B694131B27FC6BA8E0
64F6AEF18F37019825227FD74DA976B14613DE0B5D9A2913B2489C4BD16F23E8
166FAF17106FAD4AAF998BFC42B4D352287F6CDFF4CBB529E9C44BC35469EFB9
85058CEC65FE67975D1E4F460663EB8F4CDBC20CD6F2C310010987D60A5D24E7
30AA2EDFE362E11AC608F79E84A9FB401E48F3EEB2B9C290416B43B16B8B2691
89CD10FDB0070E0B21A3FCB66A26AA7DECBB78ACBFC6693783329B690B8BB52D
35AE794AD4DFED38E628B7D6DA74660E6323B9B66F790181DE91543847B94531
7FC16084CB815FCB6203A86DF39DF6D827742B873BB955BC5D2A405E422E5F93
17622B909FD0B1A7C243C60AC41E5E2ADB7E4F14073D86C201DC898E7669D078
1B054557A95EF20CB60F9FC2F2BE81CE1F3BA93A1A632E1D35DABCB3701F6FB0
A3E28EBA2D3B88B585A2DEB0501E9201F71E3CF13B9A125E7B0C18B77CE9F3FE
DCDABA9CDAA0D6579C899E06A2A06C53C76E9661B1B5A3A75656B8A6E5FF5FDF
063B599BF1EBBF2C78EFDDB10E03B2574B176B176B7337899D02D55F3EA6B637
3B9C138A28585C9C87393684E2E853A519585C34E772CB65152B0B636D1C7800
FA7C9380CBE7C6A93CBB77B32ADFFA22292415C5CAF56E1C582F1DE3D1BD9D8F
47812C8582A014E736682ABB7C8C12D41D317C3B87AA1C02391C363FA6B332A9
CCCDD6623EF484AD8955FBC699FC847FA6E337927617D52C571B1A70045F533A
2484E187173CC7EC4DC27DC96262CE748B335D8C79BC8D4D6B2480E669CF90FE
760771F369A11C471107C4E0B514D7ABD784A9C363146A5ADE435170FA35D3E2
24ACF143D78A6821D6A47AEEF852E50E2E03B1D59EB1867232747B4391177B97
B1DF1FDE2D2E1EA7343B0978024910AAA204DC720F76882C50EDA9AB42DCE143
1D2C6C46D1B1DDDBBEF67B788F23E4D30C0FC8EF9EB1549238DB4B3FCB98D27A
28B4141984932EC26DBB9B6C85B20C4CACC1EDE5B4C6F1492044739D16D5916F
4C5BD5D0E354F294F330BBF47AE8F395519DC7593B1D07CEC9DDFB7453C0ABE2
FE96902D7B3BE49E83714399D024784E5885DE1528BA79CC8BCF32A157601CDB
801CE983D34FFE23D940F06B44E1601B26F496C0C332A009D7C515B686585FA5
96B06496518FECC74BE5ECA62487D7ADF49915CB8DB6E1E47CDC07015CB5B346
20CEC4B422D391650ED33841C58CC0CB4ED8A9075B7454148645230521A84EFF
1BFBD88277A8A97D8AD953B51EC931E33D2F726518EB629EB0EB6421D8C81FE2
6C0758036687046B022EBB18D122541BFE7CFFAF7D824F2F0F28D9AD5F3C569D
CB8A9A0D5E29DB01E534343980D51CDD35244AEB2F515E8637F989D5309D4425
D602834FE08BF28C8F471DE09525D5FCE8CDB9D73CEDD269CA624414BF7F1CF1
A5478286735FEA24207EDD3C5BD1BA73C6BC0C2BB2E0294FECB2E1D92CD0E3D9
17A41B1C79002A205019007FAF9EA132080494333BE4FA131B0B980E21B1AF93
7B9151387D13A911A9077AA1B163FB4662CFEB0F9A1213EC3245ED4CC26DC5E3
EA7321E6D0F4750690AB2AFFB530EF36BBF0EAD5A92BD2761EEBF66AC725AE95
3F30185756BBAAC42758F8E50726517CF45F79EC30FDDEFCE677EED021C1B9C8
ED1887F358D0DF1C48CBEC829C9F4392C878432CBC6885EAEAE9B92465AEA179
ECE712A96211D929183B92E05BAD15166B4B300030B67EB9D2E5799BBDE79EE7
6E3599FFED0FC40D16F4274E8DB472134F3354D2032A297D7320EDD2F17139B6
059B39E7373CEF490E9959FDE16637B3CB25ECEC619C4DDEE466FD0B1B9E26E8
4BB5FB3479D61EC4BEC8C2CA489BAB406864E019A67C3AED197F4B8AC63B614D
F56FC43F95B1B1DC6EBCD6F5DDB0F3BF503892038063812201358CBE41B2329A
59DCE810B95C9FE406C4A4206D6189924B71B7B3653A88CFDCE5608140CB9962
B4B2959E6FF67629463F2B50C4E9110AE93865449381FD88E0B8FD56CA724B06
2B9AF15BFEF8570FB8CCAE9F237140EBC33C7894EC1501EEAA6A2A506EA866D8
D86933990E5A00F399BF6A280DF4F930CC2A193533FF0479B8BC4F9B931847DF
53B2E033C6986EF5ED38115EFACEAB5E6605ACE3EB6EC21BE1A05D1004011174
B34FF9BCA8B59D8B8FBC8B2E4F2E36EFB822B48019E5421E0098CF092A4A47D7
1FE7076DB1ED0B74F84631EBDED7CA5E189D67608CD07092A0FDEB5A318F539D
C551CAC298DE4A667EDC4E523D4F72B6B15FB6B3B99432C94E06074E165CE64F
7CD1AF33C5950400367453555514EB9BE7DF4CA368B927E5AC717F864A5F242A
EF5880BE8A0C9DC88AEB5D5B6A6DAAB0D121E6793B532DB1A5DC55175D718414
C0334FCD92B35C73663372CCA5042A8139F24A2E5C073D5222CE1B6EF3FDB9A4
2290AB415479D47441FEC252FD3400EBFF84E2C4E4BD17C9D158C7C3EB51D13E
3E911BA75674926F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 68 /D put
dup 73 /I put
dup 80 /P put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EED3A0353A7
E13321F7E480062A971611704D93A866C29AE2DEE5EA872F5F35A2686E37695C
ECBC6F6F2CE5F46491EE865739B0D8FEA41E1070870F50E2EEC5F10542A071E1
A861CC30A769DAA4DDF8CC0CCBACF1FAF00FAF91D446CE54AC20A4B455D06578
4E93EF4D2B88C75F569346AC2B878782D12F909513434C6DF848316629CA47FF
9B07038337966F12D38AAF6ED045BF1102FB39275FF7D8D7983121C2134E34FE
F1618EDF8B9BB56654411A74A23840473DFBA36E04D180892D9E1AD5D37BACDB
CEE97B97156C9B60321F42CEB4203F46DD2D9DAF8F90CF4F43A855888DF002F8
825A21D0D4869F02FA1C99FEE1A786CE64B33ECCA62C7535209C546D9201261A
A71B05F2E629B76DFB0EAE94203BF88AFA8E328CF74D77049949C2CBDD9B71DD
F800A4D407601BB632B33F1E4AA97827F837F97419F753FF9C5850EE37E59A4A
3B90EE6AD37F3D078B6D4120137695A8BE5DEC8383E556D1067F2C6D1A2CA6C8
4ACED9E02D9E46CB2FE2A6C3F956DD96560A04D6A74092A710A9A82AF7E4210E
EE6AC5E5F8D27EE4E0FF266F35E74C0043F6C8C98511EC1E2A09B130BCFF5A90
55C76EF4ED2A397E30973F13C9C94E3E83A75451B152FD3D6926FC9A607428F7
1FD761E209A9DA1A144B6457B085F2B9EC116092166C90766F3475C377D3C5C7
267BEFE151C52A60427176D702F257FAF929178B7AACAE1D371228606B58787E
BCCA96D797EF45C542582B6F56F890EC5EE8DD9D075383DC1F9136BEFBB6F17E
8DE96E921502FB19F0C21F0A4BE48F86B39BA9AAE341296170B648CC5C9EC028
8EF5BBB0507D12F94D4695BDEC556DF7A96D1319C3784A5EBE427F4C91C807F1
A3B23B0DD937C0CBCED5F1639C9F77173E5FBD8530DC9CDE44DC931AE06231CE
EC5E570B17EFF49A79EEE4953A33DB4595E959F4D0FDF9354CA4D7DA345AEF91
60BBA6B3BA13F0C6568FF993AD4D104C87151EEC9CB06B3771F1B019073774C0
AA585B801BF7518806C6D29515CFE6093AC76A4EAC40AED109E1742F8062B713
AB7283F96D066F4EEC9B8EF6B5D46466AE0CCF90E8EE302C1F09C0E1A70D443B
F5ED789BB63AD9154F5B38347611DFE63DA3C7C87E930FA06A0CF1DBB3548265
7B0F77EE9CED4DCF149C115F30CDD1766415DD2ED563D00E3B0DF4CED22B0A55
BD56905DEEBE92A863F3881C427F44F5880903CB9E1666CD08C7CF1BE1D08001
8F7686824CD1BA7B7C1F1013CA0947C4237C2A08B599B5F0EB05D67213916678
E52A015C7D9C5BE61D2BB48C4BFE31715A87199138664F3554E612F84FB95130
181253E98E8EE14CC56365BE39557E1B110914AAC779512C404ED48FF12E8612
25C2C7A7603A6B64AF3CBBD57FB065E3B9EE81226C8B9338C33095551EE832F9
CE01C9196A7B32A5C38885C1042A6C201B874841B2E405E8C77151BFFFD91E36
4FFBA48BB844B5623950E6053B0068BC64EAFD9F7BEB8C466E8E719080385320
84F98A652209AD2029C2E09331A53020F69669CFD455CCAD3489144C413B9AB4
5604C203FE14C20C24D1ADD91D8AE0F10208B219F8C4B9985F1D7F03B1100C2A
493206F74E70DB07312CD923B639AE482EE860F95A595F957EB234F4D0FD18A5
7BB0D6E3DD6C027786DF3E4D7890DF8420A58999CFDC324F32E35A123C76EDB1
FC49CDBF35D892A9A24EB9CCA7DD509D233ECD96FFB2E49F5DEDBD72973EEDD3
D9CEF5B4636A0FC4A6D3663AFF2DE36A2249BFD2DF460161D3EA5C1FD23F4C83
EAF7D39C885971AD4CE505CA2AAF3D6A74D86070E0D2FD12A6FDD6D15A5E4B14
C748340694B63CE8590A7BEBAF27F0BFCC599CFA4C7F029BE84924BA5FFAEA9F
922A707E00F2E580F2DCB490C383D7102EE1EF1ADE94948EBD5C4E4951B797C0
0CB5BE5CE677C4ABDB326584908A78EC32E9AC0EDD494087DB63B1BC81FEFA00
A9BB72D7EDDFDF0A0993B8D52A6546D6920F6FF3456A08BEA0FFDCF8A988B8D3
1A88C209CE80023B65C830687CDA59FAF95451251659F0BE353CFFA973D6A218
C80AF18EDFB5A65D17CB5D68EF4B84486338388BDE9180A36895C3013F4D62EB
5F60AD32CE002FE7F15CBA8F8D641E848C5E17ED5B682696A02EA21A9C6FC7C1
CF767FB3E937DAEFD0B9BEABBFC82C68A2D81653D8E85BA67A363D7AB1E58F9B
4B93AEDD6F4DEA9B820518E3C7D60E56BFF9B871C79ED8DEEC103B60E9FD0DFD
4215AEF4D8BB30B8676DDD5DF2729533BB242686673DA5F56F201FF29936422A
D3B64EB4749884F96854C277C63649A9845BBFD1C4101A6D08A31D0797C7D0DF
1D6D88ADC4FF697C5CCAEC19B66F88C2E08549559AE4BEE134388BB171D09B00
A1FFA362AD33E97A907B13ED4B7D58A450EB9F0E8D0A7E8FD29F50BEC1BD11A7
9BF0A089884DF1DBD9FD4FD910C8D37E7BDCC2C074C2F322737FBDE1BE1316F6
93BFCD7FD07158CECA1F10A5D75C8B02FB448BB57E50FF3ACCB88E5E52DDE225
AA8680441FD08274D76689E8B7E0F69C4066F6B8E475020889E0D5E67D527D7D
4EC0667594DC6B7725C4CB3892B6CE2AC2CC20FA413E3B9BDA026E7BB80DC51D
BB9A044D0074F36E77BA376B979CA019CC99924A7A21D06DA3B4E2487E6B1575
2536D5DBC09D3E491A69100F01EC452CCF3FC9B38D25186E3050672240E226CD
56C2AF33EE461E3566CEE41D90049CAAEAAA90A06F6EA9A403A9B9298CFF27A7
04BC1BFDF7C9674D5BE57064C5FC82F234867DB4F953D640BC988A8F5515A906
9F188864EF3F10758EB907D0A58EA69284C30E3CF5F3A1A7E4ED58C7068D6979
51AF5F285BE5DF16A4104EF136CAA29EB9AD256028372BBA438A646CAB1835AB
23886B35BADED159565AB59032D1AF185101D1A22010EE1F89BB59774749F5C9
7C881AEF49DDBF57F3FCC33FE7E53D58528A4F9DB873C77FCBE8A101F5941B67
F51336215F6F4E163637426C978E83A5B697BC74C6C7AF17CB90436756F71F55
F4A0E093984C8BCF5FC5E5F768632BFAEF6AA9F7F2197662DC1DB088D73B8227
EB31144E2AC705BF1EE77A400CAE6CD101999D1C7F4BCC4FDBE732ED65A1FB82
E992EF8A57D7E24BFF8FB78301629E216173C86C5E2EE398F051C575C45D6CF2
A1B55D4FE9E61DA3DDA702D9A28E69153666AAA58BB33FB11C0BC8D705559428
AF4A84426624BCC707524CEB8AA22857F1D6B3C6D37040244D73BCAACE46938F
E6CDC874F79FAC8DAB8DFA398B9631E563415830DC94140A88638933A3CCF4B2
A1DEDC351EEA4F7A0164C5A1F030379C70C3A0D8B94FB1AFAA93E73F575D80E2
952254AB0CDBCF9FBE1BB1559C2686EA83363F41FCF733E4B78A2FAAB26D4D86
0B9F0C0D69C95C2C3C060E9C66F182BD89D909CCC244C5B9BD9720D2F1FF8088
FDF0D9318279772937559B08F4E29B22B39054D76210E895FDC7242CFF3F2C35
33680ABAEAAD15FCC079A57D003DA09ADB4313BE0CF7CE900AB5E1A92BA7A439
E374EE8AE483A6658893974624526E48518AD173C081C6A71A2798B8A3D1DC52
43452AF8E1D139F0E04978C47D922CE3D348C1024708555E2839DE7FD6708B66
23A1A4FEEBC24975914799D630C783E9B73AD0AC1BC832A3DEC986307F0649E6
30C3EA3461DFC85A351B3CE94C3709E6F31498A17AC4A3A5FAF2A96B8AC894D3
DE5A07FDA48C11F458B0B34403AB8A496FA8FCD2FEA0ABC66AFBD76B11E96B16
CD292B4FF0642DE50166592D79F37A6B84C4FF4B39FE18141E92CEA05BE7A28C
AFFEE0364B2019F2A9A698F5F2999ED4D50B3D7485BE99F0095C70345FE37B23
241DE3047C5D2691BC610F8A48EA7D0089DF1E233E4F6FDD933AE84097198452
751973BFCF06035663B79D7AB5D4C5AF1900F9A34AB90CADE202133614331792
901E33FA8D98E31271728ED3F47791E1A16097C0C4E37A437AE39F04406D696F
4129E8E76063E77D49AEEB407045E8ABC2D98431D8AEC886438AF84BC470A068
7AC078F98AC9D2C09DEA3C5E88F086585756AAB558FC3446F6002953FF894DA7
30C9739D58E005FCBA1615D51FEC24854BCF34FF560220FB24B3C18B50B826D4
E14F95B19511243703C8938DDE634C6B3E03B6898165C0D31B6C5606E11F5A6C
31B2AA988C61CA90D0897706E49BC639B56DF3A85A5A5004819DE851A42FFDF5
C6135A024FBC028A0DF324B10506903D47214999065494301AE6EF4319992426
2399B4EAE11DF711D1B4AC75FD7459211A43FC9DE53A41FF1ED7FB5E1326726A
069F2374C7A3877C6951F86EBEAFE1657318E897DD113C5015675DABCB1EABD7
46E2A30441BA457E3B901E2B573C72E6CA03951AE63C2FCB06C226B216C52063
73E39F010F19E3B2A0702B287C839612EE85CF52EA9B6918E3F571E46FF7E816
E9CC6B7928490CAEB60BCB9462B38D5EC266CF62B6F4C661050A08C08FD82F45
68BA4D1256D779A653E936481562A6BC1A05DAFD59EBCD8504F55F5787809E73
40A1ADA682B0794FEEAC771DC35BD14D4B00981908A85AD20ACEF764FF1AC0ED
F9E1DA4336855DF0E7D2685542F3B7C150870C4D14322C8A6B589D7FD272426C
C805B3428BF0F955119F3C96127555800689D9E1975115B10E643FEDB2740061
F2CD0EBC388C29A25AF0E96039C866E22409DE2DDE19C1CE1E76EB3E6BD1F584
6D301E63ACD7E8818288CC964F506EABE550F7D7962A19AC9B3DE40A1003810C
E64493268E2DAAF2A91B15ACB5288A0BBB7A2F5A217F0B2C3881D0F888D756F6
65F49639CA6C30531743BB5ADB2EEA5D2A80CF0C1D3E48C8F185AE2CB015E59A
1DB2C85CF5723C9D8970D73D6537EFFDC0ED53DD0C932C719CD53CA3AF290E48
7D2B02714EF22EC3378FA8EDA1FC9EDF7BF9C8CDC46F0EBAB07AF35466DBE6B6
F74969222BAA385D1854CFB7DD97090DEC40A189A6C47F1D43378E074EE8C300
EE7BABC6F5FCEDB0B5B72EC05B2416F729398ED678FA2A047FB4BC1CE0A79E6D
0FC8D552BF04DD5C49A859ACFB4DA6E42C83C973F575E493BBE8DB05BC36732E
54635FAA862C5B1EFF18C3CF2984B40932A4F97B2E108BEAF3C20BC087AEC5C3
600A66E224C3BC43236A1EDE0670E33805D92573EFE11028559A1337DFD63D3D
FB1243AC42E2768E2182BD45593BAE47914F29527629DCEACE92738249759086
BA2578163C82825B61C8FD2AE5B56485E4B96206D79842950A0766729B604E38
09BB6B81229973851A9C77A4C1F3B97F3F0D7587C244CC9B976A080BCDBAEB18
7803824DAE25FAE0C78A352158AFEE10BD86A91A43DBFCF24581BE0F8498F372
7F7E5FD964533C92750DEF4086944029602FC2FA68E158C59554FDA8C5B42B52
F9A00A558838BD431607DA1159C2FCB86B30310986E123D6018F35E3AEE5AC9E
1BAA87D5862976A0E84D4FE47DDFA7E27F28095B74818FE662B6554ED5CEF2E2
E9D87A3A9D613C00677A868EA7C4BFB1707E333D58B6D356C4B5CFD5B9238F4D
48ED1E2456D5041F05DAEC0BD91D1E0250CAD971DA5B6599919963DA6E58E928
DA52D0D4EB886AE4F183A70292C01F317941F702EB67D83DBF23B27B2DF046F3
AFD8B48A8E9CA78813E8E36A2AD6D428C86F1951144CAA6145110F6B1F6CF825
BBFDD1599DBC142A3B031F982D6BF93CE224B837685D3EBDD8E9628FC9D23F52
C605664C1556D325AC9996B770B57949569259FFA6C812CD7CD2BEC99FD17A0F
5F7E7A25F03BBF73A97969C530A9CD696A915B252D6CAFD540C4F5E8C363E49B
9640A6945CA45DD39CD02C96FF32856033A0DA80A0AA5E14A00E1313B9E7962B
E5B6DA547D548CF241336D07F899C5ED2AE0B5CE08AEBA64875D4FD78F58B214
B3E93BDCDF21020D7C289E6B0FF262558763E61D6FDF40AA34B32ECEF779BF41
4369796D440477132FD608B2DA8C4F98007A9272431790A82E0194F146BACF9E
E4A91C68B858226AA8F870E95B7CAD8BBBB6FB169F3316A929490C5F2FE7544F
C8B8B48D1195DFC1E25C0C0E94E6F6CC6EDE43BA0DB60163C9A5484D021F092B
A9C81A58EE767837274F754906B3EB80EE3FBFE8D4EB4FE1654C20DF7482830F
4A6DA9E731D5F65239FAB65E48ED7DC79604B4E5A8C13B8400FA1A159650ED6D
2F8E6E96DD4F9E1B3BD6D8F66000CF027BB227789C96E3F866C147DBFE4BA17B
F8658E2E9A707662BC012B74E63BF4D510C4E770AAF671AD8C888635009C9980
C3E41EF8FD2C4EB241C23971BDF9ED493ED381E884091D2CA922CCCDF7A260E1
FC4967A1C6819A4CAE273E04D99D0387BDBBBE38B658D28504C7F353E3B7A7F4
1348CC0D306BFB9E04214FB58EC8718B6ED6331EB6B4B3DAFF9FF19EAFE367C4
CF1A647C45F57B6C7822BF0866C5ACB3973D904D14249D0BAEC2B1D417B23811
45B33BF4A2C0E3D939574AECFC216277C4FC064503BE248141A14CE10353C224
EC6DEA30524CB10DA8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E2995196097015E0C4F622C4356B6B
F41DBAFD797A4B9D7AC22332C552043EF98913D0D9B50CA6B7CDAF903BC5C04F
D20A952BA5CC35B646ACD0A287C956B98C450051AF6AAF79DF37F8954473F8F6
652BF03AE2AE82B99D820CF93F5FC0BA17EBD7AF90313E70594EB5C354023BFA
07912408F1757319C7288E99872B907D5AB583B082EEED8AB079C63E38B07D11
6744856E689A479CB3A8BC081F33CB06755926204981DC0A45B3ACC18F6865BB
EE2C50DB43B62E3630FC1D9B1FFB3BFFAA6D0A20C0381ADF48E4D916BEE85BA2
BB40F538F55C11D50F882B73913840B45161262BC8B0012694C3EF26452F9B77
2CD7C7AD6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F1E10DDB693AFE84
246AB18279A2B24E5B50A2FF6337B7B1039FFDD4B00ED3667B5F2F7BC2786D2F
525A0E82234B30711AA835EAEAC2E404915FC7EC0081B194765032708B5E11CE
EF6868298CD26E5B9EF345BFA3EC2911E2B96A0B40AEAB95BDCCEE38F5EC170D
3BFB792D2DDA7E57BD2FB7669484EF9322A1BEE009594901095DE2BA9A15A0EE
4DD77404CEF16EA6C31FC04A8FBDEF27B9FC1AD3264388B0B12D8E476305B912
30B51624D4605C45B514473F327DC3EE8BA69032A95301CF714F225A92C253D0
D943C80B9CD0524C5B87A8D052D2E47A9725EF869D3B89097CC13CA9BC695FF8
A9468004450A76A13B7EE78A03CC18917EC44036C2DD237344E594569B8F2DDB
21F7619180B8C760741961CCBE54FD6DD07C4CF73B346099234A1EFFEFC88574
6324E4232BA18A38EC9F0B780C298877EF0AF42C1EBC2EB52DB64A1E1E352503
36AA29953A073B864FCB31BA938A4163D000A159ED4D345331FA1EB4009CFF67
1D107BABA6AAA48075C6C50BC7683929EC146594E55B01D4F5B582328284068B
2AB05CE92EEE1DF4557DFC8FEF287CB7F961F4F1828EA48B0ACF5C63E1EEC8FB
6A0EFF132268B7DDF7B465D4A21B05993F4A4CFD168A700D04A7303BC2C00391
392C3FF97E770E6FAFFFE501242B20B4F7B6C17331C64BDBA3E59695E176CC79
E7632AC6D2E920AA048BD1EBCF9909D8C314D2EF3CFC5CF88D8570BAA814D467
96D86CF4415C5B739FA6FE7B4C228F06268D28EE33381982E7B005C26D2604B3
AA363CA4732B9BB0E4D4EE50556D777258A7BC232087C9F00B0D5EF70270B40D
3071E14E4E5AB5AF1C686C5A7C268D36A0787DC9300D4CFA004F89A73FFEF780
E6BBC957E31B764159C3ADF752E6E1A6C3B5B855F8A483497A347B601E3C8DE0
362D76B715916113CBD2D3765197074104C7E17B87670CDD5C227A1467BD678A
BE442F196034B02132850CCB77143C2873447FDB8767C462C63916D9D4A13198
B7910E1B274B27644DFB2E8372C8CD55E6E2AA5CA952A079E1E638992316A2DE
C84AAFBD92F033B33EF2BB8A4796B06A7495686545D11C0E99DB92988762E658
5B31D758685D10C2BF46D44EC8836B9FC33A70C50FBFAEF60D478D68983EB006
896E6616DEAF9807C23208ED4C039D515D767D44083E38BD7E8696D363ACEC5C
7B9EAD898B77FE83EB160ECB4DDAC282C68500194FF7CDEC599CB6069CFA2C99
17F00E7676DA3426665A73D5F329F33A68B26A2B905FB8E0602BEBAA0836227D
F52169EB06CB78C1A58AF3AF8944A0E355F989A6D77DE5CE2EC91C36EEE43CB4
1512FC78FA567C195C5BAEBD19B8FD6A9FB4369A20C0DDDDF3EFAB051C35DCE7
E096437250C43D322255B1F3C392FD8E6EFC40A927FBE3B91CD0BBCED74EB5CD
A71FBF496804D53CEC7C42236EAE8BBE9937F9C2D7C0794179665324D266CD2D
F15E9CC37D12AC06A83535115200C6D6D23C294FC688FDC0A7679AA53EEFC9E1
4889D360E62FAFECFE7C1FD1B9949BE88E7306E4DCA49805DDF3EF2060C244A2
213C97B628A21067C2A6D69BC619F7BFA790DEE60CCEA18997BED4C33668C231
EFC1143E65F96AAB5E1B702A3FB802044BD073CE974521B870E01DB65AF61C46
C850C509FF5EEB4E8850A960C6AEF9A5E5F04674011ED7EC8AB1CBDA53BB323B
6BD98DA5DC1D4401439054FF616C4877C8EB5818EC95282EAEB4A2D6E4DCD180
EC6A2BEC069187F54D6BB6796211255718AEAB60F827F06A464FD27B690FAC2D
14692562002D46E20EB078C6434A8886D583181C80743A92B86FF444F09AAD51
D22F8154C476248216B471353973CA4074079159F6EAE77C63F9373D829A69E2
B42AED8B028767A52D2A04AC7904E9D98D81B1DFD6664348C7A8ADBC3193E072
ACB8F517FB3103E55B90F31560EFE1AEFBFB422772AE2E4AD6E854F5D7A6DB6C
0E3C91DDB1CDD560A14E930183BA73C2604E13FC8DB6489F2828169A89C99B70
089C5B8515BA0B1E5CFF7FB887045C3BF765EE8C37C144D16D313F269B56FB85
2777756D2522BC0F9BDF36AABFA1940239BEE8FCD6322E1CC066C6BB74E00804
F9B89FFFB347C95AE079F583E10D6B75A04AE68344A9F15026FCDFE5D9711F4E
4088D646E0B61B85EF9EB2DEEED5DEBE718ADF801EB8D0418C6CC91AF1D5FCC6
E566A9FC1283C093CFF09DACDA625269DD309D8F490C9926927A73F2EF7680A3
F58E52CF7A7D4A3530EFB969DD821152BBF56B36303273748AF2AFD9F5369266
2EC43795D6ABD44A44DC54E02C88234A78EBD78B3998FDC247D652CFEC10C2B1
21966B68226D5539F28D6E29FBC2C4F4FD1D1C189CDE4ACD79FD3514557D6916
EFEF1F4B04BE163B9E964F67E95612B84C83975B6BF4E17A99387C86430931B0
CF034D3EA181090DE37A58ECDF9300AE63A15A7D13EA5B79803FCFF52AC97B50
F7D80131F4209186915E218C0ECFC7C4E0A7A5DEC96EAA02F137C213C17108B6
0D80D6F18C1EA02C8EE60E0A5FE0021208E5F29EE4BC9F71D5D49AD76D94EE55
37FD244D7397D06E19DF7F163AA73A800DBC612FF2735A7DD0BD42CD1675A9D7
59110289AEF2476515A41387419FA5041F64C8B252BE3E0B6CB459E942FBC03D
DCF887B705F6FF3C07114E6D35A8E302D671DF624BB7D292F268F98052D54E78
C27C7823DC3FEDA9A509709FB60DBEB15EAC74E87BB7E48AF3FC14BAEEA91DF3
D3DA82306D297C7B765238D3FAC1530BC4C11A15A5890614E54DE48FF2AA8B29
BA9DAB6B108A74919652BDD053FFE12044E6C4862653742C7FB2EE59CF996FB6
0AD95A83246B63E1582839A5B51673BB078799F027A1B296A39D36C51DAACC07
90577468309E172EF68851B5C0EA23F9FDDD9069BEA65011F5F1916B7EA41359
96E0070939F0D868EA6CF806F10498FAD9F44558D3CC6C0FA76ABD330AAAE8AE
94F744C02B02BCAEC8C11CCCE52A9690138E9FFE0CBF0728FD822B802045C00F
A6B862B3F28984F6DA40C59AE09ED2AA658AA2A9D302941CE5FA6B818AFBB47B
6D7DD60AA72A8A74DF42AFABA5AF55985C013859445FFEA98045527241E5AA03
6E011CBD2C21CC8BBB2C9CEAB5C71443D1C24F7DDDDE07002E86961D20C85A64
1A935957C59B3A9366A5EB134F311F51451DD607A956C1DA1778FB92A8A32F40
8C5950CA7508F431C454142819C94506CAF0517858C28A24F93F3A3C4ED5F6D4
027FDD4324DF6DDC919C8AD0B1BE0D84051EFCA5B210ECA27E9A19262C2F1EBD
64B9AB0E209BF4593E30CF027E0293373E012A317AD021229DD0A0BEC7EA275D
CFEEBCD454B0495D1993A3FEA8D696735480B8BA5F9825AC3258801DA437D8FA
8C77003A876370C3D3305A460F868CD853307EBA8D9FCCCCDB9F3270971FB9D9
2A124786A4A05E58978A2274423E0D87B5F2A32F38960F407526A6D8BA53D90E
146B6AAA310E651FF0993248A26E0DE61B9CE80D54524D958A0024F32CA3F4AB
FB6D420E78726B258286CD08F2DFF15A6868F932E4E6130C9285D1A79BA985B3
0C5B3A1D9EB0997E15984F42D43CFC89E3C1C502D90B5DC0706447F873D747DE
D2B68D227FD31E678CAF5E8C93069A3A2725F886B91908AB1BC179C2A3992764
56427CEE991160A5E91A4F3D4F2DD84B8E4AEC46F11A95AA6CA312B73B273084
BC8BD82076DE4CF47B93FC6CDFBB63964A90AD1AC793BD28FC2E8978FDAA98AC
EC92C69E0727D40E4CF5FD1C81292D7EC3EA307A1D58076DF9DEE1C864902C87
D7922E56CD8FF5444591DBC5AC368A2D56BD7C1737F9F2FC72F570298E8520B7
2B92379E567DDA5EB646AFDF232E90AA890A92F887347464C5C6103E9E75ED63
9618C8EEE4F3C905DC814982B15429092933E3CE0806AAC2EC721C243AB618BD
16E5FA0CD55C045EB3C6C7C919F42952D59C5B0ABAD385C15850D36D5C5E2B6F
92BB55E3BC3F7DE5A07794A316627E4D2C9F6FA3A186C1DCC24BB35169C5A216
F7C5B09EA68E789056B38E786EE9F156487BB7C5EAF86D4488E9CC3DF24DC9BA
CDAD7245983997FC84431F7269BA2A22773A5148DF78B83B9005C64021C282B0
9B20BA6B671595B9C24F18C992CAF043B35155E20165B1B78F66C85D70319EA9
390429FAC629BA332F2F035E34F9154E9C2A777CED2092A196C0E6DCB400BDF8
C5B29508D334F2B7397413809F1EED463EE08956A36219AA689122AB935320F9
72462CEB48C65B037B822022249FC5839749F4BBCFE0DA9279DBBCC473733618
0EEADDEE7D8A6202E3372A2A58AAEAE5D6AEADC40BF330515DD3449DF8324A6D
DEF7765DE833E83149903DD9740D71FC85B2429F6504E6FC56B97BAC4106F49A
EA598DB1646F1E1C47E3B5C0121F7B3854FE184DABDA205DACF00BCE930F6409
136C1793AAD1ECAA2A3393EB233DBE06422D1C075D849BCBB35888CE9D52EF12
0BD59E708A364F2DAAD70406FAE8F5F752A36C0177CA4A40B777419EB5796859
4FEBAD0DFCA54F7FE0E212D2D2EEEDBF261AA7750BC49C12375E31B2E0EA137B
04423D98B372D37D7FEF9676ABD8B2CB729763C2B44F4260042A49F75B2ECB84
F332FB505DB3A3A21FE36AFFB6243D75C85D883A515D0B478143EB2E36239A8A
1BB0EC24253CD58658A4D332F3DB0CF41ECD3172A450EB9F544F03B350F6A569
C0D7C7CD576C989E338977159D77AC6B77D8AB5CF30CFDF404A93FA5F6016763
92298023B5A14A5E4E7DDF8EBE8A0AC749547612499EFFAF23B17CAC3ACCD740
FE58017AD282EDD0682DDB406DBEF5A79C3EFE99FE389A0D6CC88ABE1528AB29
F4563F359849C8A9323C0DDB7799A5B13480CFC000E73934274FA3B65B97BC72
61A388FF308B2BE7C1C0CEC21B2B6FED5113FC0784FC3DA000385BB14AA8F800
DB8B5FFA6589411DA7BE0487DDAF53FF1561133CBF4F5A2D24B1E9FB71001710
F5F09696B7B2BEEB490DD60033E836A74007F5ECB7D44B227807559D25CDEFA3
12CB46B65A5A007653149D72307A0ADAD7D8847BEF566B7D4AD69F80D8623C5C
D56C86A428546869E2B29875724378E53DCB55FADD5B8A9497454DC738C620F1
6723337413022046A45605DB9F23451FC746B39F6EC6635103B19CFF68FC980F
627B9DD1AB97B74410AE5B71FA54CFF0DAC13FEAF57217EC8ED6FD54609BD4E8
229167808EBA64E042C03F9314CC8BDFE4165DB939A2BAE6FA72A0755EFEF67C
C10A080A11B43D0D9CA88252071D19ECC4A97A49C1681AD938A866AD13C7987F
229368090463E864168577594F1D35E774ED2645A395ABC8D6DFB6144512A79D
5EEC5AA032B160A4E47C5001AFE9E799BF702E7DC1D9189981A6924D916E1794
401E982D9F24B35F8C28900A277BFFBFEC8CD89E57FDFDE02D2F36E38387AD43
776B1879E92EA378A9C99DEDABCFD99CA9E446A0D621618545926123EFDE69C4
08BA15D37EF7E23BA1C0E317508D7DB836321FBA2BDE2CAFD7787A4767962BA1
132ED27FB9FD8DD7D1F1317E0AD9CD2AC5A404D86B3CDE660FEAA8AE3CCA63E2
B63E32A23C3426FD6581C45A5699DD8C022044D32CF31966BD2F48D12CE756E4
AC30CAFF88CDDBB7ED3C58B0C1BA509CBAE6E4E1A975468DDC014F7ECC0C018D
C0B6917123408096CA3E45BEC8CAAB7E80DCD1D5758E4A05F406BDAF8D12ABD5
13773A617B2A460121A132DF7EC9672E6038B5865D12A671FE0BD4D1403EF62E
5B0B8CACA472616F512CA92EA3E786010855A746BC22EA7290853C132FDC9A7F
B7532E032627449E14855273CBF00988657C17162BA1040A81AC9CE87A3651F1
5FE9F6B6A141230C2B8F3C8C45D06C4B2AC109C17E192EFD4A4EBC7A8AE01AE2
A2DCCCEB7459E22899BAF9812BDFC69AB23863FA49B554AC638A0B658F00B9E0
86BAC41D3D2BA74BD0FAB026A7077EDFC0504082BEBA3689C640BFB5DEE7CFC6
5301BE15A3BEEE536EAF01AEB956FA03B2D4E5ECF518DF522D0864CBCDB264EC
FE166E80323E2F48926C56C31B9ACAC240B865249E9FD7C5B3CC22349BC88550
0B560DADF5297708D2AACC5A0A1F51EB75EA9DF1730077679025A6888F7F31FD
1DDFA6A622A880BA28690BD7307ED70396B2072CC139DBCC63451F9A3C080006
DBFDB510FF9EBE78592DB78AA389B83C8364C59D53A0C4A06E02D2A0FF37A2EB
A9D2194E114D98A2E3FD55A944924DFBD14EFB98F75602F55DFB0CC6714B33EA
BB2C73E05ECC6423657E6837AEAA548F752CE7BD3E3A8F128426A75C384D9DEF
9EA6D3E9468C030CBE0086E58DA69E24E5ADC8104F7C177CE10F12A63546EA54
490428B5A4808007F8BF05B743C3F5C297A5DF994839CB280EE80E72F80615EB
54A770D2B6D87DE2D9F7C4A490DD2F0925A0A65192E5F1829BCD5E53CDDA3A89
179D42BAAD29973496162988FEC1EA28E3FBB1088F09D35D09615E2254070541
FF8818D155D96088E9B0FE6CEBA447849D4F40161A36ED44ADE9D5A704F2A583
B260289FD925A628F296361A721C5332B24A7F8D558CDFA2F538DA996F63DBB0
BB012BF829DE73A5ED4EB4AE788928AF977EE38AA1F0DDB6678FAB501ABF339A
7299789993F2B3D11406829AA95AED2E66B9CA2E4FD8A303BA0BD614C6108437
C605C187EE830612DDA02A5052E7FACE9E82158651F0A04C8A24533506A18E8F
80B7F4723EAD1C9F51E92B64B41F3EC6F9132AB94F6AE59D2ADF190093B9F981
22475B5C622764976C55D7B411A70C229A20B9223866F1573F42AF780C589507
A1F879F8238366A319C1C76F48EE09F87C0518BF00629408224D070207A34953
FF22FBE242C174D277AD1E370C5B55DF6CC63ABF1B9146FE4E23B5230D7FAEFA
F02D00A7DD335B0EC0D6983433120ED2773B087E662EED1A263CE7A170A922F9
51F96A9A22075E543AB721086A3666D154574CC53026ECC007D9F6FD8F8A5482
39D15BD1B71EA6B17D62A987BB36708F61CEB0188A1309F391EE726C9E4A47F8
9E3CBADCAC928C30875B2368A70F98B893C758707642549728BDAD5D4E033971
86FF7B9B11249AA79D3F3297A4E9FF075775B5ED6733B9C853E190AB4BD834A4
DFF8EFAF4320FF0775804E6B6AE920AFEF03B9A4DD693C1DB55129C184FB4146
D70D25CF494214447390DCCE73E60F5767B370945EE0805D5F47AD3F58A63FC4
BF13F64E61E1D390ADF99DD5457660E2DD0134567EF1B65135F07EAF5436516E
97E4A55AB708C043279039ACAA27D67147DECBCAE1E8A4B9D99EA75BAACA36C1
2845C253D3AE9CB0CB6469EF4B3E3DE0528F4FF120F41B6BBE26876ACC08C1C9
BD1AA35CDD792EDED050260FFC165535117FA6AC7F070402B7FFCE1195B14417
6439DF0C422640F7421B05C39D761D9AD071348BB41591F89140285638D00BD5
0C2B6CDF4EAA9B9C4670A2F382D58259FEE68A9B289AFFBA23C4010590766D63
FF3D14DAD2E8CA8DC680003261A2F20B710463E6E9A56B65E7DF26E83540CBEF
3E63B554E533382A742E7669D84C27FFE98B6B8B3536281031DFFCEC32098200
F23E3E81591130E9B2B365751D51437D0249D217EBA5ED01041C49AF3836F96B
1B2B31376BA823EACA579847B5F4E4DD5E5E949112B9C786FA60C58140777C63
71E9FC51AFB821F471194342941820349C4666E984F0AB98FF359449FB441D9C
A397F3E008B7526A2A2E5F6BDCAFD9B24ADA2E3A9196D7289CAAA6397E4B4F16
F647DCD8897788682E8DDDC8D923C81722A1B45D6B33E2D03E4EA3D985859829
4A989DAF0EA39E1CA69C7C6075D2C29DC649B797361E13AA185DF85E840C8189
1E00DFAA3DA84CEF0A100758FBADC60E8F9F0DC2611FCF84832E6B494B2745D0
20F0C4D34CBB93FE7F126DB36B52A9578ECDABAB88CB2B1ADC3B7D559D598BD6
89518BA301534E3B16587698E1761D5EB2E4FA89134A7F29EF462922C85F61EA
FD21D91544C2D196627CC9E6937792BCB2585777C57E22FA03C3BFB64397C58C
607AD3E30BF3210465B0FBEB223AE63923C9E97B7531B69F9A60C51D835D9DDC
6F919335E31252AB049EDEBC0F42D0CBEE87AE6DDE00D4C4785AB246F9130468
23B620239571DB1EFB5D550FD0B05016306C7DC5A3735A0963F6035E44AB2E35
9444CB70A36D1A1FD8A4E3291C0EA72D538BE70B8ECCF2421EC0209A88665BAE
ECA9409ED4FA9F4B1475BEF04B2C17F3920669C8A34AF6D8B2720D08DB75D85B
097257CF6820D8F9841E0B124C475C46BD8F3C021A93D2823FFE1DEB3482948F
F616393706DCDC4AE1040C62B9E1990D339B7DDD6E64D03D9ECABB56C34AC21F
8F6C6093101CC2831693D61D679177215474AF2D87A9B2C04618D40EB29FD75B
57CCF035DC094D2683A5B2B7020F35398B633E24EF05E1FCC8F47B6F247D0FC8
ACF181C32DE87144A3E6E671B4D6809387A8D09A1A947E8B7EA8E990F0B577AC
B936452EA6AA29A11337BF0C4C640A0F59587FFE39BBFB5A78BFA4E0B407C665
7B23AF211D35DB7977D925E7D80DAF70C2104CC7682F756BED23B9B68194F15F
7BB394D1CED1B55AABF9F63550B9352C8A9E337BC111C114ABD415CB82B46BFC
0ADDA3458E521CA107472900F89B7D3FAFAE2E12DD807FF276AC44B53B976F14
AD91DC0C733759A44A89B9E240E8A02195B48CED6F7107AD605C9100C0481828
C52D4887F679361C1BC806D736844040C4A9D6D8FAFAE5B62E30FC0C6A862B47
418C0C7661FC29EF10C8AAF66460B8A141F64783F054BCF1371CEB03ABD3F570
FED1E50936B0CE6E88AD83037D2003BD38DAE00EC701A7EA9C900AE8ED11C6F4
DDA613F3E8AFFC1C6049612F0B36DE526E8EC4794FF7A599130BF9C2E0465EAA
3BD68C73D1BFD528515CC6A376FA3F6374DFE9871142328B39467421B33E172D
345203DD71B04612FCE731FAA28BBD25178E16C9C830433991DA2A84F52FD84D
B95BF83DD111A2A3B68FCCEBEE06BB627D8DDE5AEA68AA12065B3B6501A68342
5E9B3B16D7D737DD02F9EC1EF5D168F22C3EAE6813D0DC7681AC22DBA3B93102
2F1C8985B88C1B0EC2DCBEAE5C85E23CDB34D4583C72983A7D9FDAFF91D70E59
C220578DB1042DDDA35FC7949332D5029056C8F53D182B783173A17D7B4C458F
CF891D05333CE4A86C6F4C9EEE6FF215D02DFD35660081C8C130055DB53D5831
49F57390264A4842F858299D8B233BD7B1BFC8A1144787231351290BDF97B219
395975B134DAE910BBF326A00DADFBD34C9842FA828B14FC3EC459FCCA31E361
D27F5363F74E6B76AE0A76687A540481F4E4C7680B8CD2F13B725306177D8910
88C41D6BF3CBB7A081071D51AF8848E2726E40876347D2B70797148EDA2B0C88
2506F3DD9C8A9D70B3DAFF02714498FF54A7CB59DE652BC5FBE7A1462222D879
F4706235651A96A34E1EDE6F8C4E1469F55241C87F3EC17E9094F622C21ECD9F
E9F47337A412559A8665BD95FFBA840E1AB8CB0106E12F4F0B2CB885F982ADDA
069C4ACF274395311DFAB864B9C433B03E5D8E483A01D41EB955B8CB4341F9CB
424DF063DD6A65BBCC8FCD40AC41C4235DE34BF8A0A7362EBC98D3149B9F30FE
C7404BDE555C0F200534F85F978A2703E6C8A86E17B674638F17C7ECFFAF8501
3BF85BAE00F3845D4BAE6EA012A57A22FD12132719D8FB6093A73DF81DD0FC7D
28F954F60AC1EA9FA6F0B8C37C9B8947436550B4569F068CFB4F365840044966
C9888469D478CCBD16B385C5EBE141F48E7E4BB0EE47A0988E3E6C7E1E39EE0E
7FF795A744B4F4CBD83274AEE5EC559B6F289E2F6178394EB0B182950B7BC9D5
E0FA5FE2B71B23BE96B02AB229B8D20C7C0236AA570B41FF69FB873432A06DDB
09D75F6BE506CDB377FA0E2EA74D08ABB86C32705FAA7BEDB8DA1DD4001524CD
2027CE877E70ABFE256685546547174CEB6452C7E374863473ED55CBB0733FC3
D3B58C0232FB9185C77B7A506D8A2F9B7A98DD825A3325F2E1495B2FFF8B0AA8
D56995B466BC79A3C2C18A15EEB7FCD9165DD29CD9E2DAE85D02D0858DD87D99
A5088DC393722CA865EC3D768FBBC27683099B232BAE11AA1F1B55FC351323EA
D92CB7529837BA8017E80428AFC0193C2C9DA3AD4603C08CDC18145506EB9EE3
D2A99B076301DDD5ADA78847F7D00C18D50E080CF60051F592F30119F0EDE826
BDEAF835A201B00DC4C4181476899E5792531B989C8477C2DE17D070A2C2EB6B
BE1AD828DC0FFCDD2BF5CB837E68A3358F55042E19641F3839BF8172C88443BB
A5DEC810B0249A03AC624D8264C5300A68F66D4ACB5FE8A25251F6E212344C1E
943F92517001B958DD33A19B2249EE2B23F1351B69DCE2B8266E3B1E8DD856AB
A83FD037EE7B67745426DE9811AAF16D91EE428745FC77DE5D6F33B4C20BD617
63C67C07267F4941F859E841B28E56107F5724D5864807AE868310F672744B6A
7B816DFB1149C39026C2D4CCBA33ABF13B29ACE9B73805B3DFDD1844ED0E9339
2C83710868849E0653A5B7CE94876F2EC9A09F5EDF7FEC52A8E45005AF5B32EF
37E59768A0996879AC575AD7025A85D3110AE34139964833072A2A7C25374D47
F1C242766B27773DF54D579EB5D8BA05DA1E999E1B26F7539910E17B51B8AEB5
445E323C1DCB69C71A0342E48F2FEDD5D7231AD80A87C271750D7879E7A2C155
E61E25A8BA85A9363FC55AE58CB3A1AB8EF368CF055E164E2CAE144F98D114E2
95821823BE7948AC29A7D5330F43513D67CF490A2E00EF773D47FFACF4C934C0
E6C43AF17B1E86F3689B340EBD0AE7E5A0CC9CF83FDE7CF376CE34293ED0F198
DF5D1CD48FD027F414202432A76C234CB3F47F7F62ACB888A9085378403D3505
761A36F285B9E564DA3746191046659A7FE76A28ACD906B65B8179AB131771C5
65FF5F6A64F6680ADE7E878B249D8F2AE1B10931503580F54B5D3E034D41BB8D
EE988D34E46EFF2483426A61D6746A784B011776C7A572D25B6C4F366497B8DA
3E9A6FFFBB2F55D89C2E6F8A74070DBC0925165A8682C92C55496DC0233D0101
81BCC5A58BEA91DF7801769EAE9F7C1656FC5E3BB92C218098F3974AD64778E7
7623009FB683471361E6E319236B0DF2FC5B2D2590A3DD79720185D8CF24B5BA
E3CC8FF08B9D3E387FB3479B358472B092CB1934C00262D6B31B0CEE15181C4D
FB140AD25ACCD44ABA42BEC3AD202FB418E19255A5012E988432C6D32829458F
2FA8C26AD22A411D0969781CC7F95CD24DCAD028E94F52DAB8D3F8FA6E884432
BCE44E0FC80D274392C13D1BF5DAD5CBF3CA0575E00FCFE764373D52F306162A
5747481F19C285CA6F63D20AAB9837DDFFA178D059F84DD777668FCD984607F1
4007956AC48416C9D935FDA14DA60CF2F4B52668E231CF5460DC254A6B3DD059
443E175554DE6C63445B7C9F8141FEF81CF9F7B71C6B7065C14DDE1F884F1F4B
B5D22E63A6BFC16ACEC49973AA48BF501EAA0181F2D4DE2CE00BF1F6AB84D17C
8CC2E84064A998234589572467F28F8F4A963E14DC186A1E2F00AC7B67384865
AE5777044CBFA62D5E1CA1CD424514E2A64C3FA0CEF9D772D719E41502623FA1
FA613FDF105C5CE13DB61166B855C99EC37694D32A48EA8B3ECE682858C442AD
48301BACEC7001785945BCA7D4588F1657E3F1C97F3136FC4AAFF2417E70CDAE
D2B88CD80DEF05BC0CA695F2B238BF9137CEA7521C8B26BAFDAF4964472F2043
50AAEF7B5729F00F5AD58A5F97F928B59FB2122C4010E877965B30326EACEBC6
3CADC653B7CCF993C207085FE0148723D5AC62E82DF2E68705A7B36F515E31BD
C3B7450D6B25CB0990B2C37DD74029CA5EA143D7B24F47BB5A89BD8A2053552A
B38C87D7E250C62E3C3F3857A387161F980D5D6DA15FE153C72D0408F82D4C91
CC9784AC6437A738C3BABECA7C8C0BFC2158BC88132D4DFB4F64F929C39D767F
A441898F98F21BC840A5431D462CD489B081ECB17D3FF441661C77252935841C
02B1109EF6AC6D0CC95F5754A478A76018209D27CF9C34D047876BFE013F8683
9B922E244357352AD7EC08B30657648CBF78B0AE4FB74E4E2CB881B08B1C2489
55999EDD5B77AEC3D1CA3D5D19C608EDFFC03EB2A3D6D1A9D3A2B6E085FF4F35
AE464FCAAC07B4FE21F23F8C6F4FAAA55E9DBE0EB8542E4297FA43B758DC0D5E
D4D9A08600A95E0546B19ED8BAAC8209173878AF5152F1ABC4695770825DAE69
8A69DD2D30EFD1CEB58588B3F2A23EB513D3759BC2118BF46B3F38A6E66BDF1E
BCD556CA60416444E4780F6602C83FA8AC324E6C74264E738DDF54B833B1F03C
AF781B900FAA58F1D18FD1A886E2F70302965397FC9CC13F5FD6E23751A87049
4435A7E98313585FF78E1E310663D428037004BFDD56F193A5BE2AF00E5F8D33
11250DABF0C059A6E5DBA56BB17B9A746856FFFA7F84D20CACE485440BE942FC
E6B827BFEFE9FE4179D6949AEE2CFD216F1589998709CD543620932E56C9F15A
7A1595E9846CE01E1115EFA1692968F95C23762F9C1C7D1C449B72CB4364DFD9
57643F42BF47C6DB65ACE11938A62AF298018F0E8C053D6CBC34EC86D271C0B3
0450B8E12959DD07BE80F26619B189E9B5EFE2484C737DD37C0841429DDD929B
217637441D9DBFD91200C39D1610012C06D480014C5EBBAEFEFEBF4F203DEBE9
B7501F37124FF07E22E9CA1EC66FB150237EB8545173EEB2A86936496EC53A2F
42521F9F3A5BE67554715A888FEF3268AA1A0C40FC9A5BC131267287C1925E91
D84850DC2A850983EED6D2F8C76BD63CB1A1CFAA7A5A42D7DACCA4C0CD40F3E9
715102B27BEB904C46CE8536DD183C027021D10869C69670C5262C35A5A5B2FD
70AA50BECB178424B58053B63679EF2DF5ED981A8C8686080826E2DEC6390C17
0A88E9C4E90F583111CA8B960BA243AE4A79C13327042F6BAD064F1784C7FE23
7446753CCB469339266422877F816BA606711E6448EC0B73D7DBB604E2BEB7D7
5076194BF82E80A74014D1029B55DC75328F2FE9C8B6CED2E5613C6F13864C18
5A18DDA2C033AC65DF2FFD2FAF8CD834045B3603E9B281D0B2EA64BD56ED4644
7BF0EB0250EC5CB5FAFD2BA07285C7DA0EDBAB22E45E619296FB0505B65088A0
636E84DE8EED4C599CA0A1BC575F959EAEDFABB75A04F5DA79609E4201EB9C06
412E34E12F61C40060B68AEEF94C1353270D964CE64353197EF7C14C448EA161
FF4B3F8CD8526B89ED8D956D013FB0402EF23E5D7ED75BB2EFB709F9EDABD549
B51DCC4AB0F7DE9B94358452CFF26FECD4405CFAE2338D2000BF94FC7AC9D7BC
E7068AC2BBF7B191B40720F20861CB71046428E80AA93722EFCF4530BFC8481C
93059CC3DBB4B12155ECFB838B437786240786D9F3DEFDF0796A8985BD5CA9AF
4C62A6B79A3F897BF1195F63C95858CCAC76261729574671F0A1125B8CD54C60
96B62D405D49906534C7355109F587F78266338B654E7004535E3B162A3E08FC
ADBF263F5A32798385C1A0C24638E6CA59CDD54049E556FBA2B7C13B6F17C0DC
8AD247CBBF892958E81B465E56140074DB16AC81B7883ED0C4AD8D830BA71035
0FF35F09A6B82ABDC8032F25DD7031964F4266CFA7CB63A3B90CFC9B98C19D1B
ACD545FB1F354150D58D9358ECACF5A3879012B67D65009E96300A55089017CD
0615155387769A044D7D1197B5BA3D7FC0510579BB8BEFC124C7522F8C557481
857019725D9C403C9FEF3E5F7B00F6FEA157DCB3FA878405FD10407A30950F23
CDE7DDD77C8D336046B49D5384AA33358C5950BA10C6CE2A7DB8D068FD5DCF4F
BB78A28C4A61EEBB8142B8BAFCB54C0E7AEABA6990EEB3D46F27D83882AD0CE0
41EFA3892946BDBFC164139419373923D51BF874AB8040DD9557D6E870286273
00E5F40343C4077C546E9D51230A7E86639D5AA8ABA1135726DF42BFCE7155B7
F60123C4A42A250DD820C836DDFB1EA5A7649BF1B2102F9268E7C44DD65DD3F6
0178C402505F6848C73EECB4F14A3279D1B74670DCC95AF7F090FDE99993780D
FD7828523DD56FC4ACFDB7C5C9721C25F1A10532B09A2204FAA5506D7E96CD56
511981C27098AEFD8F62CF9AF87F55C9990942FA3589DB908BF6CD2A1947A318
33528C1287DCE9B26341A5CE80FED286B04F48440056FE715647F68B77A80728
23F85F988A59602EF347D3A99980C9839A0763D675316AD3CFA839A3F2BA808C
DF1C1CB240E9A330687BBD8E0EF28729E88050D27590979A42A9C695A8F5EC61
2140B1602F934EFA56CDBA86D4128D473D076B1B70EC58DA4ACCFBC9C34D8E2F
9F2E2EF863ED308513014EE874724A6F3DE80C4C38D64769CFF027706C8849E4
603C431EB830E5027D469BB90D943CAE35970B9547FF8EF4C2F45B73A0149ACE
3A8CD9C1F3584B77D9A6BE88F206EE1DB944F5009DB3E6FA14DBB9B18170FB6A
EED29D5AD8BDDE4D57651FC7AEF20F606E9D352BF21AA19AD89D7B1239141628
A67C9905B4CBF0378ED83686DF92A82E52D2C5A15E2A0C5CBDF4054136FE9D89
02F18C68E715925AC8A7FBB8DA267296816E9C6DF76B7056A9F92246EAE2862F
7631277CE14B7A01D42F3ECAAE46677FE0FAC3250094FDC03BF3903B98EDEBD1
A4641D677E10E26A6C1749612E3BEB349AAE90163861D4B39A2810A01E1B5CB4
88C1DB546E0340C4AC314443522DA423F2E0A9CBEB9F8CF67EDF3D4A5B68BF52
8405A22E538ABC706183CF1BB04538E2D8A9841263D1D2D72D9F57A11C7B5C9E
7DBBEDA5987A5D524575DEBA79182DB4C040CFD3E260D6EB64781A64B3B5C7CC
8F842CC8A8516652EE6E634DF9A217460BE556BC626432ECA37A6CFC9A77BF18
8FB5EB9F59572A8C81A36899C521A6B6DA3DB4C5C618C80FBE4AA56B57CE7F01
2F1859F93DB358EFB31D5E34DCCA718DA0A07222485488B2422E21B19D8CFEA1
38B2CD70011C85FA69F82165F968850331DA70219B60D6ADE56BAEFAF191BC28
255E934BAA52DD253B01E68D4E3B9C23A3F28B6DAC01A5376FFE5C278FE44C8E
1369FEB1870F49BC4ADFF3ADFDE37CC5A82A1086B847E97F266ADF4246A3641F
BA01BB65C956A536018241FCD96999405BB6A833EE801AA6E752A332FAB8C9CE
DAED41D7579162226535D6873AAC613E1365E82B52B485F0ABBAED7F5DBB19B7
1FEEC005734BB22F9FC803F246270178673F73EFA39B649E7593549ADB0A3F8C
391C3CFC8801AC38B53FB97668DFA1756798D8D441B84186AC1DB447B00389D1
21FC60EE0A469473E8CD4E1D5975A8C26BE7C8B73D4763FADBA9615F87EF26F7
1BCB0B07DEF633F0BEFCB35EDD180CE5817F7C845C59094415358CA9BAFB1FCC
D7EDC6CC6A36023226483C905D0C653120331EA593324CAC682575FF53D06E8A
1AAF0A85A5F3A69FC8A1560E1597CB96B73E50B38D2B2597C713E88D415D204A
94773AB1A2EB551475C38610D0B1E75E4EE3FB6AE6FC921884DC31ED42F9FEF5
EC6182E82D5261573F1ED311242CD52F56174E5DE33F79AE39079CC4905027B5
A2D51B688718E207D6BED82C0E1EC1D5893BA0E591923D7CB515C74A6EE6FFBE
7AE1F27599195080DB7B8B3C3FC060D6CA29E12E47DD539C4F206FA07523BB83
C1BC423FFB2D62DEBC80CDD323F7B7C422A5825ACC4B70B06B4CF32D0BA54D03
2C76B1100D18AC12B3D8B159A24C109A3E7C696152FB424B96AC726FBE3EBD07
7A2CCD39905FE038A64BAE2653A9BF8549C064A76B79FD7930E832DA45B022BE
0A728EEDA2C2F7C0E61C737FA35B8E19688E347F97BEA5D9CACB03EBB4A4570B
7E035B5FA3440113FE06148D968B565F43E7DFA8CB47B0166D3BF10F0C1E2F3E
AD4AFBAD449F866F2C0AB23743FB31336245DD784D3096685B3BD04E05D1782A
CB1A90762CFEF81739B159A3DE3BAED57E76D925B7862C39A3D1456756DEA7F8
FC4DAEA95162F872C9F5D6F6D1D33A96D64E3723F262E5C8187DFD960A5DAEF8
3A9B8B768B96E094E9D11D1B29CB8CB5B1765A6D7C70D37F2D93D618F2194B8E
21183D53F92AA44CCB7697FFE5DD96AD2A28AD66FEAD924CF7F22BB0955B34EA
016E1AE62B6E94D6F548ECA4ECD116D024AA965C9FE69342BFD3AF6E1E34F361
4FE49EF9F52563733E4BB29547BDDD473952B79D0E4D5DA773AEF28F9405279A
4C2083D0B34672EAFAF9F6619EFEE029448351DFD37DDB0D833DCED718446D48
001E146F8DF75AB3BABB19C6EE007C65D0BFCD1F86A36538167F3505CE8DDABF
B1A2F31CFF94DB0344C0E99EEA47BFF9CB7F1429AE67240FBC80973FE7364794
0DEA0395181B238180B4535B11B47C74CF8E20C60C12F12F700D4EC6A69F7A11
ABA15896F23B9E1581B6B8580B182153FDFD9F83897968910AE62D9A829523A7
EAAF8B1290976A00111BAF080585750DD5C4FCFF4A5576E7CB121E0328EF12C5
883636E5B7425C440CD5EF562BC6CF1E11AA513F8B03E1BA59EF5450804C75CF
04ABFEC5C798E4D1708A378E412B30511AE59D610D3AB4599C1F8D4C9637BEA7
492CC689541475406CB8D9DA2C9992372715FC126D6929FDB376D19987354B19
954E8A41EED8A7994A789D88CAC53AB4FF3419D99437F231368E9443CEA744FA
9C3790E16B10F60831E8963826F27C069F3C07D8B803345349E04E6203B445A2
23F30BDA21AB8C8AD70D7527A34C3CD12CFAB0D08FF10305151D711D96509CF9
3E1FDABD4963383630FC1D9B1FFB3BFF147EA47533F8B5F1013F31BC9E502F73
E0DE650613FCCC75146D58660F5D3CAD0712A631DDE237396E03C2DE3F6D90D5
3168B263BC5701647A7CAE5FB1B2BE1F732D400E7E8E4CD48AF149C262D8260E
0B73226D213B678E45FC0A6DA0A07B8240A6CC26204236664674105A7CA9F8CA
190FBC2FB5F185062BBB44103BF04FC8A8383891BF77FF85B83FEA6BC170CC1B
57844D29228E828FC7DFEFB7801138FF963226569816BFC2FE7B59F89EF3A0FC
4040C9307D261753D0A25A7095146F3B64925A20CA6B67BE3510D9702B5C158A
DCEE24566AA5408BDA81B1589F724B9772B4DED52B89D342DEA4F781755EAA27
0A08061E809C3D06C5459F9D1FA76FB6F472C866A972A02ED304603C864542B7
17BD6206AC1964BD5A8397A71C355DC7AB5D1FA00A31935AC0C26097A4B21E92
2A81DC1FEA0E36C68421E4E08668C26FD29AB6E849D77B05DC7522E7B1E2B759
79C320EAE4E1A2D05EF9C0671E288ADA3C6349405F6FF66329D19EB44D1A3021
F2C71F72EDBF3B0CC9827E4EE8FA7046262A7A4E9B4C30B8D86EC03D96F73517
70A1AA0AC42B04C0964D828B63064D8268BCE894C0BA5FD5D861FC71A02EB87A
8C4FDA757F42E1D545297779604E4B1205DB7F5D46D203515ED83FC0DB114D17
BAA910D51256A54CB4D7F0342D8CE32AC0929E3A782F2CF18858952C35AFEAF5
E3B2CA185B6C982073B7FB3A0FAEFDE745AE73FA881743C9D9A148450770997D
3F71A88FF007D44D5C3DA3CA5421894C03A2787F13429A1C16BA8282C2AC60EC
BEE808015D07EC38BCFDF8C667C8467C3FD0C22FBC5302FA569D346634C66117
28919CA66F3375B5C3CC95F8F6E6CF57887C20037829EE8C4F0FB645C584A8CD
E1206C4BFE6BBC49E1B9AA7D87F9C72F5A1252CE3B7CD084327DF634D90DFFA4
59EE69903FC0219C531C5C43B6EF69F20B9E7D45B87E77079424C6A0429B8AFD
79FD29FEB0CD35CB1A5874FD4C3485E3E526631EF586DAD19344B6B42C1B0A34
361A1D7CF427DF0C0D2D45F012A874B24CDCC1C23E9459A66EFC6CE35EDFB9B3
C8F9074F330E1CF49D4F3A391DE3089AC34F6B2F4EFEA11C52B9AAB0AF0A6C7D
2CF8AFF92F9A20352CD92FDF024C4D130463DC6DF6593F6C08E5EDCE8BF56FFA
5014DFCCDA4002B512DD40D38DB0151A7445BD46208D9B89CDCD328F9181929A
908A45F287C88B091B4C22FB44EF9B8E80D5CB55FFF108B77AE082D991425354
9606DF0F6B2AC2F8616E20B6B12B517CB21CC5105694BB4EEB3983EBEB84AFB9
7D9221437F02692D08F109029E6070FD7D8F7DE67024679715CD51930DE97752
13A076BEA017D923B0835EB854337FF6FA873437C5FAD68AD71FDB9767F2D7D7
45A0804A9ED239B90249AFFAB36EFF8FE21C5C82D65B9C93BD0045AF9CDF9F93
FD1A9317702C1C165848B835EE517263C810E364F95B0253E7584DCF145B1653
FB187406FD0BF6408373FD5A20053D8F10B28B3EA5A0BDD51D7B1F7B68BF6389
20E7E8F0FC7CE0A0643AFAE475DCF76E835B8DD153840145B978F1CF93761F8C
CBEE284B4BE4406EA17DED0E9EB9F225CF58C82A656D0746B169BB8FE9AA6769
10FCD6BF44178725F6C3980329A197531AABFF2831BFBECA9F0D84B726642997
5FA0068AA63CCE4B4C3E9F2F8FAAF9DF31AA2A14B1641273071B5436646A7CE3
A0F341508BB04E7CF17B73ED62C232614DDFC34C8F8E464ABBFF6128213D7761
F219AA0405D81881ADE9FA7AFBFB0739C9E2BE70F491F4A16A310810F71DA42E
51AF141B3B51EDC84F5CFEB5B8042108D21D03D9D7BA548CEF26BDA46F46618E
B018CB319AFD3B75F3F5CE8069AFEB7EB99AF21EB412670D9168D4785A60A030
CE8E6E6A58039483527721C93A24E77DE64B78B10F2C341C8A868A31228F37F8
AC91B5F15C9CAF3AF3BF2E0536DD61BA2DE57DE68D04C2D39746E324CF83BF81
556C7BF424240E87966BAD85DC562932198F2EB1FA91B8AF86FA0A1740E2916E
6B555B31670C18122DD826DE7EAAD1F4F5DB5D6FAF46E79C72C720B15FAE8759
D93F0375F51C4392612529D4FE44D29D4867BDCAA72A2F06F5D7131DF5066285
C66BBF081B0B04F06A51D2DC04549A22D081FCFE7254398A1BD6F9E8D92C34B5
1342213464212A72ED4D6C9A00D27340ED99897E2A0C0AE3979362CF4CA37849
9C9901C58A9115B42853147C448FFD510651C719E52D0C9F0D70DE6D577B43CB
F8294326C52A255D5C458D1E2617CD59AD251E543D047D22A90E5809FA5F28CB
79C5225F29548184411EB5864538B54FE1353F9E3001912DBD6ACFBE70FD7D81
DEE7E317E286D34CAA5CFFBC8F5822A05594C719D654236AAF31B5C586B4A1C3
5550B386EB39B67D21CDAD18BD8ABAD7853DAC7D79937587C9DD1EA4A197C6F3
04CF4395049F0A5DCF93F7095B75E2965E0DFF96BE435CE6C0887FE13B37FDF8
1BFF234B9283B46CEF669EE1DC8715961CD50B66155D6081BC632694371A0DEA
DA6DDE3A97BD690F440339F26F5DFA131D77260CA0D284F857675DFD1F0E5E8B
5E95511D54F7489A4591650FA9A35D3AA1B544252BFC0E960EFE1675ED67C629
267DA7D9135166B4955C44292FBDEC55AE303F1712FCB165AE4E4F367AFB6502
8F9F98A3BF69130F88F798AAAB1C7D8E00DBB43333C83592FC2B805C23E260E1
1416B4C939D7A3D8AD2742D6F22298267E1BA14C7DFD589648B51D38B276B417
D4FE460C941547179A99A777A96CA0E0E76266AF79D1E6C8E8AD21A2A9C5608B
FCEA3A0AD18E02DC6176DF6D825FFF476B9254A8FADF1674E49723FBD9BC13F5
7BF6398D38681D1376D5424008F7BE1F3625F62EFFB5850CF45118BFADB602AF
1DE40721D81F714DC19074DB24604B01ED2701690ED9290AB03979F6F2DF0565
FC56F78410A7E9F8F88399C64A3A04F8AB42EB9B4DAA75386B8EA3759314CED6
93678C1AD3AD0073F6D0F3A3F30107FF3B0994655632FF42F584954BD4E876CC
8E615CEDA0F2403CBADB745F47A3448AE0F13E9CF1D7051699046DC78D34C1B2
1BD519C8116AB720C18B803B3F86344B23D4EDE3BC8DCA56FC0B2C99745685DD
FE820F23656F6C4F91E3396A7FEA6CD1EF75EF2FAD1D9FAB7D9DC3B06D44E25A
42B0B75945A0B055085AB9655A5338B34F6B568223349A3633C417EC6ABCC102
5C12180AD4FECEFC15FB44B410E1A5A9BA954AC2C429B65C183FFA937C3AE5AA
38F04F82C686031A803AEDE6F80A04B2D88B5BFE59F45F21322C4F4BE4FB7A53
47832FB21CFFEA08B8709F2A9DA6886DDAB63A06CDC6BEDB55A9DE461B11712C
9DB2DD051A2926CACF4BF613133DDB0236A9ED185BBE86BE831EE93914EB6746
E35CD6855699C2FDB8D40010E1086EAF6E33AC563B8F17C6AF442F30E89F993E
60EC53E36E702B92C5CE15B3C588ACB2CD64FB3295525C21A728007D9EFB6748
5C5776D01AF3A3E565C2923DE44809DE6571B2B1B6C256DC09C5870981F15520
A616E47DC498C33F37E0A4292E4DD1B6B3FF313AA7A1642D53460CB67F902CBE
9422C774EDC8FCA577C8BF9AC34CD6D6458237002D1608BAFBB0EFC6DAF70A6B
E9B0F89F2ABFDDD72C2D73DBC3FDC9AC995851B541EF32BD25269F9063A64CE2
08F9778243A84B021BA7C51D27DCC346247606F78AAA1D457A237820E054C69A
06E53B4BD6DA71336EAC88D3947731BF90D884C63EF9B4D69AA7ED92130ECC74
2D33F25870F46919E703606138CE8EC0379F1264EF8826300E6EF3F46A0B10BC
D386D19E8E4D3AB31018EB2F19D7720B9D0C840B1DDBA678F53F1B38C1907DA3
83ADFE4429DB2111B37CD9CA153153ECFB1C7FDC7512A6C386B3738A067A50C9
4B077D1307B10849A90ED75C4B2952F7E6D754C2FBCADBEECE3B21B56396B933
9B7DA608D415D0EDFAC2EBAF831D722BF988789E16D69EB4706A3A106F8CEC37
778C9F150D5694791535D71DE55F9FC3199863FC4A0AF52E475B5093B6AF5C77
A5DA817559A37BD8F889C406C943B14745C15A8C11587CF628A08044FDB35766
0065B8F945E8C7727514D2FB098125A007731BF2D451891D2D1BD946178EE694
D405BE6F5D555F1E938BE4FD234C05BB25D5318AD8416FEED4B142F2A0266FAE
DB0221C94CB4D43D6CC25643E0635F0F52F7DD32AF45F875E493C06DF1E13088
50FC90AD72B852BAD9B954F088FC7254235538832CA5375EDCC98F12419D2E23
F1A5522617C342A56B049F491D1C8BE038AD76E86ACC9FCB662B709481DB6BB8
037D78BA5873B9B22249B441DFDAD75D6E4E29075654FC84FCCC4B935D686AC2
57938EAC92ACF927B3BC7F9E143BED1F77D6A1750AA98606781195D25D65726C
A3F58A6481D10C92C3CD2AA51D06E741FF91D5426F580F7932DAA7C543008AD2
0585034A0DDD8ADBB90A44B090E702A1D39532A6CBCB06961A9A6F51545E7404
370ABA34D6D94DC67D3E4158B17D6606145B13CC048B0CC5723EDC08194E693C
26AC2B17C279F09A82F63F6C51016DD9F80305E6C1C2C6A1E144ECED789E84CF
FD534C04EEE550CE99228B39575D840CBDABDFFCE5DEACB990419C6C379B2AB5
DC721CFBCD1E349269306E115467052C7E15E67450DC8ADF9497A8667B315975
C8210640545D842C2FBC053F176B72A578F78934AE4C1E16A84B5A0E61B4A9CF
6D4AC4C50FB4CD51F5192073AC567FEBFB8691FB2467504B65CFD2DB929235F5
F0F32AEF25A3AE93F73C12DCDC1AA6BF6776642373DEA32C459D4F2AFB2DB667
042474F807D8C5D614C353A61F10B1B3C2518EC904CA9DFEB529C5EA97039204
C7EEA0BB60C59D40F48D6C14831D03A0C385C3C0B314B0FB7274F9A804EFD762
21E445DCF269A77664150794C2B35649C47D39C15B0FAACAE942B40C58A01208
3A8C3A2A9661E753471CEA987C22F2CD6ACB02D54A6814B68164D334ED84970C
3FD1E22AD18E17800C17CD1AD89333585BC92F06E8A4B2A44E40E7DEC8DDA2D7
31C0DF9AC43E0E0E89F1DB802185C5EC60888B1B199463D1D631B5F186141493
5FF38085176B74D737DC662426618CA6BF84241BD88D5EF37FD36459DE039D32
55FB3EA034ADB579D328A0F08C6F9E32348310D7DDCB9993BDD279650054C080
DC5BF4AADA71BA415D84AD12ABBF0A7F66D47A8E7BE259D9A2A94BFF0C4F1A4B
881AD32CFD2A52C9175736D58B44A39B49B426F87D5659276A142079A455DF75
8168E016663C931B4A9389DBA9C90E2B6B185E18DE3CA60AFE32F73E3BB75D8C
4DFC6EAB75F721A3AD35D49F7A0F8CED6B0AF3DFCB376A585D6817F3021343A9
CF9B32695EF03CD683F6905857C834E5D03274C34E3E4509F6EE8CDB664D3FF7
14D9A26B56CDA4BC8C73EC845AE2FCA741EF2AE3E9FED1BB4BBD3BB98CB709BB
6350959E9A5F73290307D251B3ACBD67D0EF6DDD0A848704F533D8DD88B8D9B6
EEA9EE201786341396043CDB79F766C4800F0999C4C81EA7FB47390E91DCD390
3B834D858BDC1968EE5B90EB895DD56CEEA3A54F8650478AB5E48C58BE194928
30ECBD060A0E76AC6A976A9BBF5E8786A5D8861A691498A5EDA215AEEE363D93
1BC48D03594650BBBFE39F194B1B617C7FCE8593ECE6BEC9310546E8922E7D64
F3C208A11FE18EC023C98AE2A25A9BD9431CAB2599838786ED8BA646384C1629
AB4DF985CB35649B9E1962C7AF01C15240638919E66D3986E1E070C110543024
A7DCC2C8EFCE50E60EF9FA7CDB21E4FCA0937F42433C99F761E4FA2EEF7A175B
DF31897B0A10D4BABBA83958011E3F83CF1EC85F42F7664775E6FF05AEE30500
F347581679B5FCA1585C5AD03BF2185E8A154EB5F435CF2836614F4459F2752E
93FF9272C8D6DDF46CEB3DDC32B08DD21A1A5F0BC0E5C667B67CDD87091B63C5
0884547BF15D87FFC3A8A2846788EACC4D87FB85D46A9CADA07BBA39A025CC0A
A59E8558C7A3B7F3A9E350A1325E92D3DC34338ACED491D441840D598E252C12
609A918E6610C8A024942FA829B80419359933ACACE305733BF769E77F374049
E83F86133A5807FEEE2FC644F189D0EF15A41B00965C072A59B5CC64132B5029
CC34FF9BF48BB9B90D23B990FA0C196DC465666698F7433160C4D99E5B2E8F59
AE0E2382DBEE2752B2E0DA9797F6FA73B7E91C0CD25F57C069FA560C03787167
ED00A392461B9427EEA370056498732493EAC9F578D77377407C7519A3E51CD3
A1B2DC126BABE5FCC20B5A1BEE7D9A1732C53186A0CE414895FA557F28541289
6E0FC8FC9FFDFD0E0EED066AA02075BB234732E28A5343809C41BF7DDE48F5C7
6D8A05748FA19F6E5CFDC767D40EA6A7649E56E7DAF59C089C06D765EFD74B18
50CE39E5E13F566C7D106AB4A2CC33489952F540FBC7707A0638C801A0E944C8
BCFC0DEB1A7B0D56F6A36BF6A92E2AD6E8A9971E517827C8A43BC9B4745863B5
305913A61A02E8D6ABA53416F0019DD03D5E7BE6E0ACB6DEBD2C3FD3BF0F8222
583223B12A29246DED49F8B3D4E1A41E921E2906197FABFACE9CB7D508E27F57
FEB5EC41C62755FDE6F726612EBF7D651F2B7A934F4E545C3FAC910B718612D9
5811F538F0F04F52ADF96C665BD6D82F9B64CB7C67F69C0F0676BDBBF760426C
9B99A1781589672AB5B208
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (progressreport.dvi)
@start /Fa 135[59 3[44 1[46 2[56 62 93 31 59 1[31 62
56 1[51 3[54 13[62 8[58 1[88 4[81 1[85 13[56 56 56 2[31
34[65 11[{}23 99.6264 /CMBX12 rf /Fb 138[53 37 38 39
1[53 48 53 4[27 1[48 1[44 53 42 18[65 6[36 4[73 16[48
48 48 49[{}18 83.022 /CMBX10 rf /Fc 138[75 52 53 55 1[75
67 75 1[37 2[37 1[67 41 61 75 60 75 65 12[94 3[92 6[50
4[103 97 16[67 67 49[{}23 119.552 /CMBX12 rf /Fd 133[37
44 44 60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46
42 25 37 46 37 46 42 4[42 2[62 62 85 62 62 60 46 61 65
57 65 62 76 52 65 43 30 62 65 54 57 63 60 59 62 6[23
42 42 42 42 42 42 42 42 42 42 42 23 28 23 2[32 1[23 4[42
19[69 46 46 48 11[{}74 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Capstone Project)/Subject
(Capstone Project)/Creator (LaTeX with hyperref package)/Author (Chongxian Chen)/Keywords
(Problem Statement) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -158 -466 a Black 0 TeXcolorgray Black 0 TeXcolorgray
-150 -150 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150
-150 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150
a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Introduction) /OUT
pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -3/Dest (section.2) cvn/Title (Progress Descriptions)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (Alex Hoffer)
/OUT pdfmark end
 -150
-150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (Chongxian Chen)
/OUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin [/Count -0/Dest (subsection.2.3) cvn/Title (Jake Smith)
/OUT pdfmark end
 -150 -150
a -150 -150 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -150 -150 a -150 -150 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -150 -150 a -150
-150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150 -150
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -150 -150 a 0 TeXcolorgray 0 TeXcolorgray 728 -67 a
Fd(Oregon)26 b(State)i(Univ)n(ersit)n(y)e(Computer)h(Science)h(Senior)f
(Design)g(F)-7 b(all)28 b(2016)1656 132 y(Progress)d(Rep)r(ort)1039
332 y(By)i(Alex)h(Ho\013er,)f(Jak)n(e)g(Smith,)h(and)g(Chen)f
(Chongxian)1463 531 y(T)-7 b(eam)27 b(Name:)37 b(Stat)28
b(Champs)1792 1439 y(Abstract)-110 1638 y(The)f(application)g(of)h(mac)
n(hine)f(learning)f(to)i(Bio)r(c)n(hemistry)e(and)i(Bioph)n(ysics)e
(has)h(enabled)h(researc)n(hers)c(in)k(this)g(\014eld)g(to)f(mak)n(e)
-55 1738 y(remark)-5 b(able)27 b(disco)n(v)n(eries,)e(suc)n(h)i(as)g
(the)h(generation)e(of)i(new)f(DNA)i(sequences.)36 b(Ho)n(w)n(ev)n(er,)
26 b(studen)n(ts)i(of)f(Bio)r(c)n(hemistry)g(and)-98
1837 y(Bioph)n(ysics)f(do)h(not)h(get)f(the)h(opp)r(ortunit)n(y)f(to)h
(learn)e(mac)n(hine)i(learning.)35 b(Dr.)i(Victor)28
b(Hsu)f(of)h(the)g(Oregon)e(State)h(Univ)n(ersit)n(y)-113
1937 y(Bio)r(c)n(hemistry)g(and)g(Bioph)n(ysics)f(departmen)n(t)i(has)f
(commissioned)g(the)h(Stat)f(Champs)h(to)f(pro)r(duce)g(an)h
(instructional)f(mo)r(dule)-84 2036 y(to)h(giv)n(e)e(his)i(studen)n(ts)
g(the)g(c)n(hance)e(to)i(familiarize)f(themselv)n(es)g(with)h(mac)n
(hine)f(learning.)36 b(The)27 b(soft)n(w)n(are)f(pro)r(duct)i(the)g
(Stats)-139 2136 y(Champs)g(ha)n(v)n(e)e(agreed)g(to)i(dev)n(elop)e(is)
i(a)f(w)n(eb)g(page)g(that)h(allo)n(ws)e(studen)n(ts)i(to)f(train)h(a)f
(mac)n(hine)g(learning)f(mo)r(del)i(based)f(on)h(the)-146
2236 y(college)e(bask)n(etball)h(statistics)g(and)g(mac)n(hine)h
(learning)e(algorithm)g(of)i(their)g(c)n(ho)r(osing)e(in)i(order)e(to)h
(pro)r(duce)g(a)h(Marc)n(h)e(Madness)-147 2335 y(brac)n(k)n(et.)35
b(This)28 b(will)f(help)h(studen)n(ts)g(understand)f(ho)n(w)g(mac)n
(hine)g(learning)g(algorithms)f(pro)r(duce)h(mo)r(dels)h(and)f(ho)n(w)g
(inclusion)g(or)-49 2435 y(exclusion)g(of)g(certain)g(data)g(can)g
(in\015uence)h(suc)n(h)g(mo)r(dels.)36 b(Ov)n(er)27 b(the)h(course)e
(of)h(F)-7 b(all)28 b(term)g(2016,)d(the)j(Stat)g(Champs)g(ha)n(v)n(e)
-83 2535 y(dev)n(elop)r(ed)f(materials)g(suc)n(h)g(as)g(design)g(do)r
(cumen)n(ts)h(and)f(tec)n(hnology)f(reviews)h(in)h(order)e(to)h
(prepare)g(for)g(the)h(engineering)e(of)83 2634 y(this)h(mo)r(dule.)38
b(This)27 b(rep)r(ort)g(comprehensiv)n(ely)f(describ)r(es)h(the)h
(progress)d(the)j(Stat)g(Champs)g(ha)n(v)n(e)e(made)h(th)n(us)h(far.)p
0 TeXcolorgray 1929 5799 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -67 a
SDict begin H.S end
 -150 -67 a -150 -67 a
SDict begin 18 H.A end
 -150 -67 a -150 -67
a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -150 -67 a Fc(T)-11 b(able)45 b(of)g(Con)l(ten)l(ts)p
0 TeXcolorgray -150 116 a
SDict begin H.S end
 -150 116 a Fb(1)77 b(In)m(tro)s(duction)501
116 y
SDict begin 12 H.L end
 501 116 a 501 116 a
SDict begin [/Subtype /Link/Dest (section.1) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 501 116 a 0 TeXcolorgray 3501
w Fb(3)p 0 TeXcolorgray -150 298 a
SDict begin H.S end
 -150 298 a Fb(2)g(Progress)31
b(Descriptions)884 298 y
SDict begin 12 H.L end
 884 298 a 884 298 a
SDict begin [/Subtype /Link/Dest (section.2) cvn/H /I/Border [0 0 0]BorderArrayPatch/Color
[1 0 0] H.B /ANN pdfmark end
 884 298
a 0 TeXcolorgray 3118 w Fb(3)p 0 TeXcolorgray -25 398
a
SDict begin H.S end
 -25 398 a Fd(2.1)83 b(Alex)28 b(Ho\013er)581 398 y
SDict begin 12 H.L end

581 398 a 581 398 a
SDict begin [/Subtype /Link/Dest (subsection.2.1) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 581 398 a 0 TeXcolorgray 65 w Fd(.)41
b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h
(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)
f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(3)p 0 TeXcolorgray 0 TeXcolorgray
-25 498 a
SDict begin H.S end
 -25 498 a Fd(2.2)83 b(Chongxian)27 b(Chen)772
498 y
SDict begin 12 H.L end
 772 498 a 772 498 a
SDict begin [/Subtype /Link/Dest (subsection.2.2) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 772 498 a 0 TeXcolorgray 67
w Fd(.)42 b(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f
(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)
h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(4)p 0 TeXcolorgray 0 TeXcolorgray
-25 597 a
SDict begin H.S end
 -25 597 a Fd(2.3)83 b(Jak)n(e)27 b(Smith)572
597 y
SDict begin 12 H.L end
 572 597 a 572 597 a
SDict begin [/Subtype /Link/Dest (subsection.2.3) cvn/H /I/Border [0
0 0]BorderArrayPatch/Color [1 0 0] H.B /ANN pdfmark end
 572 597 a 0 TeXcolorgray 74
w Fd(.)41 b(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h
(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)
h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)h(.)f(.)h(.)f(.)h(.)g(.)f(.)p
0 TeXcolorgray 111 w(5)p 0 TeXcolorgray 0 TeXcolorgray
1929 5799 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150 a
SDict begin 12 H.A end
 -150 -150 a -150
-150 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -150 -150 a 83 x Fc(1)135 b(In)l(tro)t(duction)-150
115 y Fd(This)33 b(rep)r(ort)f(c)n(hronicles)g(the)h(progress)e(the)i
(Stat)h(Champs)e(ha)n(v)n(e)g(made)h(on)g(dev)n(eloping)f(the)h(mac)n
(hine)g(learning)f(instructional)-150 214 y(to)r(ol.)j(As)23
b(of)f(the)h(end)g(of)f(F)-7 b(all)23 b(term)f(2016,)g(the)h(progress)d
(that)j(has)f(b)r(een)h(made)f(consists)g(of)h(a)f(pro)5
b(ject)21 b(statemen)n(t,)j(a)e(requiremen)n(ts)-150
314 y(do)r(cumen)n(t,)29 b(a)f(design)g(do)r(cumen)n(t,)h(a)f(tec)n
(hnology)f(review,)h(and)g(this)h(progress)d(rep)r(ort.)39
b(The)28 b(remaining)g(sections)g(of)g(this)h(rep)r(ort)-150
414 y(are)d(dev)n(oted)g(to)g(eac)n(h)g(of)g(the)h(individual)g(mem)n
(b)r(ers)f(of)h(the)g(Stat)g(Champs)f(to)g(describ)r(e)h(their)f(exp)r
(eriences)g(this)h(term)f(as)g(w)n(ell)h(as)-150 513
y(their)h(con)n(tributions)e(to)i(these)f(do)r(cumen)n(ts.)-150
638 y
SDict begin H.S end
 -150 638 a -150 638 a
SDict begin 12 H.A end
 -150 638 a -150 638 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -150
638 a 150 x Fc(2)135 b(Progress)45 b(Descriptions)-150
893 y
SDict begin H.S end
 -150 893 a -150 893 a
SDict begin 12 H.A end
 -150 893 a -150 893 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 -150
893 a 93 x Fa(2.1)112 b(Alex)38 b(Ho\013er)-150 1140
y Fd(In)27 b(w)n(eek)f(one,)g(w)n(e)g(w)n(ere)g(assigned)f(to)i(the)g
("Mac)n(hine)e(Learn)h(Y)-7 b(our)26 b(W)-7 b(a)n(y)26
b(to)h(Marc)n(h)e(Madness)h(Glory")f(pro)5 b(ject)26
b(prop)r(osed)g(b)n(y)g(our)-150 1239 y(clien)n(t)g(Dr.)37
b(Victor)26 b(Hsu.)36 b(During)26 b(w)n(eek)g(t)n(w)n(o,)f(w)n(e)h(met)
h(with)g(Dr.)36 b(Hsu)26 b(to)g(get)g(clarit)n(y)g(on)f(the)i(sp)r
(eci\014c)f(details)g(of)g(the)h(pro)5 b(ject.)36 b(A)-150
1339 y(synopsis)27 b(of)g(the)h(pro)5 b(ject)27 b(can)g(b)r(e)h(found)g
(in)g(the)g(Abstract)f(of)h(this)g(do)r(cumen)n(t.)-25
1438 y(After)k(meditating)h(on)f(what)h(w)n(e)f(learned)g(from)g(our)g
(exc)n(hange)f(with)i(Dr.)52 b(Hsu,)34 b(w)n(e)e(wrote)g(a)g(rough)f
(draft)i(of)f(our)g(pro)5 b(ject)-150 1538 y(statemen)n(t.)39
b(In)29 b(w)n(eek)e(three,)i(w)n(e)f(re\014ned)g(this)g(do)r(cumen)n(t)
h(and)f(sen)n(t)g(it)h(to)f(Dr.)39 b(Hsu)29 b(for)e(his)i(appro)n(v)-5
b(al.)37 b(The)28 b(pro)5 b(ject)28 b(statemen)n(t)-150
1638 y(consisted)f(of)g(an)h(abstract,)e(a)h(problem)g(de\014nition,)h
(a)f(prop)r(osed)g(solution,)g(and)g(p)r(erformance)f(metrics.)37
b(W)-7 b(e)28 b(w)n(ere)e(all)h(relativ)n(ely)-150 1737
y(new)f(to)f(LaT)-7 b(ex)25 b(and)g(so)g(w)n(e)g(had)h(some)f(issues)g
(formatting)g(this)g(do)r(cumen)n(t)h(correctly)-7 b(.)35
b(Dr.)h(Hsu)26 b(felt)g(that)g(w)n(e)f(needed)h(to)f(c)n(hange)-150
1837 y(sev)n(eral)h(things)h(in)h(the)g(do)r(cumen)n(t,)g(so)f(in)h(w)n
(eek)f(four,)g(w)n(e)g(made)h(these)f(c)n(hanges)f(and)i(re-submitted)g
(it.)-25 1937 y(During)22 b(w)n(eek)h(\014v)n(e,)g(w)n(e)g(b)r(egan)f
(dev)n(eloping)g(our)g(pro)5 b(ject)22 b(requiremen)n(ts)g(do)r(cumen)n
(t.)36 b(I)23 b(made)f(individual)h(progress)e(b)n(y)h(writing)-150
2036 y(the)f(do)r(cumen)n(t)g(in)g(W)-7 b(ord.)34 b(This)21
b(do)r(cumen)n(t)g(w)n(as)e(formatted)i(using)f(the)h(IEEE)e(standard)h
(and)g(th)n(us)h(consisted)f(of)h(an)f(in)n(tro)r(duction,)-150
2136 y(an)33 b(o)n(v)n(erall)f(description,)j(sp)r(eci\014c)e
(requiremen)n(ts,)i(and)e(a)g(Gan)n(tt)h(c)n(hart.)55
b(My)33 b(individual)h(con)n(tribution)f(included)h(writing)g(the)-150
2235 y(in)n(tro)r(duction,)k(an)e(o)n(v)n(erall)e(description,)k(and)e
(the)h(sp)r(eci\014c)f(requiremen)n(ts.)61 b(The)37 b(next)f(w)n(eek,)i
(w)n(e)e(adapted)g(m)n(y)g(writing)f(to)h(a)-150 2335
y(LaT)-7 b(ex)25 b(\014le)h(dev)n(elop)r(ed)g(b)n(y)f(Jak)n(e)g(and)h
(added)f(a)h(Gan)n(tt)g(c)n(hart)f(that)h(Chongxian)f(made.)36
b(Then,)27 b(w)n(e)e(submitted)i(the)f(\014nal)g(pro)r(duct)-150
2435 y(to)h(Dr.)37 b(Hsu)28 b(and)g(got)f(his)g(appro)n(v)-5
b(al.)-25 2534 y(When)22 b(w)n(eek)f(sev)n(en)g(came,)h(w)n(e)g
(revised)e(and)i(re-submitted)g(our)e(pro)5 b(ject)21
b(requiremen)n(ts)g(do)r(cumen)n(t)h(b)r(ecause)f(Dr.)35
b(Win)n(ters)21 b(felt)-150 2634 y(it)27 b(w)n(as)f(to)r(o)h(v)-5
b(ague.)36 b(Individually)-7 b(,)27 b(w)n(e)g(made)g(progress)d(on)j
(our)f(sections)h(of)g(the)g(tec)n(hnology)f(review)g(do)r(cumen)n(t.)
37 b(In)27 b(w)n(eek)f(eigh)n(t,)-150 2734 y(w)n(e)k(eac)n(h)g
(individually)g(completed)h(our)f(tec)n(hnology)f(review)g(sections)h
(and)h(compiled)f(them)h(in)n(to)f(one)g(large)g(LaT)-7
b(ex)29 b(formatted)-150 2833 y(do)r(cumen)n(t.)36 b(W)-7
b(e)26 b(faced)g(some)f(di\016cult)n(y)h(in)g(coming)f(up)g(with)i
(resp)r(onsibilities)e(for)g(eac)n(h)f(of)i(us)f(and)h(realizing)e
(what)i(tec)n(hnologies)-150 2933 y(w)n(ould)37 b(b)r(e)h(b)r(est)g
(suited)g(to)f(satisfy)g(said)h(resp)r(onsibilities.)66
b(My)37 b(resp)r(onsibilities)g(w)n(ere)g(cen)n(tered)g(around)f(the)i
(usabilit)n(y)f(and)-150 3033 y(app)r(earance)22 b(of)i(the)g(system.)
36 b(They)24 b(w)n(ere)e(1\))i(the)g(graphical)f(user)g(in)n(terface)g
(of)h(the)g(w)n(eb)g(page)f(2\))h(a)f(presen)n(tation)g(of)h
(instructions)-150 3132 y(to)35 b(the)g(user)f(of)g(the)h(mo)r(dule)g
(and)g(3\))f(the)h(presen)n(tation)f(of)g(the)h(mac)n(hine)g(learned)e
(brac)n(k)n(et.)57 b(After)35 b(careful)f(consideration,)h(I)-150
3232 y(landed)28 b(on)f(using)g(PyGUI)g(for)h(1\),)f(W)-7
b(ebix)28 b(for)f(2\),)h(and)f(VTK)h(for)f(3\).)-25 3331
y(F)-7 b(or)18 b(w)n(eek)h(nine,)i(w)n(e)e(discussed)g(as)g(a)g(team)g
(what)g(approac)n(h)f(w)n(e)h(should)g(tak)n(e)f(to)i(the)f(design)g
(do)r(cumen)n(t,)i(and)f(eac)n(h)e(individually)-150
3431 y(landed)34 b(on)g(di\013eren)n(t)g(soft)n(w)n(are)f(design)g
(templates.)57 b(W)-7 b(e)35 b(also)e(discussed)g(ho)n(w)h(w)n(e)g(w)n
(ould)f(record)g(ourselv)n(es)f(for)i(the)g(progress)-150
3531 y(rep)r(ort.)49 b(One)32 b(solution)f(w)n(e)h(considered)e(w)n(as)
h(ren)n(ting)h(out)f(a)h(microphone)f(from)g(the)i(library)-7
b(.)48 b(As)32 b(usual,)h(w)n(e)f(had)f(some)h(issues)-150
3630 y(with)c(LaT)-7 b(ex)27 b(formatting.)-25 3730 y(In)32
b(the)g(\014nal)h(t)n(w)n(o)e(w)n(eeks,)h(w)n(e)g(\014nished)h(and)f
(submitted)h(our)e(design)h(do)r(cumen)n(t.)51 b(I)32
b(used)g(sequence)g(diagrams)e(to)i(describ)r(e)-150
3830 y(the)37 b(functionalit)n(y)f(of)h(the)g(tec)n(hnologies)e(I)h
(selected.)64 b(In)36 b(m)n(y)h(rationale,)g(I)g(included)g(the)g(a)n
(v)n(erage)c(use)k(case)e(for)h(eac)n(h)g(of)g(m)n(y)-150
3929 y(resp)r(onsibilities.)i(It)29 b(w)n(as)e(di\016cult)i(getting)f
(LaT)-7 b(ex)28 b(to)g(prop)r(erly)f(generate)g(the)i(sequence)e
(diagrams,)g(particularly)g(b)r(ecause)h(the)-150 4029
y(pac)n(k)-5 b(ages)29 b(I)j(installed)f(w)n(ere)f(b)r(eing)h(stubb)r
(orn.)48 b(Then,)33 b(w)n(e)d(got)h(together)f(and)h(recorded)f(a)h
(progress)e(rep)r(ort.)47 b(Finally)-7 b(,)32 b(w)n(e)f(eac)n(h)-150
4128 y(wrote)c(our)g(section)g(of)g(this)h(do)r(cumen)n(t)g(and)g
(compiled)f(it)h(together.)-25 4228 y(Retrosp)r(ectiv)n(e:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1929 5799
a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -147 4571 4 v -152 -47 4 100 v -100 -77 a Fd(P)n(ositiv)n(es)p
1964 -47 V 1796 w(Deltas)p 3610 -47 V 1416 w(Actions)p
4419 -47 V -150 -44 4571 4 v -152 255 4 299 v -100 26
a(Finished)28 b(pro)5 b(ject)27 b(statemen)n(t)g(and)h(requiremen)n(ts)
e(do)r(cumen)n(t)p 1964 255 V 100 w(Need)i(to)f(learn)g(basic)g(Python)
p 3610 255 V 652 w(Will)68 b(tak)n(e)f(Python)3662 126
y(tutorials)47 b(o)n(v)n(er)g(win-)3662 225 y(ter)27
b(break)p 4419 255 V -150 258 4571 4 v -152 657 4 399
v -100 328 a(Finished)h(design)f(do)r(cumen)n(t)h(and)f(progress)e(rep)
r(ort)p 1964 657 V 433 w(Need)j(to)f(learn)g(basic)g(Ja)n(v)-5
b(aScript)p 3610 657 V 538 w(Will)402 b(tak)n(e)3662
428 y(Ja)n(v)-5 b(aScript)221 b(tu-)3662 527 y(torials)50
b(o)n(v)n(er)g(win)n(ter)3662 627 y(break)p 4419 657
V -150 660 4571 4 v -152 1158 4 499 v -100 730 a(W)-7
b(e)28 b(all)f(learned)g(LaT)-7 b(ex)p 1964 1158 V 1339
w(Need)28 b(to)f(learn)g(mac)n(hine)g(learning)g(algorithms)p
3610 1158 V 98 w(Will)c(c)n(hec)n(k)e(online)i(to)3662
830 y(understand)h(the)g(ma-)3662 929 y(c)n(hine)k(learning)e(algo-)
3662 1029 y(rithms)83 b(Chongxian)3662 1129 y(w)n(an)n(ts)27
b(to)g(use)p 4419 1158 V -150 1162 4571 4 v -152 1560
4 399 v -100 1231 a(Prepared)f(for)h(engineering)f(phase)p
1964 1560 V 990 w(Need)i(to)f(learn)g(m)n(y)g(selected)h(tec)n
(hnologies)p 3610 1560 V 241 w(Will)43 b(read)e(the)i(do)r(c-)3662
1331 y(umen)n(tation)g(for)f(m)n(y)3662 1431 y(tec)n(hnologies)120
b(o)n(v)n(er)3662 1530 y(win)n(ter)27 b(break)p 4419
1560 V -150 1564 4571 4 v -150 1680 a
SDict begin H.S end
 -150 1680 a -150
1680 a
SDict begin 12 H.A end
 -150 1680 a -150 1680 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 -150 1680 a 77 x Fa(2.2)112
b(Chongxian)39 b(Chen)-150 1910 y Fd(A)n(t)25 b(b)r(eginning)h(of)f
(the)g(term,)h(w)n(e)f(w)n(ere)f(selected)h(for)g(Mac)n(hine)f
(Learning)g(to)h(Marc)n(h)f(Madness)h(Glory)f(pro)5 b(ject.)35
b(After)26 b(con\014rming)-150 2010 y(the)i(mem)n(b)r(ers,)f(w)n(e)h
(quic)n(kly)e(set)i(up)g(meeting)g(with)g(our)f(clien)n(t.)-25
2110 y(During)33 b(w)n(eek)g(3,)i(w)n(e)f(wrote)f(our)g(problem)g
(statemen)n(t)h(this)g(w)n(eek)g(after)f(meeting)h(with)g(our)f(clien)n
(t)h(Dr.Hsu.)56 b(After)34 b(a)g(few)-150 2209 y(revisions)26
b(our)g(clien)n(t)h(and)g(our)f(team)h(all)f(signed)h(the)g(pap)r(er)g
(and)f(submitted)i(a)f(hard)f(cop)n(y)-7 b(.)36 b(The)27
b(di\016cult)n(y)g(w)n(e)g(meet)g(is)g(\014guring)-150
2309 y(out)e(ho)n(w)g(to)g(con)n(v)n(ert)e(our)h(statemen)n(t)i(to)e
(LaT)-7 b(ex)25 b(without)g(previous)f(exp)r(erience)h(of)g(LaT)-7
b(ex.)35 b(But)26 b(w)n(e)e(w)n(ork)n(ed)g(it)h(out.)36
b(Next)26 b(w)n(eek)-150 2409 y(w)n(e)31 b(plan)g(to)g(go)g(in)n(to)g
(details)g(ab)r(out)g(where)g(to)h(start)e(our)h(pro)5
b(ject.)47 b(Ma)n(yb)r(e)31 b(from)g(the)h(in)n(terface)f(\014st)g(as)g
(w)n(e)g(shortly)g(discussed)-150 2508 y(this)d(w)n(eek.)-25
2608 y(In)22 b(w)n(eek)g(4)h(w)n(e)f(get)g(feedbac)n(k)g(from)h(the)g
(instructor)f(ab)r(out)g(our)g(problem)g(statemen)n(t)h(from)f(last)h
(w)n(eek)f(and)g(w)n(e)g(revise)g(it.)36 b(After)-150
2707 y(comm)n(unicating)30 b(with)h(our)f(clien)n(t)h(again)e(with)i
(our)f(new)h(problem)f(statemen)n(t,)h(w)n(e)f(submitted)i(again.)45
b(Revising)30 b(our)g(problem)-150 2807 y(statemen)n(t)e(go)r(es)e(smo)
r(othly)-7 b(.)37 b(Next)28 b(w)n(eek)f(w)n(e)g(will)h(w)n(ork)e(on)h
(the)h(requiremen)n(t)f(do)r(cumen)n(t)h(and)f(prepare)f(for)i(the)f
(career)f(fair.)-25 2907 y(In)38 b(w)n(eek)h(5)f(w)n(e)g(completed)h
(our)f(problem)g(statemen)n(t)h(and)g(b)r(eginning)g(writing)f(our)g
(requiremen)n(t)g(do)r(cumen)n(t.)70 b(W)-7 b(e)40 b(met)-150
3006 y(di\016culties)26 b(when)f(writing)g(the)h(requiremen)n(t)e(do)r
(cumen)n(t.)37 b(W)-7 b(e)25 b(don't)h(kno)n(w)e(what)i(sp)r(eci\014c)f
(guidelines,)h(format)e(and)i(con)n(ten)n(ts)e(to)-150
3106 y(follo)n(w)30 b(for)g(the)i(requiremen)n(t)e(and)g(w)n(e)h
(didn't)h(discuss)e(ab)r(out)h(this)g(during)f(lecture.)47
b(Next)31 b(w)n(eek)f(w)n(e)h(will)g(talk)f(with)i(our)e(clien)n(t)-150
3206 y(and)d(complete)h(our)f(requiremen)n(t)f(do)r(cumen)n(t.)-25
3305 y(In)38 b(w)n(eek)h(6)f(w)n(e)g(completed)h(our)f(problem)g
(statemen)n(t)h(and)g(b)r(eginning)g(writing)f(our)g(requiremen)n(t)g
(do)r(cumen)n(t.)70 b(W)-7 b(e)40 b(met)-150 3405 y(di\016culties)26
b(when)f(writing)g(the)h(requiremen)n(t)e(do)r(cumen)n(t.)37
b(W)-7 b(e)25 b(don't)h(kno)n(w)e(what)i(sp)r(eci\014c)f(guidelines,)h
(format)e(and)i(con)n(ten)n(ts)e(to)-150 3505 y(follo)n(w)30
b(for)g(the)i(requiremen)n(t)e(and)g(w)n(e)h(didn't)h(discuss)e(ab)r
(out)h(this)g(during)f(lecture.)47 b(Next)31 b(w)n(eek)f(w)n(e)h(will)g
(talk)f(with)i(our)e(clien)n(t)-150 3604 y(and)d(complete)h(our)f
(requiremen)n(t)f(do)r(cumen)n(t.)-25 3704 y(In)d(w)n(eek)g(7)g(w)n(e)g
(revised)f(our)h(requiremen)n(t)f(do)r(cumen)n(t.)36
b(W)-7 b(e)24 b(elab)r(orate)e(the)i(details)f(and)g(add)g(more)g
(detailed)g(job)g(sp)r(eci\014cation)-150 3803 y(to)d(our)f(gan)n(tt)h
(c)n(hart.)33 b(W)-7 b(e)21 b(also)e(separate)f(the)j(lab)r(ors)e(b)r
(et)n(w)n(een)h(our)f(teammates)h(for)f(the)i(tec)n(h)f(review.)33
b(Besides)20 b(w)n(e)f(are)g(researc)n(hing)-150 3903
y(Mac)n(hine)29 b(Learning)e(Algorithms)i(to)g(use)f(in)i(our)e(pro)5
b(ject.)40 b(So)29 b(far)g(w)n(e)f(ha)n(v)n(e)g(found)h(Scikit)h(to)f
(b)r(e)g(a)g(go)r(o)r(d)f(start.)41 b(Di\016culties)29
b(w)n(e)-150 4003 y(met)h(are)e(formatting)h(LaT)-7 b(eX)29
b(and)h(researc)n(hing)d(for)i(Mac)n(hine)f(Learning)h(Algorithm.)42
b(Next)29 b(w)n(eek)g(w)n(e)g(will)h(b)r(e)g(w)n(orking)e(on)h(the)-150
4102 y(design)e(do)r(cumen)n(t)h(and)f(con)n(tin)n(ue)g(researc)n(hing)
-25 4202 y(in)39 b(w)n(eek)g(8)g(w)n(e)g(are)g(fo)r(cusing)g(on)g
(writing)g(our)g(tec)n(h)g(review.)72 b(W)-7 b(e)40 b(\014rst)f(talk)n
(ed)g(ab)r(out)h(dividing)f(lab)r(or)g(b)r(et)n(w)n(een)g(group)-150
4302 y(mem)n(b)r(ers.)h(After)29 b(reac)n(hing)e(agreemen)n(t,)g(w)n(e)
i(b)r(egin)f(researc)n(hing)f(our)g(o)n(wn)h(tec)n(hnology)-7
b(.)39 b(W)-7 b(e)29 b(\014nished)g(writing)f(the)h(tec)n(h)g(review)
-150 4401 y(on)i(W)-7 b(ednesda)n(y)31 b(and)h(submitted)g(the)g(PDF.)g
(The)g(di\016culties)g(I)g(met)g(are)e(coming)h(up)h(with)g(three)g
(tec)n(hnologies)e(for)h(the)h(parts)-150 4501 y(I)i(am)g(resp)r
(onsible)g(for.)56 b(I)34 b(am)g(resp)r(onsible)f(generally)g(for)h
(designing)f(mac)n(hine)h(algorithm)f(th)n(us)h(I)g(ha)n(v)n(e)f(to)h
(explore)g(mac)n(hine)-150 4600 y(algorithm)f(options.)55
b(Since)35 b(none)e(of)h(us)g(are)f(familiar)h(with)g(mac)n(hine)g
(learning,)g(it)h(to)r(ok)e(me)h(a)g(while)g(for)g(researc)n(hing.)53
b(And)-150 4700 y(three)28 b(tec)n(hnologies)e(are)h(kind)h(hard)f(for)
g(me)h(since)f(m)n(y)h(part)f(is)h(more)f(a)g(mathematical)h(solution)f
(than)h(using)f(some)g(tec)n(hnology)-7 b(.)-150 4800
y(But)29 b(\014nally)g(I)f(come)h(up)g(with)g(to)r(ols/library)d(I)j
(am)f(v)n(ery)g(lik)n(ely)g(to)h(use)f(and)h(\014nished)g(the)g(tec)n
(h)g(review.)39 b(Next)29 b(w)n(eek)f(w)n(e)h(will)g(b)r(e)-150
4899 y(w)n(orking)d(on)h(the)h(design)f(do)r(cumen)n(t.)-25
4999 y(In)i(w)n(eek)f(9)g(w)n(e)h(are)f(discussing)g(our)g(design)g(do)
r(cumen)n(t)i(and)e(preparing)g(for)g(our)g(term)h(progress)e(term.)40
b(Di\016culties)30 b(w)n(e)f(met)-150 5099 y(including)c(setting)f(up)h
(the)g(en)n(vironmen)n(t)e(w)n(e)i(need)f(for)g(v)n(oice)g(o)n(v)n(er)e
(presen)n(tation.)35 b(Next)25 b(w)n(eek)f(w)n(e)g(will)h(b)r(e)g
(implemen)n(ting)g(design)-150 5198 y(do)r(cumen)n(t)j(and)f(writing)g
(our)g(progress)f(rep)r(ort.)-25 5298 y(In)f(w)n(eek)g(10)g(w)n(e)g
(are)g(doing)g(our)g(design)g(do)r(cumen)n(t.)36 b(W)-7
b(e)26 b(wrote)f(our)g(o)n(wn)g(individual)h(three)f(pieces)g(and)h
(then)g(w)n(ork)e(together)-150 5397 y(to)i(in)n(tegrate)f(them)i(in)n
(to)f(one)f(design)h(do)r(cumen)n(t.)37 b(W)-7 b(e)26
b(also)f(add)h(the)h(in)n(tro)r(duction,)f(glossary)d(section,)j(etc.)
37 b(Di\016culties)27 b(w)n(e)f(met)-150 5497 y(including)32
b(researc)n(hing)e(the)i(mac)n(hine)g(learning)f(mo)r(dels)h(and)g
(statistics)g(mo)r(dels.)50 b(I)32 b(sp)r(en)n(t)h(a)e(lot)h(of)h(time)
f(reading)f(do)r(cumen)n(ts)p 0 TeXcolorgray 1929 5799
a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -466 a
SDict begin H.S end
 -158 -466 a -158 -466 a
SDict begin H.R end
 -158 -466 a -158
-466 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -158 -466 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-150 -67 a Fd(ab)r(out)33 b(whic)n(h)g(mo)r(del)g(to)g(use)g(in)h(the)f
(SciKit-Learn.)52 b(Finally)33 b(I)g(found)h(sup)r(ervised)e(learning)g
(regression)f(mo)r(del)i(b)r(est)h(\014ts)f(our)-150
33 y(need.)k(W)-7 b(e)28 b(will)g(b)r(e)g(\014nishing)f(the)h(progress)
e(rep)r(ort)g(and)i(presen)n(tation)e(later.)-25 132
y(During)31 b(the)i(\014anls)e(w)n(eek)g(w)n(e)h(\014nished)g(our)f(v)n
(oice)g(o)n(v)n(er)f(presen)n(tation)h(and)g(summarized)h(our)f(term)h
(progress)d(rep)r(ort.)49 b(The)-150 232 y(recording)26
b(and)h(editing)h(go)r(es)f(smo)r(othly)-7 b(.)36 b(W)-7
b(e)28 b(are)f(lo)r(oking)f(forw)n(ard)g(to)i(w)n(orking)e(on)h(this)h
(pro)5 b(ject)27 b(next)h(term.)-150 364 y
SDict begin H.S end
 -150 364 a
-150 364 a
SDict begin 12 H.A end
 -150 364 a -150 364 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.3) cvn /DEST pdfmark
end
 -150 364 a 100 x Fa(2.3)112
b(Jak)m(e)38 b(Smith)-150 618 y Fd(In)26 b(w)n(eek's)e(one)h(and)g(t)n
(w)n(o)g(w)n(e)g(w)n(ere)f(assigned)h(to)g(the)h(pro)5
b(ject)24 b(\\Mac)n(hine)h(Learn)f(Y)-7 b(our)25 b(W)-7
b(a)n(y)25 b(to)g(Marc)n(h)g(Madness)f(Glory")g(lead)h(b)n(y)-150
717 y(Dr.)43 b(Victor)30 b(Hsu.)43 b(W)-7 b(e)30 b(also)f(wrote)g(and)g
(submitted)i(our)e(abstract)g(after)g(sitting)h(do)n(wn)f(with)h(Dr.)44
b(Hsu)30 b(to)f(mak)n(e)g(sure)g(w)n(e)h(fully)-150 817
y(understo)r(o)r(d)d(what)h(he)g(en)n(visioned)e(for)h(this)h(pro)5
b(ject.)-25 916 y(A)n(t)30 b(the)g(b)r(eginning)g(of)g(w)n(eek)f(three)
h(w)n(e)g(wrote)f(a)g(rough)g(draft)h(of)g(the)g(problem)g(statemen)n
(t)g(and)f(sen)n(t)h(it)h(to)e(Dr.)44 b(Hsu)30 b(to)g(get)-150
1016 y(appro)n(v)n(ed.)48 b(This)32 b(do)r(cumen)n(t)g(w)n(as)f(in)n
(tended)h(to)g(pro)n(vide)e(as)h(m)n(uc)n(h)h(clarit)n(y)f(as)g(p)r
(ossible)h(to)f(what)h(our)f(pro)5 b(jects)31 b(functions)h(and)-150
1116 y(goals)25 b(will)j(b)r(e.)37 b(The)27 b(pap)r(er)g(included)g(a)g
(Problem)f(De\014nition,)i(Prop)r(osed)d(Solutions)i(and)g(P)n
(erformance)e(Metrics.)36 b(In)27 b(w)n(eek)f(four)-150
1215 y(w)n(e)k(made)h(the)g(c)n(hanges)e(Dr.)47 b(Hsu)30
b(felt)i(necessary)d(to)h(add.)46 b(w)n(e)31 b(also)e(reformatted)h
(the)h(do)r(cumen)n(t)g(whic)n(h)g(w)n(as)f(di\016cult)h(due)g(to)-150
1315 y(no)c(one)h(in)f(the)h(group)f(b)r(eing)h(comfortable)e(with)i
(Latex.)-25 1415 y(In)f(w)n(eek)g(\014v)n(e)f(w)n(e)h(started)g(on)g
(our)g(requiremen)n(ts)f(do)r(cumen)n(t)h(whic)n(h)g(it)h(outlined)g
(the)f(F)-7 b(unctional,)28 b(T)-7 b(ec)n(hnical)26 b(and)h(Usabilit)n
(y)-150 1514 y(requiremen)n(ts)c(for)h(the)g(pro)5 b(ject.)35
b(Alex)25 b(wrote)e(a)h(lot)g(of)g(this)h(do)r(cumen)n(t)f(while)h(I)f
(adapted)g(it)h(to)f(Latex)g(and)g(Chongxian)f(made)h(the)-150
1614 y(Gan)n(tt)j(c)n(hart.)35 b(W)-7 b(e)27 b(then)g(submitted)h(it)e
(at)h(the)g(end)f(of)h(the)g(w)n(eek)f(to)g(Dr.)37 b(Hsu)26
b(for)g(appro)n(v)-5 b(al)25 b(and)h(commen)n(ts.)36
b(W)-7 b(eek)27 b(6)f(w)n(e)g(made)-150 1713 y(a)e(lot)g(of)g(c)n
(hanges)f(to)h(the)g(format)g(and)g(added)g(more)f(details)h(to)g(the)h
(do)r(cumen)n(t)f(as)f(w)n(ell)h(as)g(the)g(Gan)n(tt)h(c)n(hart.)34
b(Then)25 b(resubmitted)-150 1813 y(the)j(\014nal)f(pro)r(duct)h(to)g
(the)f(clien)n(t)h(with)g(the)g(c)n(hanges)e(to)i(get)f(his)h(appro)n
(v)-5 b(al.)-25 1913 y(During)25 b(w)n(eek)g(sev)n(en)h(w)n(e)f(again)g
(revised)g(our)g(pro)5 b(ject)25 b(requiremen)n(ts)g(do)r(cumen)n(t)h
(b)r(ecause)f(it)h(w)n(as)f(to)r(o)h(v)-5 b(ague)25 b(and)h(didn't)g
(nail)-150 2012 y(do)n(wn)34 b(the)g(details)g(that)h(needed)f(to)g(b)r
(e)h(clear.)56 b(After)34 b(that)h(w)n(e)f(got)f(together)h(and)g(came)
g(up)g(with)h(our)e(tec)n(hnologies)g(for)h(the)-150
2112 y(tec)n(hnical)d(review)f(do)r(cumen)n(t.)47 b(In)31
b(w)n(eek)f(8)h(w)n(e)f(all)h(completed)g(our)f(tec)n(hnical)h(review)f
(sections)g(and)h(com)n(bined)g(them)g(to)g(mak)n(e)-150
2212 y(one)25 b(cohesiv)n(e)e(do)r(cumen)n(t.)37 b(I)25
b(ran)f(in)n(to)h(trouble)f(coming)h(up)g(with)h(all)e(m)n(y)h(tec)n
(hnologies,)f(whic)n(h)h(w)n(ere)f(asso)r(ciated)g(with)h(gathering)
-150 2311 y(and)h(storing)g(the)h(data.)36 b(I)27 b(decided)f(to)h(w)n
(e)f(are)g(going)f(to)i(start)f(o\013)g(b)n(y)h(using)f(a)g(m)n
(ultitude)i(of)e(free)h(data)f(w)n(ebsites)g(then)h(store)f(the)-150
2411 y(data)h(in)h(an)f(A)-9 b(WS)28 b(database)f(to)g(easily)g(w)n
(ork)f(with)i(the)g(A)-9 b(WS)29 b(mac)n(hine)e(learning)f(algorithms.)
-25 2510 y(In)f(the)g(\014nal)g(t)n(w)n(o)f(w)n(eeks)g(w)n(e)g(did)i
(our)e(design)g(do)r(cumen)n(t)h(whic)n(h)g(describ)r(ed)g(the)g
(functionalit)n(y)g(of)g(the)g(tec)n(hnologies)f(w)n(e)g(c)n(hose)-150
2610 y(in)g(the)h(tec)n(hnical)f(review.)35 b(F)-7 b(or)23
b(the)i(design)f(do)r(cumen)n(t)g(I)g(ran)g(in)n(to)g(issues)f(on)h(ho)
n(w)g(to)g(format)g(and)g(mak)n(e)f(the)i(glossary)c(lo)r(ok)j(go)r(o)r
(d)-150 2710 y(I)k(also)e(could)i(not)f(get)h(the)f(UML)h(diagrams)e
(to)i(load)f(correctly)f(in)i(Latex.)36 b(W)-7 b(e)28
b(also)e(wrote)h(and)h(recorded)e(the)i(progress)d(rep)r(ort.)-25
2809 y(Retrosp)r(ectiv)n(e:)p 0 TeXcolorgray 0 TeXcolorgray
-66 2904 4032 4 v -67 3003 4 100 v -16 2973 a(P)n(ositiv)n(es)p
1510 3003 V 1257 w(Deltas)p 3156 3003 V 1416 w(Actions)p
3964 3003 V -66 3006 4032 4 v -67 3305 4 299 v -16 3076
a(Got)j(more)f(comfortable)f(with)i(Latex)p 1510 3305
V 352 w(Need)g(to)g(learn)e(Python)p 3156 3305 V 860
w(Will)68 b(tak)n(e)f(Python)3207 3176 y(tutorials)75
b(on)h(co)r(de)3207 3275 y(academ)n(y)p 3964 3305 V -66
3309 4032 4 v -67 3707 4 399 v -16 3378 a(Got)28 b(a)f(go)r(o)r(d)g
(understanding)g(of)g(the)h(pro)5 b(ject)p 1510 3707
V 99 w(Need)28 b(to)g(learn)e(more)h(ab)r(out)h(Amazon)f(A)-9
b(WS)p 3156 3707 V 172 w(Read)69 b(A)-9 b(WS)69 b(do)r(cu-)3207
3478 y(men)n(tation)28 b(and)g(pla)n(y)3207 3578 y(around)37
b(o)n(v)n(er)f(win)n(ter)3207 3677 y(break)p 3964 3707
V -66 3710 4032 4 v -67 4209 4 499 v -16 3780 a(Re)28
b(learned)f(SQL)p 1510 4209 V 997 w(Need)h(to)g(learn)e(mac)n(hine)i
(learning)e(algorithms)p 3156 4209 V 98 w(Will)d(c)n(hec)n(k)f(online)g
(to)3207 3880 y(understand)i(the)g(ma-)3207 3979 y(c)n(hine)k(learning)
f(algo-)3207 4079 y(rithms)83 b(Chongxian)3207 4179 y(w)n(an)n(ts)27
b(to)g(use)p 3964 4209 V -66 4212 4032 4 v -67 4411 4
200 v -16 4282 a(Finished)h(all)f(do)r(cumen)n(ts)p 1510
4411 V 738 w(Need)h(to)g(v)n(erify)e(stats)p 3156 4411
V 932 w(Av)n(erage)56 b(all)i(dupli-)3207 4381 y(cate)27
b(stats)p 3964 4411 V -66 4415 4032 4 v 0 TeXcolorgray
1929 5799 a(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
